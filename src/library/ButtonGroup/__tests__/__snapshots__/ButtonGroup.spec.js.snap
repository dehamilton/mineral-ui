// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ButtonGroup demo examples Snapshots: basic 1`] = `
.emotion-9 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-9 *,
.emotion-9 *::before,
.emotion-9 *::after {
  box-sizing: inherit;
}

.emotion-9 button:focus,
.emotion-9 button:active {
  position: relative;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled]) {
  border-color: #5691f0;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #f55353;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #3ba164;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #cf7911;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled]) {
  border-color: #1d5bbf;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #b80d0d;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #20693d;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #8a4d03;
}

.emotion-9 button[disabled] {
  border: solid 1px #c8d1e0;
}

.emotion-9 button[disabled][aria-checked=true] {
  background-color: #c8d1e0;
  color: #8e99ab;
}

.emotion-9 button[disabled][aria-checked=true]:hover {
  color: #8e99ab;
}

.emotion-9 > button:not(:first-child),
.emotion-9 > *:not(:first-child) button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

.emotion-9 > button:not(:last-child),
.emotion-9 > *:not(:last-child) button {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  border-right-color: transparent;
}

.emotion-9 > [aria-checked=false]:focus,
.emotion-9 > button:not([aria-checked]):focus,
.emotion-9 > *:not([aria-checked]) button:focus,
.emotion-9 > [aria-checked=false] button:focus,
.emotion-9 > button:not([aria-checked]) button:focus,
.emotion-9 > *:not([aria-checked]) button button:focus {
  border-left-color: #c8d1e0;
  border-right-color: #c8d1e0;
}

.emotion-9 > [aria-checked=false] + [aria-checked=false]:not(:focus) {
  border-left-color: #c8d1e0;
}

.emotion-9 > [aria-checked=false]:not([disabled]):hover + [aria-checked=false]:not(:focus),
.emotion-9 > *:not([aria-checked]):not([disabled]):hover + button:not([aria-checked]):not(:focus),
.emotion-9 > *:not([aria-checked]):not([disabled]):hover + *:not([aria-checked]) button:not(:focus) {
  border-left-color: transparent;
}

.emotion-9 > [aria-checked=true] + [aria-checked=false]:not(:focus) {
  border-left-color: transparent;
}

.emotion-9 > [aria-checked=true] + [aria-checked=true]:not(:focus) {
  border-left-color: currentcolor;
}

.emotion-2 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-2 *,
.emotion-2 *::before,
.emotion-2 *::after {
  box-sizing: inherit;
}

.emotion-2:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:hover {
  background-color: #f5f7fa;
  border-color: #5691f0;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:focus:active,
.emotion-2:focus:hover {
  border-color: #c8d1e0;
}

.emotion-2:active {
  background-color: #ebeff5;
  border-color: #1d5bbf;
  color: #3272d9;
}

.emotion-2::-moz-focus-inner {
  border: 0;
}

.emotion-2 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-2 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-2 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-2 [role="img"]:only-child {
  margin: 0;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  max-height: 100%;
  pointer-events: none;
  width: 100%;
}

.emotion-0 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.875em;
  line-height: 2.857142857142857em;
}

.emotion-0:first-child {
  padding-left: 0.5714285714285714em;
}

.emotion-0:last-child {
  padding-right: 0.5714285714285714em;
}

<ButtonGroup
  aria-label="Edit text"
>
  <Styled(div)
    aria-label="Edit text"
    role="group"
  >
    <div
      aria-label="Edit text"
      className="emotion-9"
      role="group"
    >
      <WithForwardRef(Button)
        data-index={0}
        key="0/.0"
        onClick={[Function]}
        size="large"
      >
        <Button
          data-index={0}
          forwardedRef={null}
          onClick={[Function]}
          size="large"
        >
          <Styled(button)
            data-index={0}
            onClick={[Function]}
            size="large"
            text="Cut"
          >
            <button
              className="emotion-2"
              data-index={0}
              onClick={[Function]}
              size="large"
            >
              <Styled(span)>
                <span
                  className="emotion-1"
                >
                  <Styled(span)
                    size="large"
                  >
                    <span
                      className="emotion-0"
                      size="large"
                    >
                      Cut
                    </span>
                  </Styled(span)>
                </span>
              </Styled(span)>
            </button>
          </Styled(button)>
        </Button>
      </WithForwardRef(Button)>
      <WithForwardRef(Button)
        data-index={1}
        key="1/.1"
        onClick={[Function]}
        size="large"
      >
        <Button
          data-index={1}
          forwardedRef={null}
          onClick={[Function]}
          size="large"
        >
          <Styled(button)
            data-index={1}
            onClick={[Function]}
            size="large"
            text="Copy"
          >
            <button
              className="emotion-2"
              data-index={1}
              onClick={[Function]}
              size="large"
            >
              <Styled(span)>
                <span
                  className="emotion-1"
                >
                  <Styled(span)
                    size="large"
                  >
                    <span
                      className="emotion-0"
                      size="large"
                    >
                      Copy
                    </span>
                  </Styled(span)>
                </span>
              </Styled(span)>
            </button>
          </Styled(button)>
        </Button>
      </WithForwardRef(Button)>
      <WithForwardRef(Button)
        data-index={2}
        key="2/.2"
        onClick={[Function]}
        size="large"
      >
        <Button
          data-index={2}
          forwardedRef={null}
          onClick={[Function]}
          size="large"
        >
          <Styled(button)
            data-index={2}
            onClick={[Function]}
            size="large"
            text="Paste"
          >
            <button
              className="emotion-2"
              data-index={2}
              onClick={[Function]}
              size="large"
            >
              <Styled(span)>
                <span
                  className="emotion-1"
                >
                  <Styled(span)
                    size="large"
                  >
                    <span
                      className="emotion-0"
                      size="large"
                    >
                      Paste
                    </span>
                  </Styled(span)>
                </span>
              </Styled(span)>
            </button>
          </Styled(button)>
        </Button>
      </WithForwardRef(Button)>
    </div>
  </Styled(div)>
</ButtonGroup>
`;

exports[`ButtonGroup demo examples Snapshots: composition 1`] = `
.emotion-19 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-19 *,
.emotion-19 *::before,
.emotion-19 *::after {
  box-sizing: inherit;
}

.emotion-19 button:focus,
.emotion-19 button:active {
  position: relative;
}

.emotion-19 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled]) {
  border-color: #5691f0;
}

.emotion-19 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #f55353;
}

.emotion-19 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #3ba164;
}

.emotion-19 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #cf7911;
}

.emotion-19 button:active:not(:focus):not([aria-checked=true]):not([disabled]) {
  border-color: #1d5bbf;
}

.emotion-19 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #b80d0d;
}

.emotion-19 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #20693d;
}

.emotion-19 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #8a4d03;
}

.emotion-19 button[disabled] {
  border: solid 1px #c8d1e0;
}

.emotion-19 button[disabled][aria-checked=true] {
  background-color: #c8d1e0;
  color: #8e99ab;
}

.emotion-19 button[disabled][aria-checked=true]:hover {
  color: #8e99ab;
}

.emotion-19 > button:not(:first-child),
.emotion-19 > *:not(:first-child) button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

.emotion-19 > button:not(:last-child),
.emotion-19 > *:not(:last-child) button {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  border-right-color: transparent;
}

.emotion-19 > [aria-checked=false]:focus,
.emotion-19 > button:not([aria-checked]):focus,
.emotion-19 > *:not([aria-checked]) button:focus,
.emotion-19 > [aria-checked=false] button:focus,
.emotion-19 > button:not([aria-checked]) button:focus,
.emotion-19 > *:not([aria-checked]) button button:focus {
  border-left-color: #c8d1e0;
  border-right-color: #c8d1e0;
}

.emotion-19 > [aria-checked=false] + [aria-checked=false]:not(:focus) {
  border-left-color: #c8d1e0;
}

.emotion-19 > [aria-checked=false]:not([disabled]):hover + [aria-checked=false]:not(:focus),
.emotion-19 > *:not([aria-checked]):not([disabled]):hover + button:not([aria-checked]):not(:focus),
.emotion-19 > *:not([aria-checked]):not([disabled]):hover + *:not([aria-checked]) button:not(:focus) {
  border-left-color: transparent;
}

.emotion-19 > [aria-checked=true] + [aria-checked=false]:not(:focus) {
  border-left-color: transparent;
}

.emotion-19 > [aria-checked=true] + [aria-checked=true]:not(:focus) {
  border-left-color: currentcolor;
}

.emotion-2 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-2 *,
.emotion-2 *::before,
.emotion-2 *::after {
  box-sizing: inherit;
}

.emotion-2:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:hover {
  background-color: #f5f7fa;
  border-color: #5691f0;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:focus:active,
.emotion-2:focus:hover {
  border-color: #c8d1e0;
}

.emotion-2:active {
  background-color: #ebeff5;
  border-color: #1d5bbf;
  color: #3272d9;
}

.emotion-2::-moz-focus-inner {
  border: 0;
}

.emotion-2 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-2 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-2 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-2 [role="img"]:only-child {
  margin: 0;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  max-height: 100%;
  pointer-events: none;
  width: 100%;
}

.emotion-0 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.875em;
  line-height: 2.857142857142857em;
}

.emotion-0:first-child {
  padding-left: 0.5714285714285714em;
}

.emotion-0:last-child {
  padding-right: 0.5714285714285714em;
}

.emotion-14 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
}

@media only screen and (max-width:450px) {
  .emotion-20 > * button {
    max-width: 5rem;
  }
}

@media only screen and (max-width:380px) {
  .emotion-20 > * button {
    max-width: 4rem;
  }
}

.emotion-7 {
  display: inline-block;
}

.emotion-6 {
  display: inline-block;
}

<Styled(div)>
  <div
    className="emotion-20"
  >
    <ButtonGroup
      aria-label="Optional compositions"
    >
      <Styled(div)
        aria-label="Optional compositions"
        role="group"
      >
        <div
          aria-label="Optional compositions"
          className="emotion-19"
          role="group"
        >
          <WithForwardRef(Button)
            data-index={0}
            key="0/.0"
            onClick={[Function]}
            size="large"
          >
            <Button
              data-index={0}
              forwardedRef={null}
              onClick={[Function]}
              size="large"
            >
              <Styled(button)
                data-index={0}
                onClick={[Function]}
                size="large"
                text="Button"
              >
                <button
                  className="emotion-2"
                  data-index={0}
                  onClick={[Function]}
                  size="large"
                >
                  <Styled(span)>
                    <span
                      className="emotion-1"
                    >
                      <Styled(span)
                        size="large"
                      >
                        <span
                          className="emotion-0"
                          size="large"
                        >
                          Button
                        </span>
                      </Styled(span)>
                    </span>
                  </Styled(span)>
                </button>
              </Styled(button)>
            </Button>
          </WithForwardRef(Button)>
          <Tooltip
            content="Lorem ipsum dolor sit amet"
            data-index={1}
            hasArrow={true}
            key="1/.1"
            onClick={[Function]}
            placement="bottom"
          >
            <WithTheme(Themed(Popover))
              content={[Function]}
              data-index={1}
              focusTriggerOnClose={false}
              hasArrow={true}
              id="tooltip-10"
              isOpen={false}
              onClick={[Function]}
              onClose={[Function]}
              onOpen={[Function]}
              placement="bottom"
            >
              <Themed(Popover)
                content={[Function]}
                data-index={1}
                focusTriggerOnClose={false}
                hasArrow={true}
                id="tooltip-10"
                isOpen={false}
                onClick={[Function]}
                onClose={[Function]}
                onOpen={[Function]}
                placement="bottom"
              >
                <ThemeProvider>
                  <ThemeProvider>
                    <Popover
                      content={[Function]}
                      data-index={1}
                      focusTriggerOnClose={false}
                      hasArrow={true}
                      id="tooltip-10"
                      isOpen={false}
                      onClick={[Function]}
                      onClose={[Function]}
                      onOpen={[Function]}
                      placement="bottom"
                    >
                      <Manager>
                        <Styled(span)
                          content={[Function]}
                          data-index={1}
                          focusTriggerOnClose={false}
                          hasArrow={true}
                          id="tooltip-10"
                          isOpen={false}
                          onClick={[Function]}
                          onClose={[Function]}
                          onOpen={[Function]}
                          placement="bottom"
                        >
                          <span
                            className="emotion-7"
                            content={[Function]}
                            data-index={1}
                            id="tooltip-10"
                            onClick={[Function]}
                            onClose={[Function]}
                            onOpen={[Function]}
                          >
                            <PopoverTrigger
                              aria-describedby="tooltip-10-content"
                              aria-owns="tooltip-10-content"
                              onBlur={[Function]}
                              onClick={[Function]}
                              onFocus={[Function]}
                              onMouseEnter={[Function]}
                              onMouseLeave={[Function]}
                              role="button"
                              size="large"
                              tabIndex={0}
                            >
                              <Reference>
                                <InnerReference
                                  getReferenceRef={[Function]}
                                >
                                  <Styled(span)>
                                    <span
                                      className="emotion-6"
                                    >
                                      <WithForwardRef(Button)
                                        aria-describedby="tooltip-10-content"
                                        aria-owns="tooltip-10-content"
                                        key=".0"
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onFocus={[Function]}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <Button
                                          aria-describedby="tooltip-10-content"
                                          aria-owns="tooltip-10-content"
                                          forwardedRef={null}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onFocus={[Function]}
                                          onMouseEnter={[Function]}
                                          onMouseLeave={[Function]}
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                        >
                                          <Styled(button)
                                            aria-describedby="tooltip-10-content"
                                            aria-owns="tooltip-10-content"
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onFocus={[Function]}
                                            onMouseEnter={[Function]}
                                            onMouseLeave={[Function]}
                                            role="button"
                                            size="large"
                                            tabIndex={0}
                                            text="Tooltip"
                                          >
                                            <button
                                              aria-describedby="tooltip-10-content"
                                              aria-owns="tooltip-10-content"
                                              className="emotion-2"
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onFocus={[Function]}
                                              onMouseEnter={[Function]}
                                              onMouseLeave={[Function]}
                                              role="button"
                                              size="large"
                                              tabIndex={0}
                                            >
                                              <Styled(span)>
                                                <span
                                                  className="emotion-1"
                                                >
                                                  <Styled(span)
                                                    size="large"
                                                  >
                                                    <span
                                                      className="emotion-0"
                                                      size="large"
                                                    >
                                                      Tooltip
                                                    </span>
                                                  </Styled(span)>
                                                </span>
                                              </Styled(span)>
                                            </button>
                                          </Styled(button)>
                                        </Button>
                                      </WithForwardRef(Button)>
                                    </span>
                                  </Styled(span)>
                                </InnerReference>
                              </Reference>
                            </PopoverTrigger>
                          </span>
                        </Styled(span)>
                      </Manager>
                    </Popover>
                  </ThemeProvider>
                </ThemeProvider>
              </Themed(Popover)>
            </WithTheme(Themed(Popover))>
          </Tooltip>
          <Popover
            content={<DemoContent />}
            data-index={2}
            focusTriggerOnClose={true}
            hasArrow={true}
            key="2/.2"
            onClick={[Function]}
            placement="bottom"
          >
            <Manager>
              <Styled(span)
                content={<DemoContent />}
                data-index={2}
                focusTriggerOnClose={true}
                hasArrow={true}
                onClick={[Function]}
                placement="bottom"
              >
                <span
                  className="emotion-7"
                  content={<DemoContent />}
                  data-index={2}
                  onClick={[Function]}
                >
                  <PopoverTrigger
                    aria-describedby="popover-11-content"
                    aria-expanded={false}
                    aria-owns="popover-11-content"
                    onBlur={[Function]}
                    onClick={[Function]}
                    role="button"
                    size="large"
                  >
                    <Reference>
                      <InnerReference
                        getReferenceRef={[Function]}
                      >
                        <Styled(span)>
                          <span
                            className="emotion-6"
                          >
                            <WithForwardRef(Button)
                              aria-describedby="popover-11-content"
                              aria-expanded={false}
                              aria-owns="popover-11-content"
                              key=".0"
                              onBlur={[Function]}
                              onClick={[Function]}
                              role="button"
                              size="large"
                            >
                              <Button
                                aria-describedby="popover-11-content"
                                aria-expanded={false}
                                aria-owns="popover-11-content"
                                forwardedRef={null}
                                onBlur={[Function]}
                                onClick={[Function]}
                                role="button"
                                size="large"
                              >
                                <Styled(button)
                                  aria-describedby="popover-11-content"
                                  aria-expanded={false}
                                  aria-owns="popover-11-content"
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  role="button"
                                  size="large"
                                  text="Popover"
                                >
                                  <button
                                    aria-describedby="popover-11-content"
                                    aria-expanded={false}
                                    aria-owns="popover-11-content"
                                    className="emotion-2"
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    role="button"
                                    size="large"
                                  >
                                    <Styled(span)>
                                      <span
                                        className="emotion-1"
                                      >
                                        <Styled(span)
                                          size="large"
                                        >
                                          <span
                                            className="emotion-0"
                                            size="large"
                                          >
                                            Popover
                                          </span>
                                        </Styled(span)>
                                      </span>
                                    </Styled(span)>
                                  </button>
                                </Styled(button)>
                              </Button>
                            </WithForwardRef(Button)>
                          </span>
                        </Styled(span)>
                      </InnerReference>
                    </Reference>
                  </PopoverTrigger>
                </span>
              </Styled(span)>
            </Manager>
          </Popover>
          <Dropdown
            data={
              Array [
                Object {
                  "text": "Light years",
                },
                Object {
                  "text": "Star stuff",
                },
                Object {
                  "text": "Encyclopaedia galactica",
                },
                Object {
                  "text": "Cosmic ocean",
                },
              ]
            }
            data-index={3}
            itemKey="text"
            key="3/.3"
            onClick={[Function]}
            placement="bottom-start"
          >
            <Popover
              content={[Function]}
              data-index={3}
              focusTriggerOnClose={true}
              hasArrow={true}
              id="dropdown-12"
              isOpen={false}
              itemKey="text"
              onClick={[Function]}
              onClose={[Function]}
              onOpen={[Function]}
              placement="bottom-start"
              triggerRef={[Function]}
            >
              <Manager>
                <Styled(span)
                  content={[Function]}
                  data-index={3}
                  focusTriggerOnClose={true}
                  hasArrow={true}
                  id="dropdown-12"
                  isOpen={false}
                  itemKey="text"
                  onClick={[Function]}
                  onClose={[Function]}
                  onOpen={[Function]}
                  placement="bottom-start"
                  triggerRef={[Function]}
                >
                  <span
                    className="emotion-7"
                    content={[Function]}
                    data-index={3}
                    id="dropdown-12"
                    onClick={[Function]}
                    onClose={[Function]}
                    onOpen={[Function]}
                  >
                    <PopoverTrigger
                      aria-describedby="dropdown-12-content"
                      aria-expanded={false}
                      aria-haspopup={true}
                      aria-owns="dropdown-12-content"
                      iconEnd={<IconArrowDropDown />}
                      onBlur={[Function]}
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      role="button"
                      size="large"
                    >
                      <Reference>
                        <InnerReference
                          getReferenceRef={[Function]}
                        >
                          <Styled(span)>
                            <span
                              className="emotion-6"
                            >
                              <WithForwardRef(Button)
                                aria-describedby="dropdown-12-content"
                                aria-expanded={false}
                                aria-haspopup={true}
                                aria-owns="dropdown-12-content"
                                iconEnd={<IconArrowDropDown />}
                                key=".0"
                                onBlur={[Function]}
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                role="button"
                                size="large"
                              >
                                <Button
                                  aria-describedby="dropdown-12-content"
                                  aria-expanded={false}
                                  aria-haspopup={true}
                                  aria-owns="dropdown-12-content"
                                  forwardedRef={null}
                                  iconEnd={<IconArrowDropDown />}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  role="button"
                                  size="large"
                                >
                                  <Styled(button)
                                    aria-describedby="dropdown-12-content"
                                    aria-expanded={false}
                                    aria-haspopup={true}
                                    aria-owns="dropdown-12-content"
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    size="large"
                                    text="Dropdown"
                                  >
                                    <button
                                      aria-describedby="dropdown-12-content"
                                      aria-expanded={false}
                                      aria-haspopup={true}
                                      aria-owns="dropdown-12-content"
                                      className="emotion-2"
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                    >
                                      <Styled(span)>
                                        <span
                                          className="emotion-1"
                                        >
                                          <Styled(span)
                                            size="large"
                                          >
                                            <span
                                              className="emotion-0"
                                              size="large"
                                            >
                                              Dropdown
                                            </span>
                                          </Styled(span)>
                                          <IconArrowDropDown
                                            key="iconEnd"
                                            size="1.5em"
                                          >
                                            <Icon
                                              rtl={false}
                                              size="1.5em"
                                            >
                                              <Styled(svg)
                                                aria-hidden={true}
                                                focusable="false"
                                                role="img"
                                                rtl={false}
                                                size="1.5em"
                                                viewBox="0 0 24 24"
                                              >
                                                <svg
                                                  aria-hidden={true}
                                                  className="emotion-14"
                                                  focusable="false"
                                                  role="img"
                                                  size="1.5em"
                                                  viewBox="0 0 24 24"
                                                >
                                                  <g>
                                                    <path
                                                      d="M7 10l5 5 5-5z"
                                                    />
                                                  </g>
                                                </svg>
                                              </Styled(svg)>
                                            </Icon>
                                          </IconArrowDropDown>
                                        </span>
                                      </Styled(span)>
                                    </button>
                                  </Styled(button)>
                                </Button>
                              </WithForwardRef(Button)>
                            </span>
                          </Styled(span)>
                        </InnerReference>
                      </Reference>
                    </PopoverTrigger>
                  </span>
                </Styled(span)>
              </Manager>
            </Popover>
          </Dropdown>
        </div>
      </Styled(div)>
    </ButtonGroup>
  </div>
</Styled(div)>
`;

exports[`ButtonGroup demo examples Snapshots: controlled 1`] = `
.emotion-9 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-9 *,
.emotion-9 *::before,
.emotion-9 *::after {
  box-sizing: inherit;
}

.emotion-9 button:focus,
.emotion-9 button:active {
  position: relative;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled]) {
  border-color: #5691f0;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #f55353;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #3ba164;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #cf7911;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled]) {
  border-color: #1d5bbf;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #b80d0d;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #20693d;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #8a4d03;
}

.emotion-9 button[disabled] {
  border: solid 1px #c8d1e0;
}

.emotion-9 button[disabled][aria-checked=true] {
  background-color: #c8d1e0;
  color: #8e99ab;
}

.emotion-9 button[disabled][aria-checked=true]:hover {
  color: #8e99ab;
}

.emotion-9 > button:not(:first-child),
.emotion-9 > *:not(:first-child) button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

.emotion-9 > button:not(:last-child),
.emotion-9 > *:not(:last-child) button {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  border-right-color: transparent;
}

.emotion-9 > [aria-checked=false]:focus,
.emotion-9 > button:not([aria-checked]):focus,
.emotion-9 > *:not([aria-checked]) button:focus,
.emotion-9 > [aria-checked=false] button:focus,
.emotion-9 > button:not([aria-checked]) button:focus,
.emotion-9 > *:not([aria-checked]) button button:focus {
  border-left-color: #c8d1e0;
  border-right-color: #c8d1e0;
}

.emotion-9 > [aria-checked=false] + [aria-checked=false]:not(:focus) {
  border-left-color: #c8d1e0;
}

.emotion-9 > [aria-checked=false]:not([disabled]):hover + [aria-checked=false]:not(:focus),
.emotion-9 > *:not([aria-checked]):not([disabled]):hover + button:not([aria-checked]):not(:focus),
.emotion-9 > *:not([aria-checked]):not([disabled]):hover + *:not([aria-checked]) button:not(:focus) {
  border-left-color: transparent;
}

.emotion-9 > [aria-checked=true] + [aria-checked=false]:not(:focus) {
  border-left-color: transparent;
}

.emotion-9 > [aria-checked=true] + [aria-checked=true]:not(:focus) {
  border-left-color: currentcolor;
}

.emotion-5 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-5 *,
.emotion-5 *::before,
.emotion-5 *::after {
  box-sizing: inherit;
}

.emotion-5:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-5:hover {
  background-color: #f5f7fa;
  border-color: #5691f0;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-5:focus:active,
.emotion-5:focus:hover {
  border-color: #c8d1e0;
}

.emotion-5:active {
  background-color: #ebeff5;
  border-color: #1d5bbf;
  color: #3272d9;
}

.emotion-5::-moz-focus-inner {
  border: 0;
}

.emotion-5 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-5 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-5 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-5 [role="img"]:only-child {
  margin: 0;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  max-height: 100%;
  pointer-events: none;
  width: 100%;
}

.emotion-0 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.875em;
  line-height: 2.857142857142857em;
}

.emotion-0:first-child {
  padding-left: 0.5714285714285714em;
}

.emotion-0:last-child {
  padding-right: 0.5714285714285714em;
}

.emotion-13[class] > *:not(:last-child) {
  margin-bottom: 1rem;
}

.emotion-2 {
  box-sizing: border-box;
  color: #ffffff;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #3272d9;
  border-color: transparent;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-2 *,
.emotion-2 *::before,
.emotion-2 *::after {
  box-sizing: inherit;
}

.emotion-2:focus {
  background-color: #3272d9;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:hover {
  background-color: #5691f0;
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:focus:active,
.emotion-2:focus:hover {
  border-color: transparent;
}

.emotion-2:active {
  background-color: #1d5bbf;
  border-color: #1d5bbf;
  color: #ffffff;
}

.emotion-2::-moz-focus-inner {
  border: 0;
}

.emotion-2 [role="img"] {
  box-sizing: content-box;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-2 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-2 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-2 [role="img"]:only-child {
  margin: 0;
}

.emotion-12 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: transparent;
  border-color: transparent;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 1.5em;
  margin: 0;
  min-width: 1.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-12 *,
.emotion-12 *::before,
.emotion-12 *::after {
  box-sizing: inherit;
}

.emotion-12:focus {
  border-color: #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-12:hover {
  background-color: #f5f7fa;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-12:focus:active,
.emotion-12:focus:hover {
  border-color: #1d5bbf;
}

.emotion-12:active {
  background-color: #ebeff5;
  color: #3272d9;
}

.emotion-12::-moz-focus-inner {
  border: 0;
}

.emotion-12 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-12 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-12 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-12 [role="img"]:only-child {
  margin: 0;
}

.emotion-10 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.75em;
  line-height: 2em;
}

<Component>
  <MyForm>
    <DemoLayout>
      <Styled(div)
        marginBottom="1rem"
      >
        <div
          className="emotion-13"
        >
          <ButtonGroup
            aria-label="Align text"
            checked={0}
            mode="radio"
            onChange={[Function]}
          >
            <Styled(div)
              aria-label="Align text"
              checked={0}
              mode="radio"
              onChange={[Function]}
              role="radiogroup"
            >
              <div
                aria-label="Align text"
                checked={0}
                className="emotion-9"
                mode="radio"
                onChange={[Function]}
                role="radiogroup"
              >
                <WithForwardRef(Button)
                  aria-checked={true}
                  data-index={0}
                  key="0/.0"
                  onClick={[Function]}
                  primary={true}
                  role="radio"
                  size="large"
                >
                  <Button
                    aria-checked={true}
                    data-index={0}
                    forwardedRef={null}
                    onClick={[Function]}
                    primary={true}
                    role="radio"
                    size="large"
                  >
                    <Styled(button)
                      aria-checked={true}
                      data-index={0}
                      onClick={[Function]}
                      primary={true}
                      role="radio"
                      size="large"
                      text="Left"
                    >
                      <button
                        aria-checked={true}
                        className="emotion-2"
                        data-index={0}
                        onClick={[Function]}
                        role="radio"
                        size="large"
                      >
                        <Styled(span)>
                          <span
                            className="emotion-1"
                          >
                            <Styled(span)
                              size="large"
                            >
                              <span
                                className="emotion-0"
                                size="large"
                              >
                                Left
                              </span>
                            </Styled(span)>
                          </span>
                        </Styled(span)>
                      </button>
                    </Styled(button)>
                  </Button>
                </WithForwardRef(Button)>
                <WithForwardRef(Button)
                  aria-checked={false}
                  data-index={1}
                  key="1/.1"
                  onClick={[Function]}
                  role="radio"
                  size="large"
                >
                  <Button
                    aria-checked={false}
                    data-index={1}
                    forwardedRef={null}
                    onClick={[Function]}
                    role="radio"
                    size="large"
                  >
                    <Styled(button)
                      aria-checked={false}
                      data-index={1}
                      onClick={[Function]}
                      role="radio"
                      size="large"
                      text="Center"
                    >
                      <button
                        aria-checked={false}
                        className="emotion-5"
                        data-index={1}
                        onClick={[Function]}
                        role="radio"
                        size="large"
                      >
                        <Styled(span)>
                          <span
                            className="emotion-1"
                          >
                            <Styled(span)
                              size="large"
                            >
                              <span
                                className="emotion-0"
                                size="large"
                              >
                                Center
                              </span>
                            </Styled(span)>
                          </span>
                        </Styled(span)>
                      </button>
                    </Styled(button)>
                  </Button>
                </WithForwardRef(Button)>
                <WithForwardRef(Button)
                  aria-checked={false}
                  data-index={2}
                  key="2/.2"
                  onClick={[Function]}
                  role="radio"
                  size="large"
                >
                  <Button
                    aria-checked={false}
                    data-index={2}
                    forwardedRef={null}
                    onClick={[Function]}
                    role="radio"
                    size="large"
                  >
                    <Styled(button)
                      aria-checked={false}
                      data-index={2}
                      onClick={[Function]}
                      role="radio"
                      size="large"
                      text="Right"
                    >
                      <button
                        aria-checked={false}
                        className="emotion-5"
                        data-index={2}
                        onClick={[Function]}
                        role="radio"
                        size="large"
                      >
                        <Styled(span)>
                          <span
                            className="emotion-1"
                          >
                            <Styled(span)
                              size="large"
                            >
                              <span
                                className="emotion-0"
                                size="large"
                              >
                                Right
                              </span>
                            </Styled(span)>
                          </span>
                        </Styled(span)>
                      </button>
                    </Styled(button)>
                  </Button>
                </WithForwardRef(Button)>
              </div>
            </Styled(div)>
          </ButtonGroup>
          <WithForwardRef(Button)
            minimal={true}
            onClick={[Function]}
            size="small"
          >
            <Button
              forwardedRef={null}
              minimal={true}
              onClick={[Function]}
              size="small"
            >
              <Styled(button)
                minimal={true}
                onClick={[Function]}
                size="small"
                text="Reset to Default Alignment"
              >
                <button
                  className="emotion-12"
                  onClick={[Function]}
                  size="small"
                >
                  <Styled(span)>
                    <span
                      className="emotion-1"
                    >
                      <Styled(span)
                        size="small"
                      >
                        <span
                          className="emotion-10"
                          size="small"
                        >
                          Reset to Default Alignment
                        </span>
                      </Styled(span)>
                    </span>
                  </Styled(span)>
                </button>
              </Styled(button)>
            </Button>
          </WithForwardRef(Button)>
        </div>
      </Styled(div)>
    </DemoLayout>
  </MyForm>
</Component>
`;

exports[`ButtonGroup demo examples Snapshots: disabled 1`] = `
.emotion-9 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-9 *,
.emotion-9 *::before,
.emotion-9 *::after {
  box-sizing: inherit;
}

.emotion-9 button:focus,
.emotion-9 button:active {
  position: relative;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled]) {
  border-color: #5691f0;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #f55353;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #3ba164;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #cf7911;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled]) {
  border-color: #1d5bbf;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #b80d0d;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #20693d;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #8a4d03;
}

.emotion-9 button[disabled] {
  border: solid 1px #c8d1e0;
}

.emotion-9 button[disabled][aria-checked=true] {
  background-color: #c8d1e0;
  color: #8e99ab;
}

.emotion-9 button[disabled][aria-checked=true]:hover {
  color: #8e99ab;
}

.emotion-9 > button:not(:first-child),
.emotion-9 > *:not(:first-child) button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

.emotion-9 > button:not(:last-child),
.emotion-9 > *:not(:last-child) button {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  border-right-color: transparent;
}

.emotion-9 > [aria-checked=false]:focus,
.emotion-9 > button:not([aria-checked]):focus,
.emotion-9 > *:not([aria-checked]) button:focus,
.emotion-9 > [aria-checked=false] button:focus,
.emotion-9 > button:not([aria-checked]) button:focus,
.emotion-9 > *:not([aria-checked]) button button:focus {
  border-left-color: #c8d1e0;
  border-right-color: #c8d1e0;
}

.emotion-9 > [aria-checked=false] + [aria-checked=false]:not(:focus) {
  border-left-color: #c8d1e0;
}

.emotion-9 > [aria-checked=false]:not([disabled]):hover + [aria-checked=false]:not(:focus),
.emotion-9 > *:not([aria-checked]):not([disabled]):hover + button:not([aria-checked]):not(:focus),
.emotion-9 > *:not([aria-checked]):not([disabled]):hover + *:not([aria-checked]) button:not(:focus) {
  border-left-color: transparent;
}

.emotion-9 > [aria-checked=true] + [aria-checked=false]:not(:focus) {
  border-left-color: transparent;
}

.emotion-9 > [aria-checked=true] + [aria-checked=true]:not(:focus) {
  border-left-color: currentcolor;
}

.emotion-15 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-15 *,
.emotion-15 *::before,
.emotion-15 *::after {
  box-sizing: inherit;
}

.emotion-15:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-15:hover {
  background-color: #f5f7fa;
  border-color: #5691f0;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-15:focus:active,
.emotion-15:focus:hover {
  border-color: #c8d1e0;
}

.emotion-15:active {
  background-color: #ebeff5;
  border-color: #1d5bbf;
  color: #3272d9;
}

.emotion-15::-moz-focus-inner {
  border: 0;
}

.emotion-15 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-15 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-15 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-15 [role="img"]:only-child {
  margin: 0;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  max-height: 100%;
  pointer-events: none;
  width: 100%;
}

.emotion-0 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.875em;
  line-height: 2.857142857142857em;
}

.emotion-0:first-child {
  padding-left: 0.5714285714285714em;
}

.emotion-0:last-child {
  padding-right: 0.5714285714285714em;
}

.emotion-40[class] > *:not(:last-child) {
  margin-bottom: 1rem;
}

.emotion-32 {
  box-sizing: border-box;
  color: #ffffff;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #3272d9;
  border-color: transparent;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-32 *,
.emotion-32 *::before,
.emotion-32 *::after {
  box-sizing: inherit;
}

.emotion-32:focus {
  background-color: #3272d9;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-32:hover {
  background-color: #5691f0;
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-32:focus:active,
.emotion-32:focus:hover {
  border-color: transparent;
}

.emotion-32:active {
  background-color: #1d5bbf;
  border-color: #1d5bbf;
  color: #ffffff;
}

.emotion-32::-moz-focus-inner {
  border: 0;
}

.emotion-32 [role="img"] {
  box-sizing: content-box;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-32 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-32 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-32 [role="img"]:only-child {
  margin: 0;
}

.emotion-2 {
  box-sizing: border-box;
  color: #afbacc;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ebeff5;
  border-color: transparent;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: default;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-2 *,
.emotion-2 *::before,
.emotion-2 *::after {
  box-sizing: inherit;
}

.emotion-2:hover {
  color: #afbacc;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:focus:active,
.emotion-2:focus:hover {
  border-color: #c8d1e0;
}

.emotion-2:active {
  color: #afbacc;
}

.emotion-2::-moz-focus-inner {
  border: 0;
}

.emotion-2 [role="img"] {
  box-sizing: content-box;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-2 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-2 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-2 [role="img"]:only-child {
  margin: 0;
}

.emotion-22 {
  box-sizing: border-box;
  color: #afbacc;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ebeff5;
  border-color: transparent;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: default;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-22 *,
.emotion-22 *::before,
.emotion-22 *::after {
  box-sizing: inherit;
}

.emotion-22:hover {
  color: #afbacc;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-22:focus:active,
.emotion-22:focus:hover {
  border-color: transparent;
}

.emotion-22:active {
  color: #afbacc;
}

.emotion-22::-moz-focus-inner {
  border: 0;
}

.emotion-22 [role="img"] {
  box-sizing: content-box;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-22 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-22 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-22 [role="img"]:only-child {
  margin: 0;
}

<DemoLayout>
  <Styled(div)
    marginBottom="1rem"
  >
    <div
      className="emotion-40"
    >
      <ButtonGroup
        aria-label="Edit text"
        disabled={true}
      >
        <Styled(div)
          aria-label="Edit text"
          disabled={true}
          role="group"
        >
          <div
            aria-label="Edit text"
            className="emotion-9"
            disabled={true}
            role="group"
          >
            <WithForwardRef(Button)
              data-index={0}
              disabled={true}
              key="0/.0"
              onClick={[Function]}
              size="large"
            >
              <Button
                data-index={0}
                disabled={true}
                forwardedRef={null}
                onClick={[Function]}
                size="large"
              >
                <Styled(button)
                  data-index={0}
                  disabled={true}
                  onClick={[Function]}
                  size="large"
                  tabIndex={-1}
                  text="Cut"
                >
                  <button
                    className="emotion-2"
                    data-index={0}
                    disabled={true}
                    onClick={[Function]}
                    size="large"
                    tabIndex={-1}
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Cut
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              data-index={1}
              disabled={true}
              key="1/.1"
              onClick={[Function]}
              size="large"
            >
              <Button
                data-index={1}
                disabled={true}
                forwardedRef={null}
                onClick={[Function]}
                size="large"
              >
                <Styled(button)
                  data-index={1}
                  disabled={true}
                  onClick={[Function]}
                  size="large"
                  tabIndex={-1}
                  text="Copy"
                >
                  <button
                    className="emotion-2"
                    data-index={1}
                    disabled={true}
                    onClick={[Function]}
                    size="large"
                    tabIndex={-1}
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Copy
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              data-index={2}
              disabled={true}
              key="2/.2"
              onClick={[Function]}
              size="large"
            >
              <Button
                data-index={2}
                disabled={true}
                forwardedRef={null}
                onClick={[Function]}
                size="large"
              >
                <Styled(button)
                  data-index={2}
                  disabled={true}
                  onClick={[Function]}
                  size="large"
                  tabIndex={-1}
                  text="Paste"
                >
                  <button
                    className="emotion-2"
                    data-index={2}
                    disabled={true}
                    onClick={[Function]}
                    size="large"
                    tabIndex={-1}
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Paste
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
          </div>
        </Styled(div)>
      </ButtonGroup>
      <ButtonGroup
        aria-label="Edit text"
      >
        <Styled(div)
          aria-label="Edit text"
          role="group"
        >
          <div
            aria-label="Edit text"
            className="emotion-9"
            role="group"
          >
            <WithForwardRef(Button)
              data-index={0}
              disabled={true}
              key="0/.0"
              onClick={[Function]}
              size="large"
            >
              <Button
                data-index={0}
                disabled={true}
                forwardedRef={null}
                onClick={[Function]}
                size="large"
              >
                <Styled(button)
                  data-index={0}
                  disabled={true}
                  onClick={[Function]}
                  size="large"
                  tabIndex={-1}
                  text="Cut"
                >
                  <button
                    className="emotion-2"
                    data-index={0}
                    disabled={true}
                    onClick={[Function]}
                    size="large"
                    tabIndex={-1}
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Cut
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              data-index={1}
              key="1/.1"
              onClick={[Function]}
              size="large"
            >
              <Button
                data-index={1}
                forwardedRef={null}
                onClick={[Function]}
                size="large"
              >
                <Styled(button)
                  data-index={1}
                  onClick={[Function]}
                  size="large"
                  text="Copy"
                >
                  <button
                    className="emotion-15"
                    data-index={1}
                    onClick={[Function]}
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Copy
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              data-index={2}
              key="2/.2"
              onClick={[Function]}
              size="large"
            >
              <Button
                data-index={2}
                forwardedRef={null}
                onClick={[Function]}
                size="large"
              >
                <Styled(button)
                  data-index={2}
                  onClick={[Function]}
                  size="large"
                  text="Paste"
                >
                  <button
                    className="emotion-15"
                    data-index={2}
                    onClick={[Function]}
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Paste
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
          </div>
        </Styled(div)>
      </ButtonGroup>
      <ButtonGroup
        aria-label="Align text"
        defaultChecked={0}
        disabled={true}
        mode="radio"
      >
        <Styled(div)
          aria-label="Align text"
          defaultChecked={0}
          disabled={true}
          mode="radio"
          role="radiogroup"
        >
          <div
            aria-label="Align text"
            className="emotion-9"
            defaultChecked={0}
            disabled={true}
            mode="radio"
            role="radiogroup"
          >
            <WithForwardRef(Button)
              aria-checked={true}
              data-index={0}
              disabled={true}
              key="0/.0"
              onClick={[Function]}
              primary={true}
              role="radio"
              size="large"
            >
              <Button
                aria-checked={true}
                data-index={0}
                disabled={true}
                forwardedRef={null}
                onClick={[Function]}
                primary={true}
                role="radio"
                size="large"
              >
                <Styled(button)
                  aria-checked={true}
                  data-index={0}
                  disabled={true}
                  onClick={[Function]}
                  primary={true}
                  role="radio"
                  size="large"
                  tabIndex={-1}
                  text="Left"
                >
                  <button
                    aria-checked={true}
                    className="emotion-22"
                    data-index={0}
                    disabled={true}
                    onClick={[Function]}
                    role="radio"
                    size="large"
                    tabIndex={-1}
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Left
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              aria-checked={false}
              data-index={1}
              disabled={true}
              key="1/.1"
              onClick={[Function]}
              role="radio"
              size="large"
            >
              <Button
                aria-checked={false}
                data-index={1}
                disabled={true}
                forwardedRef={null}
                onClick={[Function]}
                role="radio"
                size="large"
              >
                <Styled(button)
                  aria-checked={false}
                  data-index={1}
                  disabled={true}
                  onClick={[Function]}
                  role="radio"
                  size="large"
                  tabIndex={-1}
                  text="Center"
                >
                  <button
                    aria-checked={false}
                    className="emotion-2"
                    data-index={1}
                    disabled={true}
                    onClick={[Function]}
                    role="radio"
                    size="large"
                    tabIndex={-1}
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Center
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              aria-checked={false}
              data-index={2}
              disabled={true}
              key="2/.2"
              onClick={[Function]}
              role="radio"
              size="large"
            >
              <Button
                aria-checked={false}
                data-index={2}
                disabled={true}
                forwardedRef={null}
                onClick={[Function]}
                role="radio"
                size="large"
              >
                <Styled(button)
                  aria-checked={false}
                  data-index={2}
                  disabled={true}
                  onClick={[Function]}
                  role="radio"
                  size="large"
                  tabIndex={-1}
                  text="Right"
                >
                  <button
                    aria-checked={false}
                    className="emotion-2"
                    data-index={2}
                    disabled={true}
                    onClick={[Function]}
                    role="radio"
                    size="large"
                    tabIndex={-1}
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Right
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
          </div>
        </Styled(div)>
      </ButtonGroup>
      <ButtonGroup
        aria-label="Align text"
        defaultChecked={0}
        mode="radio"
      >
        <Styled(div)
          aria-label="Align text"
          defaultChecked={0}
          mode="radio"
          role="radiogroup"
        >
          <div
            aria-label="Align text"
            className="emotion-9"
            defaultChecked={0}
            mode="radio"
            role="radiogroup"
          >
            <WithForwardRef(Button)
              aria-checked={true}
              data-index={0}
              key="0/.0"
              onClick={[Function]}
              primary={true}
              role="radio"
              size="large"
            >
              <Button
                aria-checked={true}
                data-index={0}
                forwardedRef={null}
                onClick={[Function]}
                primary={true}
                role="radio"
                size="large"
              >
                <Styled(button)
                  aria-checked={true}
                  data-index={0}
                  onClick={[Function]}
                  primary={true}
                  role="radio"
                  size="large"
                  text="Left"
                >
                  <button
                    aria-checked={true}
                    className="emotion-32"
                    data-index={0}
                    onClick={[Function]}
                    role="radio"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Left
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              aria-checked={false}
              data-index={1}
              key="1/.1"
              onClick={[Function]}
              role="radio"
              size="large"
            >
              <Button
                aria-checked={false}
                data-index={1}
                forwardedRef={null}
                onClick={[Function]}
                role="radio"
                size="large"
              >
                <Styled(button)
                  aria-checked={false}
                  data-index={1}
                  onClick={[Function]}
                  role="radio"
                  size="large"
                  text="Center"
                >
                  <button
                    aria-checked={false}
                    className="emotion-15"
                    data-index={1}
                    onClick={[Function]}
                    role="radio"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Center
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              aria-checked={false}
              data-index={2}
              disabled={true}
              key="2/.2"
              onClick={[Function]}
              role="radio"
              size="large"
            >
              <Button
                aria-checked={false}
                data-index={2}
                disabled={true}
                forwardedRef={null}
                onClick={[Function]}
                role="radio"
                size="large"
              >
                <Styled(button)
                  aria-checked={false}
                  data-index={2}
                  disabled={true}
                  onClick={[Function]}
                  role="radio"
                  size="large"
                  tabIndex={-1}
                  text="Right"
                >
                  <button
                    aria-checked={false}
                    className="emotion-2"
                    data-index={2}
                    disabled={true}
                    onClick={[Function]}
                    role="radio"
                    size="large"
                    tabIndex={-1}
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Right
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
          </div>
        </Styled(div)>
      </ButtonGroup>
    </div>
  </Styled(div)>
</DemoLayout>
`;

exports[`ButtonGroup demo examples Snapshots: icons 1`] = `
.emotion-12 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-12 *,
.emotion-12 *::before,
.emotion-12 *::after {
  box-sizing: inherit;
}

.emotion-12 button:focus,
.emotion-12 button:active {
  position: relative;
}

.emotion-12 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled]) {
  border-color: #5691f0;
}

.emotion-12 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #f55353;
}

.emotion-12 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #3ba164;
}

.emotion-12 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #cf7911;
}

.emotion-12 button:active:not(:focus):not([aria-checked=true]):not([disabled]) {
  border-color: #1d5bbf;
}

.emotion-12 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #b80d0d;
}

.emotion-12 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #20693d;
}

.emotion-12 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #8a4d03;
}

.emotion-12 button[disabled] {
  border: solid 1px #c8d1e0;
}

.emotion-12 button[disabled][aria-checked=true] {
  background-color: #c8d1e0;
  color: #8e99ab;
}

.emotion-12 button[disabled][aria-checked=true]:hover {
  color: #8e99ab;
}

.emotion-12 > button:not(:first-child),
.emotion-12 > *:not(:first-child) button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

.emotion-12 > button:not(:last-child),
.emotion-12 > *:not(:last-child) button {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  border-right-color: transparent;
}

.emotion-12 > [aria-checked=false]:focus,
.emotion-12 > button:not([aria-checked]):focus,
.emotion-12 > *:not([aria-checked]) button:focus,
.emotion-12 > [aria-checked=false] button:focus,
.emotion-12 > button:not([aria-checked]) button:focus,
.emotion-12 > *:not([aria-checked]) button button:focus {
  border-left-color: #c8d1e0;
  border-right-color: #c8d1e0;
}

.emotion-12 > [aria-checked=false] + [aria-checked=false]:not(:focus) {
  border-left-color: #c8d1e0;
}

.emotion-12 > [aria-checked=false]:not([disabled]):hover + [aria-checked=false]:not(:focus),
.emotion-12 > *:not([aria-checked]):not([disabled]):hover + button:not([aria-checked]):not(:focus),
.emotion-12 > *:not([aria-checked]):not([disabled]):hover + *:not([aria-checked]) button:not(:focus) {
  border-left-color: transparent;
}

.emotion-12 > [aria-checked=true] + [aria-checked=false]:not(:focus) {
  border-left-color: transparent;
}

.emotion-12 > [aria-checked=true] + [aria-checked=true]:not(:focus) {
  border-left-color: currentcolor;
}

.emotion-7 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-7:hover {
  background-color: #f5f7fa;
  border-color: #5691f0;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-7:focus:active,
.emotion-7:focus:hover {
  border-color: #c8d1e0;
}

.emotion-7:active {
  background-color: #ebeff5;
  border-color: #1d5bbf;
  color: #3272d9;
}

.emotion-7::-moz-focus-inner {
  border: 0;
}

.emotion-7 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-7 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-7 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-7 [role="img"]:only-child {
  margin: 0;
}

.emotion-2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  max-height: 100%;
  pointer-events: none;
  width: 100%;
}

.emotion-1 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.875em;
  line-height: 2.857142857142857em;
}

.emotion-1:first-child {
  padding-left: 0.5714285714285714em;
}

.emotion-1:last-child {
  padding-right: 0.5714285714285714em;
}

.emotion-33[class] > *:not(:last-child) {
  margin-bottom: 1rem;
}

.emotion-3 {
  box-sizing: border-box;
  color: #ffffff;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #3272d9;
  border-color: transparent;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-3 *,
.emotion-3 *::before,
.emotion-3 *::after {
  box-sizing: inherit;
}

.emotion-3:focus {
  background-color: #3272d9;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-3:hover {
  background-color: #5691f0;
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-3:focus:active,
.emotion-3:focus:hover {
  border-color: transparent;
}

.emotion-3:active {
  background-color: #1d5bbf;
  border-color: #1d5bbf;
  color: #ffffff;
}

.emotion-3::-moz-focus-inner {
  border: 0;
}

.emotion-3 [role="img"] {
  box-sizing: content-box;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-3 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-3 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-3 [role="img"]:only-child {
  margin: 0;
}

.emotion-0 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
}

.emotion-15 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0.4375em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-15 *,
.emotion-15 *::before,
.emotion-15 *::after {
  box-sizing: inherit;
}

.emotion-15:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-15:hover {
  background-color: #f5f7fa;
  border-color: #5691f0;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-15:focus:active,
.emotion-15:focus:hover {
  border-color: #c8d1e0;
}

.emotion-15:active {
  background-color: #ebeff5;
  border-color: #1d5bbf;
  color: #3272d9;
}

.emotion-15::-moz-focus-inner {
  border: 0;
}

.emotion-15 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-15 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-15 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-15 [role="img"]:only-child {
  margin: 0;
}

.emotion-25 {
  box-sizing: border-box;
  color: #2a854e;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0.4375em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-25 *,
.emotion-25 *::before,
.emotion-25 *::after {
  box-sizing: inherit;
}

.emotion-25:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #20693d;
  color: #2a854e;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-25:hover {
  background-color: #f5f7fa;
  border-color: #3ba164;
  color: #2a854e;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-25:focus:active,
.emotion-25:focus:hover {
  border-color: #c8d1e0;
}

.emotion-25:active {
  background-color: #ebeff5;
  border-color: #20693d;
  color: #2a854e;
}

.emotion-25::-moz-focus-inner {
  border: 0;
}

.emotion-25 [role="img"] {
  box-sizing: content-box;
  color: #2a854e;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-25 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-25 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-25 [role="img"]:only-child {
  margin: 0;
}

.emotion-28 {
  box-sizing: border-box;
  color: #ad5f00;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0.4375em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-28 *,
.emotion-28 *::before,
.emotion-28 *::after {
  box-sizing: inherit;
}

.emotion-28:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #8a4d03;
  color: #ad5f00;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-28:hover {
  background-color: #f5f7fa;
  border-color: #cf7911;
  color: #ad5f00;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-28:focus:active,
.emotion-28:focus:hover {
  border-color: #c8d1e0;
}

.emotion-28:active {
  background-color: #ebeff5;
  border-color: #8a4d03;
  color: #ad5f00;
}

.emotion-28::-moz-focus-inner {
  border: 0;
}

.emotion-28 [role="img"] {
  box-sizing: content-box;
  color: #ad5f00;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-28 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-28 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-28 [role="img"]:only-child {
  margin: 0;
}

.emotion-31 {
  box-sizing: border-box;
  color: #de1b1b;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0.4375em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-31 *,
.emotion-31 *::before,
.emotion-31 *::after {
  box-sizing: inherit;
}

.emotion-31:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #b80d0d;
  color: #de1b1b;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-31:hover {
  background-color: #f5f7fa;
  border-color: #f55353;
  color: #de1b1b;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-31:focus:active,
.emotion-31:focus:hover {
  border-color: #c8d1e0;
}

.emotion-31:active {
  background-color: #ebeff5;
  border-color: #b80d0d;
  color: #de1b1b;
}

.emotion-31::-moz-focus-inner {
  border: 0;
}

.emotion-31 [role="img"] {
  box-sizing: content-box;
  color: #de1b1b;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-31 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-31 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-31 [role="img"]:only-child {
  margin: 0;
}

<DemoLayout>
  <Styled(div)
    marginBottom="1rem"
  >
    <div
      className="emotion-33"
    >
      <ButtonGroup
        aria-label="Align text"
        mode="radio"
      >
        <Styled(div)
          aria-label="Align text"
          mode="radio"
          role="radiogroup"
        >
          <div
            aria-label="Align text"
            className="emotion-12"
            mode="radio"
            role="radiogroup"
          >
            <WithForwardRef(Button)
              aria-checked={true}
              data-index={0}
              defaultChecked={true}
              iconStart={<IconFormatAlignLeft />}
              key="0/.0"
              onClick={[Function]}
              primary={true}
              role="radio"
              size="large"
            >
              <Button
                aria-checked={true}
                data-index={0}
                defaultChecked={true}
                forwardedRef={null}
                iconStart={<IconFormatAlignLeft />}
                onClick={[Function]}
                primary={true}
                role="radio"
                size="large"
              >
                <Styled(button)
                  aria-checked={true}
                  data-index={0}
                  defaultChecked={true}
                  onClick={[Function]}
                  primary={true}
                  role="radio"
                  size="large"
                  text="Left"
                >
                  <button
                    aria-checked={true}
                    className="emotion-3"
                    data-index={0}
                    defaultChecked={true}
                    onClick={[Function]}
                    role="radio"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-2"
                      >
                        <IconFormatAlignLeft
                          key="iconStart"
                          size="1.5em"
                        >
                          <Icon
                            rtl={false}
                            size="1.5em"
                          >
                            <Styled(svg)
                              aria-hidden={true}
                              focusable="false"
                              role="img"
                              rtl={false}
                              size="1.5em"
                              viewBox="0 0 24 24"
                            >
                              <svg
                                aria-hidden={true}
                                className="emotion-0"
                                focusable="false"
                                role="img"
                                size="1.5em"
                                viewBox="0 0 24 24"
                              >
                                <g>
                                  <path
                                    d="M15 15H3v2h12v-2zm0-8H3v2h12V7zM3 13h18v-2H3v2zm0 8h18v-2H3v2zM3 3v2h18V3H3z"
                                  />
                                </g>
                              </svg>
                            </Styled(svg)>
                          </Icon>
                        </IconFormatAlignLeft>
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-1"
                            size="large"
                          >
                            Left
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              aria-checked={false}
              data-index={1}
              iconStart={<IconFormatAlignCenter />}
              key="1/.1"
              onClick={[Function]}
              role="radio"
              size="large"
            >
              <Button
                aria-checked={false}
                data-index={1}
                forwardedRef={null}
                iconStart={<IconFormatAlignCenter />}
                onClick={[Function]}
                role="radio"
                size="large"
              >
                <Styled(button)
                  aria-checked={false}
                  data-index={1}
                  onClick={[Function]}
                  role="radio"
                  size="large"
                  text="Center"
                >
                  <button
                    aria-checked={false}
                    className="emotion-7"
                    data-index={1}
                    onClick={[Function]}
                    role="radio"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-2"
                      >
                        <IconFormatAlignCenter
                          key="iconStart"
                          size="1.5em"
                        >
                          <Icon
                            rtl={false}
                            size="1.5em"
                          >
                            <Styled(svg)
                              aria-hidden={true}
                              focusable="false"
                              role="img"
                              rtl={false}
                              size="1.5em"
                              viewBox="0 0 24 24"
                            >
                              <svg
                                aria-hidden={true}
                                className="emotion-0"
                                focusable="false"
                                role="img"
                                size="1.5em"
                                viewBox="0 0 24 24"
                              >
                                <g>
                                  <path
                                    d="M7 15v2h10v-2H7zm-4 6h18v-2H3v2zm0-8h18v-2H3v2zm4-6v2h10V7H7zM3 3v2h18V3H3z"
                                  />
                                </g>
                              </svg>
                            </Styled(svg)>
                          </Icon>
                        </IconFormatAlignCenter>
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-1"
                            size="large"
                          >
                            Center
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              aria-checked={false}
              data-index={2}
              iconStart={<IconFormatAlignRight />}
              key="2/.2"
              onClick={[Function]}
              role="radio"
              size="large"
            >
              <Button
                aria-checked={false}
                data-index={2}
                forwardedRef={null}
                iconStart={<IconFormatAlignRight />}
                onClick={[Function]}
                role="radio"
                size="large"
              >
                <Styled(button)
                  aria-checked={false}
                  data-index={2}
                  onClick={[Function]}
                  role="radio"
                  size="large"
                  text="Right"
                >
                  <button
                    aria-checked={false}
                    className="emotion-7"
                    data-index={2}
                    onClick={[Function]}
                    role="radio"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-2"
                      >
                        <IconFormatAlignRight
                          key="iconStart"
                          size="1.5em"
                        >
                          <Icon
                            rtl={false}
                            size="1.5em"
                          >
                            <Styled(svg)
                              aria-hidden={true}
                              focusable="false"
                              role="img"
                              rtl={false}
                              size="1.5em"
                              viewBox="0 0 24 24"
                            >
                              <svg
                                aria-hidden={true}
                                className="emotion-0"
                                focusable="false"
                                role="img"
                                size="1.5em"
                                viewBox="0 0 24 24"
                              >
                                <g>
                                  <path
                                    d="M3 21h18v-2H3v2zm6-4h12v-2H9v2zm-6-4h18v-2H3v2zm6-4h12V7H9v2zM3 3v2h18V3H3z"
                                  />
                                </g>
                              </svg>
                            </Styled(svg)>
                          </Icon>
                        </IconFormatAlignRight>
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-1"
                            size="large"
                          >
                            Right
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
          </div>
        </Styled(div)>
      </ButtonGroup>
      <ButtonGroup
        aria-label="Format text"
        mode="checkbox"
      >
        <Styled(div)
          aria-label="Format text"
          mode="checkbox"
          role="group"
        >
          <div
            aria-label="Format text"
            className="emotion-12"
            mode="checkbox"
            role="group"
          >
            <WithForwardRef(Button)
              aria-checked={false}
              aria-label="Bold"
              data-index={0}
              iconEnd={<IconFormatBold />}
              key="0/.0"
              onClick={[Function]}
              role="checkbox"
              size="large"
            >
              <Button
                aria-checked={false}
                aria-label="Bold"
                data-index={0}
                forwardedRef={null}
                iconEnd={<IconFormatBold />}
                onClick={[Function]}
                role="checkbox"
                size="large"
              >
                <Styled(button)
                  aria-checked={false}
                  aria-label="Bold"
                  data-index={0}
                  onClick={[Function]}
                  role="checkbox"
                  size="large"
                >
                  <button
                    aria-checked={false}
                    aria-label="Bold"
                    className="emotion-15"
                    data-index={0}
                    onClick={[Function]}
                    role="checkbox"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-2"
                      >
                        <IconFormatBold
                          key="iconEnd"
                          size="1.5em"
                        >
                          <Icon
                            rtl={false}
                            size="1.5em"
                          >
                            <Styled(svg)
                              aria-hidden={true}
                              focusable="false"
                              role="img"
                              rtl={false}
                              size="1.5em"
                              viewBox="0 0 24 24"
                            >
                              <svg
                                aria-hidden={true}
                                className="emotion-0"
                                focusable="false"
                                role="img"
                                size="1.5em"
                                viewBox="0 0 24 24"
                              >
                                <g>
                                  <path
                                    d="M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z"
                                  />
                                </g>
                              </svg>
                            </Styled(svg)>
                          </Icon>
                        </IconFormatBold>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              aria-checked={false}
              aria-label="Italic"
              data-index={1}
              iconEnd={<IconFormatItalic />}
              key="1/.1"
              onClick={[Function]}
              role="checkbox"
              size="large"
            >
              <Button
                aria-checked={false}
                aria-label="Italic"
                data-index={1}
                forwardedRef={null}
                iconEnd={<IconFormatItalic />}
                onClick={[Function]}
                role="checkbox"
                size="large"
              >
                <Styled(button)
                  aria-checked={false}
                  aria-label="Italic"
                  data-index={1}
                  onClick={[Function]}
                  role="checkbox"
                  size="large"
                >
                  <button
                    aria-checked={false}
                    aria-label="Italic"
                    className="emotion-15"
                    data-index={1}
                    onClick={[Function]}
                    role="checkbox"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-2"
                      >
                        <IconFormatItalic
                          key="iconEnd"
                          size="1.5em"
                        >
                          <Icon
                            rtl={false}
                            size="1.5em"
                          >
                            <Styled(svg)
                              aria-hidden={true}
                              focusable="false"
                              role="img"
                              rtl={false}
                              size="1.5em"
                              viewBox="0 0 24 24"
                            >
                              <svg
                                aria-hidden={true}
                                className="emotion-0"
                                focusable="false"
                                role="img"
                                size="1.5em"
                                viewBox="0 0 24 24"
                              >
                                <g>
                                  <path
                                    d="M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4z"
                                  />
                                </g>
                              </svg>
                            </Styled(svg)>
                          </Icon>
                        </IconFormatItalic>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              aria-checked={false}
              aria-label="Underlined"
              data-index={2}
              iconEnd={<IconFormatUnderlined />}
              key="2/.2"
              onClick={[Function]}
              role="checkbox"
              size="large"
            >
              <Button
                aria-checked={false}
                aria-label="Underlined"
                data-index={2}
                forwardedRef={null}
                iconEnd={<IconFormatUnderlined />}
                onClick={[Function]}
                role="checkbox"
                size="large"
              >
                <Styled(button)
                  aria-checked={false}
                  aria-label="Underlined"
                  data-index={2}
                  onClick={[Function]}
                  role="checkbox"
                  size="large"
                >
                  <button
                    aria-checked={false}
                    aria-label="Underlined"
                    className="emotion-15"
                    data-index={2}
                    onClick={[Function]}
                    role="checkbox"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-2"
                      >
                        <IconFormatUnderlined
                          key="iconEnd"
                          size="1.5em"
                        >
                          <Icon
                            rtl={false}
                            size="1.5em"
                          >
                            <Styled(svg)
                              aria-hidden={true}
                              focusable="false"
                              role="img"
                              rtl={false}
                              size="1.5em"
                              viewBox="0 0 24 24"
                            >
                              <svg
                                aria-hidden={true}
                                className="emotion-0"
                                focusable="false"
                                role="img"
                                size="1.5em"
                                viewBox="0 0 24 24"
                              >
                                <g>
                                  <path
                                    d="M12 17c3.31 0 6-2.69 6-6V3h-2.5v8c0 1.93-1.57 3.5-3.5 3.5S8.5 12.93 8.5 11V3H6v8c0 3.31 2.69 6 6 6zm-7 2v2h14v-2H5z"
                                  />
                                </g>
                              </svg>
                            </Styled(svg)>
                          </Icon>
                        </IconFormatUnderlined>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
          </div>
        </Styled(div)>
      </ButtonGroup>
      <ButtonGroup
        aria-label="Sentiments"
        mode="radio"
      >
        <Styled(div)
          aria-label="Sentiments"
          mode="radio"
          role="radiogroup"
        >
          <div
            aria-label="Sentiments"
            className="emotion-12"
            mode="radio"
            role="radiogroup"
          >
            <WithForwardRef(Button)
              aria-checked={false}
              aria-label="Satisfied"
              data-index={0}
              data-variant="success"
              iconEnd={<IconSentimentSatisfied />}
              key="0/.0"
              onClick={[Function]}
              role="radio"
              size="large"
              variant="success"
            >
              <Button
                aria-checked={false}
                aria-label="Satisfied"
                data-index={0}
                data-variant="success"
                forwardedRef={null}
                iconEnd={<IconSentimentSatisfied />}
                onClick={[Function]}
                role="radio"
                size="large"
                variant="success"
              >
                <Styled(button)
                  aria-checked={false}
                  aria-label="Satisfied"
                  data-index={0}
                  data-variant="success"
                  onClick={[Function]}
                  role="radio"
                  size="large"
                  variant="success"
                >
                  <button
                    aria-checked={false}
                    aria-label="Satisfied"
                    className="emotion-25"
                    data-index={0}
                    data-variant="success"
                    onClick={[Function]}
                    role="radio"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-2"
                      >
                        <IconSentimentSatisfied
                          key="iconEnd"
                          size="1.5em"
                        >
                          <Icon
                            rtl={false}
                            size="1.5em"
                          >
                            <Styled(svg)
                              aria-hidden={true}
                              focusable="false"
                              role="img"
                              rtl={false}
                              size="1.5em"
                              viewBox="0 0 24 24"
                            >
                              <svg
                                aria-hidden={true}
                                className="emotion-0"
                                focusable="false"
                                role="img"
                                size="1.5em"
                                viewBox="0 0 24 24"
                              >
                                <g>
                                  <circle
                                    cx="15.5"
                                    cy="9.5"
                                    r="1.5"
                                  />
                                  <circle
                                    cx="8.5"
                                    cy="9.5"
                                    r="1.5"
                                  />
                                  <path
                                    d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm0-4c-1.48 0-2.75-.81-3.45-2H6.88a5.495 5.495 0 0 0 10.24 0h-1.67c-.7 1.19-1.97 2-3.45 2z"
                                  />
                                </g>
                              </svg>
                            </Styled(svg)>
                          </Icon>
                        </IconSentimentSatisfied>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              aria-checked={false}
              aria-label="Neutral"
              data-index={1}
              data-variant="warning"
              iconEnd={<IconSentimentNeutral />}
              key="1/.1"
              onClick={[Function]}
              role="radio"
              size="large"
              variant="warning"
            >
              <Button
                aria-checked={false}
                aria-label="Neutral"
                data-index={1}
                data-variant="warning"
                forwardedRef={null}
                iconEnd={<IconSentimentNeutral />}
                onClick={[Function]}
                role="radio"
                size="large"
                variant="warning"
              >
                <Styled(button)
                  aria-checked={false}
                  aria-label="Neutral"
                  data-index={1}
                  data-variant="warning"
                  onClick={[Function]}
                  role="radio"
                  size="large"
                  variant="warning"
                >
                  <button
                    aria-checked={false}
                    aria-label="Neutral"
                    className="emotion-28"
                    data-index={1}
                    data-variant="warning"
                    onClick={[Function]}
                    role="radio"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-2"
                      >
                        <IconSentimentNeutral
                          key="iconEnd"
                          size="1.5em"
                        >
                          <Icon
                            rtl={false}
                            size="1.5em"
                          >
                            <Styled(svg)
                              aria-hidden={true}
                              focusable="false"
                              role="img"
                              rtl={false}
                              size="1.5em"
                              viewBox="0 0 24 24"
                            >
                              <svg
                                aria-hidden={true}
                                className="emotion-0"
                                focusable="false"
                                role="img"
                                size="1.5em"
                                viewBox="0 0 24 24"
                              >
                                <g>
                                  <path
                                    d="M9 14h6v1.5H9z"
                                  />
                                  <circle
                                    cx="15.5"
                                    cy="9.5"
                                    r="1.5"
                                  />
                                  <circle
                                    cx="8.5"
                                    cy="9.5"
                                    r="1.5"
                                  />
                                  <path
                                    d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
                                  />
                                </g>
                              </svg>
                            </Styled(svg)>
                          </Icon>
                        </IconSentimentNeutral>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              aria-checked={false}
              aria-label="Unsatisfied"
              data-index={2}
              data-variant="danger"
              iconEnd={<IconSentimentDissatisfied />}
              key="2/.2"
              onClick={[Function]}
              role="radio"
              size="large"
              variant="danger"
            >
              <Button
                aria-checked={false}
                aria-label="Unsatisfied"
                data-index={2}
                data-variant="danger"
                forwardedRef={null}
                iconEnd={<IconSentimentDissatisfied />}
                onClick={[Function]}
                role="radio"
                size="large"
                variant="danger"
              >
                <Styled(button)
                  aria-checked={false}
                  aria-label="Unsatisfied"
                  data-index={2}
                  data-variant="danger"
                  onClick={[Function]}
                  role="radio"
                  size="large"
                  variant="danger"
                >
                  <button
                    aria-checked={false}
                    aria-label="Unsatisfied"
                    className="emotion-31"
                    data-index={2}
                    data-variant="danger"
                    onClick={[Function]}
                    role="radio"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-2"
                      >
                        <IconSentimentDissatisfied
                          key="iconEnd"
                          size="1.5em"
                        >
                          <Icon
                            rtl={false}
                            size="1.5em"
                          >
                            <Styled(svg)
                              aria-hidden={true}
                              focusable="false"
                              role="img"
                              rtl={false}
                              size="1.5em"
                              viewBox="0 0 24 24"
                            >
                              <svg
                                aria-hidden={true}
                                className="emotion-0"
                                focusable="false"
                                role="img"
                                size="1.5em"
                                viewBox="0 0 24 24"
                              >
                                <g>
                                  <circle
                                    cx="15.5"
                                    cy="9.5"
                                    r="1.5"
                                  />
                                  <circle
                                    cx="8.5"
                                    cy="9.5"
                                    r="1.5"
                                  />
                                  <path
                                    d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm0-6c-2.33 0-4.32 1.45-5.12 3.5h1.67c.69-1.19 1.97-2 3.45-2s2.75.81 3.45 2h1.67c-.8-2.05-2.79-3.5-5.12-3.5z"
                                  />
                                </g>
                              </svg>
                            </Styled(svg)>
                          </Icon>
                        </IconSentimentDissatisfied>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
          </div>
        </Styled(div)>
      </ButtonGroup>
    </div>
  </Styled(div)>
</DemoLayout>
`;

exports[`ButtonGroup demo examples Snapshots: mode 1`] = `
.emotion-9 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-9 *,
.emotion-9 *::before,
.emotion-9 *::after {
  box-sizing: inherit;
}

.emotion-9 button:focus,
.emotion-9 button:active {
  position: relative;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled]) {
  border-color: #5691f0;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #f55353;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #3ba164;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #cf7911;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled]) {
  border-color: #1d5bbf;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #b80d0d;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #20693d;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #8a4d03;
}

.emotion-9 button[disabled] {
  border: solid 1px #c8d1e0;
}

.emotion-9 button[disabled][aria-checked=true] {
  background-color: #c8d1e0;
  color: #8e99ab;
}

.emotion-9 button[disabled][aria-checked=true]:hover {
  color: #8e99ab;
}

.emotion-9 > button:not(:first-child),
.emotion-9 > *:not(:first-child) button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

.emotion-9 > button:not(:last-child),
.emotion-9 > *:not(:last-child) button {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  border-right-color: transparent;
}

.emotion-9 > [aria-checked=false]:focus,
.emotion-9 > button:not([aria-checked]):focus,
.emotion-9 > *:not([aria-checked]) button:focus,
.emotion-9 > [aria-checked=false] button:focus,
.emotion-9 > button:not([aria-checked]) button:focus,
.emotion-9 > *:not([aria-checked]) button button:focus {
  border-left-color: #c8d1e0;
  border-right-color: #c8d1e0;
}

.emotion-9 > [aria-checked=false] + [aria-checked=false]:not(:focus) {
  border-left-color: #c8d1e0;
}

.emotion-9 > [aria-checked=false]:not([disabled]):hover + [aria-checked=false]:not(:focus),
.emotion-9 > *:not([aria-checked]):not([disabled]):hover + button:not([aria-checked]):not(:focus),
.emotion-9 > *:not([aria-checked]):not([disabled]):hover + *:not([aria-checked]) button:not(:focus) {
  border-left-color: transparent;
}

.emotion-9 > [aria-checked=true] + [aria-checked=false]:not(:focus) {
  border-left-color: transparent;
}

.emotion-9 > [aria-checked=true] + [aria-checked=true]:not(:focus) {
  border-left-color: currentcolor;
}

.emotion-5 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-5 *,
.emotion-5 *::before,
.emotion-5 *::after {
  box-sizing: inherit;
}

.emotion-5:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-5:hover {
  background-color: #f5f7fa;
  border-color: #5691f0;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-5:focus:active,
.emotion-5:focus:hover {
  border-color: #c8d1e0;
}

.emotion-5:active {
  background-color: #ebeff5;
  border-color: #1d5bbf;
  color: #3272d9;
}

.emotion-5::-moz-focus-inner {
  border: 0;
}

.emotion-5 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-5 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-5 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-5 [role="img"]:only-child {
  margin: 0;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  max-height: 100%;
  pointer-events: none;
  width: 100%;
}

.emotion-0 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.875em;
  line-height: 2.857142857142857em;
}

.emotion-0:first-child {
  padding-left: 0.5714285714285714em;
}

.emotion-0:last-child {
  padding-right: 0.5714285714285714em;
}

.emotion-20[class] > *:not(:last-child) {
  margin-bottom: 1rem;
}

.emotion-2 {
  box-sizing: border-box;
  color: #ffffff;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #3272d9;
  border-color: transparent;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-2 *,
.emotion-2 *::before,
.emotion-2 *::after {
  box-sizing: inherit;
}

.emotion-2:focus {
  background-color: #3272d9;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:hover {
  background-color: #5691f0;
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:focus:active,
.emotion-2:focus:hover {
  border-color: transparent;
}

.emotion-2:active {
  background-color: #1d5bbf;
  border-color: #1d5bbf;
  color: #ffffff;
}

.emotion-2::-moz-focus-inner {
  border: 0;
}

.emotion-2 [role="img"] {
  box-sizing: content-box;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-2 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-2 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-2 [role="img"]:only-child {
  margin: 0;
}

<DemoLayout>
  <Styled(div)
    marginBottom="1rem"
  >
    <div
      className="emotion-20"
    >
      <ButtonGroup
        aria-label="Align text"
        defaultChecked={0}
        mode="radio"
      >
        <Styled(div)
          aria-label="Align text"
          defaultChecked={0}
          mode="radio"
          role="radiogroup"
        >
          <div
            aria-label="Align text"
            className="emotion-9"
            defaultChecked={0}
            mode="radio"
            role="radiogroup"
          >
            <WithForwardRef(Button)
              aria-checked={true}
              data-index={0}
              key="0/.0"
              onClick={[Function]}
              primary={true}
              role="radio"
              size="large"
            >
              <Button
                aria-checked={true}
                data-index={0}
                forwardedRef={null}
                onClick={[Function]}
                primary={true}
                role="radio"
                size="large"
              >
                <Styled(button)
                  aria-checked={true}
                  data-index={0}
                  onClick={[Function]}
                  primary={true}
                  role="radio"
                  size="large"
                  text="Left"
                >
                  <button
                    aria-checked={true}
                    className="emotion-2"
                    data-index={0}
                    onClick={[Function]}
                    role="radio"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Left
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              aria-checked={false}
              data-index={1}
              key="1/.1"
              onClick={[Function]}
              role="radio"
              size="large"
            >
              <Button
                aria-checked={false}
                data-index={1}
                forwardedRef={null}
                onClick={[Function]}
                role="radio"
                size="large"
              >
                <Styled(button)
                  aria-checked={false}
                  data-index={1}
                  onClick={[Function]}
                  role="radio"
                  size="large"
                  text="Center"
                >
                  <button
                    aria-checked={false}
                    className="emotion-5"
                    data-index={1}
                    onClick={[Function]}
                    role="radio"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Center
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              aria-checked={false}
              data-index={2}
              key="2/.2"
              onClick={[Function]}
              role="radio"
              size="large"
            >
              <Button
                aria-checked={false}
                data-index={2}
                forwardedRef={null}
                onClick={[Function]}
                role="radio"
                size="large"
              >
                <Styled(button)
                  aria-checked={false}
                  data-index={2}
                  onClick={[Function]}
                  role="radio"
                  size="large"
                  text="Right"
                >
                  <button
                    aria-checked={false}
                    className="emotion-5"
                    data-index={2}
                    onClick={[Function]}
                    role="radio"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Right
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
          </div>
        </Styled(div)>
      </ButtonGroup>
      <ButtonGroup
        aria-label="Text Decoration"
        defaultChecked={
          Array [
            0,
            1,
          ]
        }
        mode="checkbox"
      >
        <Styled(div)
          aria-label="Text Decoration"
          defaultChecked={
            Array [
              0,
              1,
            ]
          }
          mode="checkbox"
          role="group"
        >
          <div
            aria-label="Text Decoration"
            className="emotion-9"
            defaultChecked={
              Array [
                0,
                1,
              ]
            }
            mode="checkbox"
            role="group"
          >
            <WithForwardRef(Button)
              aria-checked={true}
              data-index={0}
              key="0/.0"
              onClick={[Function]}
              primary={true}
              role="checkbox"
              size="large"
            >
              <Button
                aria-checked={true}
                data-index={0}
                forwardedRef={null}
                onClick={[Function]}
                primary={true}
                role="checkbox"
                size="large"
              >
                <Styled(button)
                  aria-checked={true}
                  data-index={0}
                  onClick={[Function]}
                  primary={true}
                  role="checkbox"
                  size="large"
                  text="Bold"
                >
                  <button
                    aria-checked={true}
                    className="emotion-2"
                    data-index={0}
                    onClick={[Function]}
                    role="checkbox"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Bold
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              aria-checked={true}
              data-index={1}
              key="1/.1"
              onClick={[Function]}
              primary={true}
              role="checkbox"
              size="large"
            >
              <Button
                aria-checked={true}
                data-index={1}
                forwardedRef={null}
                onClick={[Function]}
                primary={true}
                role="checkbox"
                size="large"
              >
                <Styled(button)
                  aria-checked={true}
                  data-index={1}
                  onClick={[Function]}
                  primary={true}
                  role="checkbox"
                  size="large"
                  text="Italic"
                >
                  <button
                    aria-checked={true}
                    className="emotion-2"
                    data-index={1}
                    onClick={[Function]}
                    role="checkbox"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Italic
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              aria-checked={false}
              data-index={2}
              key="2/.2"
              onClick={[Function]}
              role="checkbox"
              size="large"
            >
              <Button
                aria-checked={false}
                data-index={2}
                forwardedRef={null}
                onClick={[Function]}
                role="checkbox"
                size="large"
              >
                <Styled(button)
                  aria-checked={false}
                  data-index={2}
                  onClick={[Function]}
                  role="checkbox"
                  size="large"
                  text="Underline"
                >
                  <button
                    aria-checked={false}
                    className="emotion-5"
                    data-index={2}
                    onClick={[Function]}
                    role="checkbox"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Underline
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
          </div>
        </Styled(div)>
      </ButtonGroup>
    </div>
  </Styled(div)>
</DemoLayout>
`;

exports[`ButtonGroup demo examples Snapshots: rtl 1`] = `
.emotion-2 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  max-height: 100%;
  pointer-events: none;
  width: 100%;
}

.emotion-1 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
}

.emotion-12 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-12 *,
.emotion-12 *::before,
.emotion-12 *::after {
  box-sizing: inherit;
}

.emotion-12 button:focus,
.emotion-12 button:active {
  position: relative;
}

.emotion-12 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled]) {
  border-color: #5691f0;
}

.emotion-12 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #f55353;
}

.emotion-12 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #3ba164;
}

.emotion-12 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #cf7911;
}

.emotion-12 button:active:not(:focus):not([aria-checked=true]):not([disabled]) {
  border-color: #1d5bbf;
}

.emotion-12 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #b80d0d;
}

.emotion-12 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #20693d;
}

.emotion-12 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #8a4d03;
}

.emotion-12 button[disabled] {
  border: solid 1px #c8d1e0;
}

.emotion-12 button[disabled][aria-checked=true] {
  background-color: #c8d1e0;
  color: #8e99ab;
}

.emotion-12 button[disabled][aria-checked=true]:hover {
  color: #8e99ab;
}

.emotion-12 > button:not(:first-child),
.emotion-12 > *:not(:first-child) button {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}

.emotion-12 > button:not(:last-child),
.emotion-12 > *:not(:last-child) button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
  border-left-color: transparent;
}

.emotion-12 > [aria-checked=false]:focus,
.emotion-12 > button:not([aria-checked]):focus,
.emotion-12 > *:not([aria-checked]) button:focus,
.emotion-12 > [aria-checked=false] button:focus,
.emotion-12 > button:not([aria-checked]) button:focus,
.emotion-12 > *:not([aria-checked]) button button:focus {
  border-left-color: #c8d1e0;
  border-right-color: #c8d1e0;
}

.emotion-12 > [aria-checked=false] + [aria-checked=false]:not(:focus) {
  border-right-color: #c8d1e0;
}

.emotion-12 > [aria-checked=false]:not([disabled]):hover + [aria-checked=false]:not(:focus),
.emotion-12 > *:not([aria-checked]):not([disabled]):hover + button:not([aria-checked]):not(:focus),
.emotion-12 > *:not([aria-checked]):not([disabled]):hover + *:not([aria-checked]) button:not(:focus) {
  border-right-color: transparent;
}

.emotion-12 > [aria-checked=true] + [aria-checked=false]:not(:focus) {
  border-right-color: transparent;
}

.emotion-12 > [aria-checked=true] + [aria-checked=true]:not(:focus) {
  border-right-color: currentcolor;
}

.emotion-3 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-3 *,
.emotion-3 *::before,
.emotion-3 *::after {
  box-sizing: inherit;
}

.emotion-3:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-3:hover {
  background-color: #f5f7fa;
  border-color: #5691f0;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-3:focus:active,
.emotion-3:focus:hover {
  border-color: #c8d1e0;
}

.emotion-3:active {
  background-color: #ebeff5;
  border-color: #1d5bbf;
  color: #3272d9;
}

.emotion-3::-moz-focus-inner {
  border: 0;
}

.emotion-3 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-3 [role="img"]:first-child {
  margin-left: 0.5em;
}

.emotion-3 [role="img"]:last-child {
  margin-right: 0.5em;
}

.emotion-3 [role="img"]:only-child {
  margin: 0;
}

.emotion-0 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.875em;
  line-height: 2.857142857142857em;
}

.emotion-0:first-child {
  padding-right: 0.5714285714285714em;
}

.emotion-0:last-child {
  padding-left: 0.5714285714285714em;
}

<div
  dir="rtl"
>
  <ThemeProvider>
    <ThemeProvider>
      <ButtonGroup
        aria-label="Format text"
        mode="checkbox"
      >
        <Styled(div)
          aria-label="Format text"
          mode="checkbox"
          role="group"
        >
          <div
            aria-label="Format text"
            className="emotion-12"
            mode="checkbox"
            role="group"
          >
            <WithForwardRef(Button)
              aria-checked={false}
              data-index={0}
              iconEnd={<IconFormatBold />}
              key="0/.0"
              onClick={[Function]}
              role="checkbox"
              size="large"
            >
              <Button
                aria-checked={false}
                data-index={0}
                forwardedRef={null}
                iconEnd={<IconFormatBold />}
                onClick={[Function]}
                role="checkbox"
                size="large"
              >
                <Styled(button)
                  aria-checked={false}
                  data-index={0}
                  onClick={[Function]}
                  role="checkbox"
                  size="large"
                  text="بالخط العريض"
                >
                  <button
                    aria-checked={false}
                    className="emotion-3"
                    data-index={0}
                    onClick={[Function]}
                    role="checkbox"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-2"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            بالخط العريض
                          </span>
                        </Styled(span)>
                        <IconFormatBold
                          key="iconEnd"
                          size="1.5em"
                        >
                          <Icon
                            rtl={false}
                            size="1.5em"
                          >
                            <Styled(svg)
                              aria-hidden={true}
                              focusable="false"
                              role="img"
                              rtl={false}
                              size="1.5em"
                              viewBox="0 0 24 24"
                            >
                              <svg
                                aria-hidden={true}
                                className="emotion-1"
                                focusable="false"
                                role="img"
                                size="1.5em"
                                viewBox="0 0 24 24"
                              >
                                <g>
                                  <path
                                    d="M15.6 10.79c.97-.67 1.65-1.77 1.65-2.79 0-2.26-1.75-4-4-4H7v14h7.04c2.09 0 3.71-1.7 3.71-3.79 0-1.52-.86-2.82-2.15-3.42zM10 6.5h3c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5h-3v-3zm3.5 9H10v-3h3.5c.83 0 1.5.67 1.5 1.5s-.67 1.5-1.5 1.5z"
                                  />
                                </g>
                              </svg>
                            </Styled(svg)>
                          </Icon>
                        </IconFormatBold>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              aria-checked={false}
              data-index={1}
              iconEnd={<IconFormatItalic />}
              key="1/.1"
              onClick={[Function]}
              role="checkbox"
              size="large"
            >
              <Button
                aria-checked={false}
                data-index={1}
                forwardedRef={null}
                iconEnd={<IconFormatItalic />}
                onClick={[Function]}
                role="checkbox"
                size="large"
              >
                <Styled(button)
                  aria-checked={false}
                  data-index={1}
                  onClick={[Function]}
                  role="checkbox"
                  size="large"
                  text="مائل"
                >
                  <button
                    aria-checked={false}
                    className="emotion-3"
                    data-index={1}
                    onClick={[Function]}
                    role="checkbox"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-2"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            مائل
                          </span>
                        </Styled(span)>
                        <IconFormatItalic
                          key="iconEnd"
                          size="1.5em"
                        >
                          <Icon
                            rtl={false}
                            size="1.5em"
                          >
                            <Styled(svg)
                              aria-hidden={true}
                              focusable="false"
                              role="img"
                              rtl={false}
                              size="1.5em"
                              viewBox="0 0 24 24"
                            >
                              <svg
                                aria-hidden={true}
                                className="emotion-1"
                                focusable="false"
                                role="img"
                                size="1.5em"
                                viewBox="0 0 24 24"
                              >
                                <g>
                                  <path
                                    d="M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4z"
                                  />
                                </g>
                              </svg>
                            </Styled(svg)>
                          </Icon>
                        </IconFormatItalic>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              aria-checked={false}
              data-index={2}
              iconEnd={<IconFormatUnderlined />}
              key="2/.2"
              onClick={[Function]}
              role="checkbox"
              size="large"
            >
              <Button
                aria-checked={false}
                data-index={2}
                forwardedRef={null}
                iconEnd={<IconFormatUnderlined />}
                onClick={[Function]}
                role="checkbox"
                size="large"
              >
                <Styled(button)
                  aria-checked={false}
                  data-index={2}
                  onClick={[Function]}
                  role="checkbox"
                  size="large"
                  text="أكد"
                >
                  <button
                    aria-checked={false}
                    className="emotion-3"
                    data-index={2}
                    onClick={[Function]}
                    role="checkbox"
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-2"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            أكد
                          </span>
                        </Styled(span)>
                        <IconFormatUnderlined
                          key="iconEnd"
                          size="1.5em"
                        >
                          <Icon
                            rtl={false}
                            size="1.5em"
                          >
                            <Styled(svg)
                              aria-hidden={true}
                              focusable="false"
                              role="img"
                              rtl={false}
                              size="1.5em"
                              viewBox="0 0 24 24"
                            >
                              <svg
                                aria-hidden={true}
                                className="emotion-1"
                                focusable="false"
                                role="img"
                                size="1.5em"
                                viewBox="0 0 24 24"
                              >
                                <g>
                                  <path
                                    d="M12 17c3.31 0 6-2.69 6-6V3h-2.5v8c0 1.93-1.57 3.5-3.5 3.5S8.5 12.93 8.5 11V3H6v8c0 3.31 2.69 6 6 6zm-7 2v2h14v-2H5z"
                                  />
                                </g>
                              </svg>
                            </Styled(svg)>
                          </Icon>
                        </IconFormatUnderlined>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
          </div>
        </Styled(div)>
      </ButtonGroup>
    </ThemeProvider>
  </ThemeProvider>
</div>
`;

exports[`ButtonGroup demo examples Snapshots: sizes 1`] = `
.emotion-9 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-9 *,
.emotion-9 *::before,
.emotion-9 *::after {
  box-sizing: inherit;
}

.emotion-9 button:focus,
.emotion-9 button:active {
  position: relative;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled]) {
  border-color: #5691f0;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #f55353;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #3ba164;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #cf7911;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled]) {
  border-color: #1d5bbf;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #b80d0d;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #20693d;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #8a4d03;
}

.emotion-9 button[disabled] {
  border: solid 1px #c8d1e0;
}

.emotion-9 button[disabled][aria-checked=true] {
  background-color: #c8d1e0;
  color: #8e99ab;
}

.emotion-9 button[disabled][aria-checked=true]:hover {
  color: #8e99ab;
}

.emotion-9 > button:not(:first-child),
.emotion-9 > *:not(:first-child) button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

.emotion-9 > button:not(:last-child),
.emotion-9 > *:not(:last-child) button {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  border-right-color: transparent;
}

.emotion-9 > [aria-checked=false]:focus,
.emotion-9 > button:not([aria-checked]):focus,
.emotion-9 > *:not([aria-checked]) button:focus,
.emotion-9 > [aria-checked=false] button:focus,
.emotion-9 > button:not([aria-checked]) button:focus,
.emotion-9 > *:not([aria-checked]) button button:focus {
  border-left-color: #c8d1e0;
  border-right-color: #c8d1e0;
}

.emotion-9 > [aria-checked=false] + [aria-checked=false]:not(:focus) {
  border-left-color: #c8d1e0;
}

.emotion-9 > [aria-checked=false]:not([disabled]):hover + [aria-checked=false]:not(:focus),
.emotion-9 > *:not([aria-checked]):not([disabled]):hover + button:not([aria-checked]):not(:focus),
.emotion-9 > *:not([aria-checked]):not([disabled]):hover + *:not([aria-checked]) button:not(:focus) {
  border-left-color: transparent;
}

.emotion-9 > [aria-checked=true] + [aria-checked=false]:not(:focus) {
  border-left-color: transparent;
}

.emotion-9 > [aria-checked=true] + [aria-checked=true]:not(:focus) {
  border-left-color: currentcolor;
}

.emotion-22 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-22 *,
.emotion-22 *::before,
.emotion-22 *::after {
  box-sizing: inherit;
}

.emotion-22:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-22:hover {
  background-color: #f5f7fa;
  border-color: #5691f0;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-22:focus:active,
.emotion-22:focus:hover {
  border-color: #c8d1e0;
}

.emotion-22:active {
  background-color: #ebeff5;
  border-color: #1d5bbf;
  color: #3272d9;
}

.emotion-22::-moz-focus-inner {
  border: 0;
}

.emotion-22 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-22 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-22 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-22 [role="img"]:only-child {
  margin: 0;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  max-height: 100%;
  pointer-events: none;
  width: 100%;
}

.emotion-20 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.875em;
  line-height: 2.857142857142857em;
}

.emotion-20:first-child {
  padding-left: 0.5714285714285714em;
}

.emotion-20:last-child {
  padding-right: 0.5714285714285714em;
}

.emotion-50[class] > *:not(:last-child) {
  margin-bottom: 1rem;
}

.emotion-0 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.75em;
  line-height: 2em;
}

.emotion-2 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 1.5em;
  margin: 0;
  min-width: 1.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-2 *,
.emotion-2 *::before,
.emotion-2 *::after {
  box-sizing: inherit;
}

.emotion-2:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:hover {
  background-color: #f5f7fa;
  border-color: #5691f0;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:focus:active,
.emotion-2:focus:hover {
  border-color: #c8d1e0;
}

.emotion-2:active {
  background-color: #ebeff5;
  border-color: #1d5bbf;
  color: #3272d9;
}

.emotion-2::-moz-focus-inner {
  border: 0;
}

.emotion-2 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-2 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-2 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-2 [role="img"]:only-child {
  margin: 0;
}

.emotion-12 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2em;
  margin: 0;
  min-width: 2em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-12 *,
.emotion-12 *::before,
.emotion-12 *::after {
  box-sizing: inherit;
}

.emotion-12:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-12:hover {
  background-color: #f5f7fa;
  border-color: #5691f0;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-12:focus:active,
.emotion-12:focus:hover {
  border-color: #c8d1e0;
}

.emotion-12:active {
  background-color: #ebeff5;
  border-color: #1d5bbf;
  color: #3272d9;
}

.emotion-12::-moz-focus-inner {
  border: 0;
}

.emotion-12 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-12 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-12 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-12 [role="img"]:only-child {
  margin: 0;
}

.emotion-10 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.875em;
  line-height: 2.2857142857142856em;
}

.emotion-32 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 3.25em;
  margin: 0;
  min-width: 3.25em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-32 *,
.emotion-32 *::before,
.emotion-32 *::after {
  box-sizing: inherit;
}

.emotion-32:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-32:hover {
  background-color: #f5f7fa;
  border-color: #5691f0;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-32:focus:active,
.emotion-32:focus:hover {
  border-color: #c8d1e0;
}

.emotion-32:active {
  background-color: #ebeff5;
  border-color: #1d5bbf;
  color: #3272d9;
}

.emotion-32::-moz-focus-inner {
  border: 0;
}

.emotion-32 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-32 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-32 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-32 [role="img"]:only-child {
  margin: 0;
}

.emotion-30 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.875em;
  line-height: 3.7142857142857144em;
}

.emotion-30:first-child {
  padding-left: 0.5714285714285714em;
}

.emotion-30:last-child {
  padding-right: 0.5714285714285714em;
}

.emotion-49 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-49 *,
.emotion-49 *::before,
.emotion-49 *::after {
  box-sizing: inherit;
}

.emotion-49 button {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
}

.emotion-49 button:focus,
.emotion-49 button:active {
  position: relative;
}

.emotion-49 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled]) {
  border-color: #5691f0;
}

.emotion-49 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #f55353;
}

.emotion-49 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #3ba164;
}

.emotion-49 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #cf7911;
}

.emotion-49 button:active:not(:focus):not([aria-checked=true]):not([disabled]) {
  border-color: #1d5bbf;
}

.emotion-49 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #b80d0d;
}

.emotion-49 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #20693d;
}

.emotion-49 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #8a4d03;
}

.emotion-49 button[disabled] {
  border: solid 1px #c8d1e0;
}

.emotion-49 button[disabled][aria-checked=true] {
  background-color: #c8d1e0;
  color: #8e99ab;
}

.emotion-49 button[disabled][aria-checked=true]:hover {
  color: #8e99ab;
}

.emotion-49 > button:not(:first-child),
.emotion-49 > *:not(:first-child) button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

.emotion-49 > button:not(:last-child),
.emotion-49 > *:not(:last-child) button {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  border-right-color: transparent;
}

.emotion-49 > [aria-checked=false]:focus,
.emotion-49 > button:not([aria-checked]):focus,
.emotion-49 > *:not([aria-checked]) button:focus,
.emotion-49 > [aria-checked=false] button:focus,
.emotion-49 > button:not([aria-checked]) button:focus,
.emotion-49 > *:not([aria-checked]) button button:focus {
  border-left-color: #c8d1e0;
  border-right-color: #c8d1e0;
}

.emotion-49 > [aria-checked=false] + [aria-checked=false]:not(:focus) {
  border-left-color: #c8d1e0;
}

.emotion-49 > [aria-checked=false]:not([disabled]):hover + [aria-checked=false]:not(:focus),
.emotion-49 > *:not([aria-checked]):not([disabled]):hover + button:not([aria-checked]):not(:focus),
.emotion-49 > *:not([aria-checked]):not([disabled]):hover + *:not([aria-checked]) button:not(:focus) {
  border-left-color: transparent;
}

.emotion-49 > [aria-checked=true] + [aria-checked=false]:not(:focus) {
  border-left-color: transparent;
}

.emotion-49 > [aria-checked=true] + [aria-checked=true]:not(:focus) {
  border-left-color: currentcolor;
}

<Component>
  <DemoLayout>
    <Styled(div)
      marginBottom="1rem"
    >
      <div
        className="emotion-50"
      >
        <ButtonGroup
          aria-label="Edit text"
          key="small"
          size="small"
        >
          <Styled(div)
            aria-label="Edit text"
            role="group"
          >
            <div
              aria-label="Edit text"
              className="emotion-9"
              role="group"
            >
              <WithForwardRef(Button)
                data-index={0}
                key="0/.0"
                onClick={[Function]}
                size="small"
              >
                <Button
                  data-index={0}
                  forwardedRef={null}
                  onClick={[Function]}
                  size="small"
                >
                  <Styled(button)
                    data-index={0}
                    onClick={[Function]}
                    size="small"
                    text="Cut"
                  >
                    <button
                      className="emotion-2"
                      data-index={0}
                      onClick={[Function]}
                      size="small"
                    >
                      <Styled(span)>
                        <span
                          className="emotion-1"
                        >
                          <Styled(span)
                            size="small"
                          >
                            <span
                              className="emotion-0"
                              size="small"
                            >
                              Cut
                            </span>
                          </Styled(span)>
                        </span>
                      </Styled(span)>
                    </button>
                  </Styled(button)>
                </Button>
              </WithForwardRef(Button)>
              <WithForwardRef(Button)
                data-index={1}
                key="1/.1"
                onClick={[Function]}
                size="small"
              >
                <Button
                  data-index={1}
                  forwardedRef={null}
                  onClick={[Function]}
                  size="small"
                >
                  <Styled(button)
                    data-index={1}
                    onClick={[Function]}
                    size="small"
                    text="Copy"
                  >
                    <button
                      className="emotion-2"
                      data-index={1}
                      onClick={[Function]}
                      size="small"
                    >
                      <Styled(span)>
                        <span
                          className="emotion-1"
                        >
                          <Styled(span)
                            size="small"
                          >
                            <span
                              className="emotion-0"
                              size="small"
                            >
                              Copy
                            </span>
                          </Styled(span)>
                        </span>
                      </Styled(span)>
                    </button>
                  </Styled(button)>
                </Button>
              </WithForwardRef(Button)>
              <WithForwardRef(Button)
                data-index={2}
                key="2/.2"
                onClick={[Function]}
                size="small"
              >
                <Button
                  data-index={2}
                  forwardedRef={null}
                  onClick={[Function]}
                  size="small"
                >
                  <Styled(button)
                    data-index={2}
                    onClick={[Function]}
                    size="small"
                    text="Paste"
                  >
                    <button
                      className="emotion-2"
                      data-index={2}
                      onClick={[Function]}
                      size="small"
                    >
                      <Styled(span)>
                        <span
                          className="emotion-1"
                        >
                          <Styled(span)
                            size="small"
                          >
                            <span
                              className="emotion-0"
                              size="small"
                            >
                              Paste
                            </span>
                          </Styled(span)>
                        </span>
                      </Styled(span)>
                    </button>
                  </Styled(button)>
                </Button>
              </WithForwardRef(Button)>
            </div>
          </Styled(div)>
        </ButtonGroup>
        <ButtonGroup
          aria-label="Edit text"
          key="medium"
          size="medium"
        >
          <Styled(div)
            aria-label="Edit text"
            role="group"
          >
            <div
              aria-label="Edit text"
              className="emotion-9"
              role="group"
            >
              <WithForwardRef(Button)
                data-index={0}
                key="0/.0"
                onClick={[Function]}
                size="medium"
              >
                <Button
                  data-index={0}
                  forwardedRef={null}
                  onClick={[Function]}
                  size="medium"
                >
                  <Styled(button)
                    data-index={0}
                    onClick={[Function]}
                    size="medium"
                    text="Cut"
                  >
                    <button
                      className="emotion-12"
                      data-index={0}
                      onClick={[Function]}
                      size="medium"
                    >
                      <Styled(span)>
                        <span
                          className="emotion-1"
                        >
                          <Styled(span)
                            size="medium"
                          >
                            <span
                              className="emotion-10"
                              size="medium"
                            >
                              Cut
                            </span>
                          </Styled(span)>
                        </span>
                      </Styled(span)>
                    </button>
                  </Styled(button)>
                </Button>
              </WithForwardRef(Button)>
              <WithForwardRef(Button)
                data-index={1}
                key="1/.1"
                onClick={[Function]}
                size="medium"
              >
                <Button
                  data-index={1}
                  forwardedRef={null}
                  onClick={[Function]}
                  size="medium"
                >
                  <Styled(button)
                    data-index={1}
                    onClick={[Function]}
                    size="medium"
                    text="Copy"
                  >
                    <button
                      className="emotion-12"
                      data-index={1}
                      onClick={[Function]}
                      size="medium"
                    >
                      <Styled(span)>
                        <span
                          className="emotion-1"
                        >
                          <Styled(span)
                            size="medium"
                          >
                            <span
                              className="emotion-10"
                              size="medium"
                            >
                              Copy
                            </span>
                          </Styled(span)>
                        </span>
                      </Styled(span)>
                    </button>
                  </Styled(button)>
                </Button>
              </WithForwardRef(Button)>
              <WithForwardRef(Button)
                data-index={2}
                key="2/.2"
                onClick={[Function]}
                size="medium"
              >
                <Button
                  data-index={2}
                  forwardedRef={null}
                  onClick={[Function]}
                  size="medium"
                >
                  <Styled(button)
                    data-index={2}
                    onClick={[Function]}
                    size="medium"
                    text="Paste"
                  >
                    <button
                      className="emotion-12"
                      data-index={2}
                      onClick={[Function]}
                      size="medium"
                    >
                      <Styled(span)>
                        <span
                          className="emotion-1"
                        >
                          <Styled(span)
                            size="medium"
                          >
                            <span
                              className="emotion-10"
                              size="medium"
                            >
                              Paste
                            </span>
                          </Styled(span)>
                        </span>
                      </Styled(span)>
                    </button>
                  </Styled(button)>
                </Button>
              </WithForwardRef(Button)>
            </div>
          </Styled(div)>
        </ButtonGroup>
        <ButtonGroup
          aria-label="Edit text"
          key="large"
          size="large"
        >
          <Styled(div)
            aria-label="Edit text"
            role="group"
          >
            <div
              aria-label="Edit text"
              className="emotion-9"
              role="group"
            >
              <WithForwardRef(Button)
                data-index={0}
                key="0/.0"
                onClick={[Function]}
                size="large"
              >
                <Button
                  data-index={0}
                  forwardedRef={null}
                  onClick={[Function]}
                  size="large"
                >
                  <Styled(button)
                    data-index={0}
                    onClick={[Function]}
                    size="large"
                    text="Cut"
                  >
                    <button
                      className="emotion-22"
                      data-index={0}
                      onClick={[Function]}
                      size="large"
                    >
                      <Styled(span)>
                        <span
                          className="emotion-1"
                        >
                          <Styled(span)
                            size="large"
                          >
                            <span
                              className="emotion-20"
                              size="large"
                            >
                              Cut
                            </span>
                          </Styled(span)>
                        </span>
                      </Styled(span)>
                    </button>
                  </Styled(button)>
                </Button>
              </WithForwardRef(Button)>
              <WithForwardRef(Button)
                data-index={1}
                key="1/.1"
                onClick={[Function]}
                size="large"
              >
                <Button
                  data-index={1}
                  forwardedRef={null}
                  onClick={[Function]}
                  size="large"
                >
                  <Styled(button)
                    data-index={1}
                    onClick={[Function]}
                    size="large"
                    text="Copy"
                  >
                    <button
                      className="emotion-22"
                      data-index={1}
                      onClick={[Function]}
                      size="large"
                    >
                      <Styled(span)>
                        <span
                          className="emotion-1"
                        >
                          <Styled(span)
                            size="large"
                          >
                            <span
                              className="emotion-20"
                              size="large"
                            >
                              Copy
                            </span>
                          </Styled(span)>
                        </span>
                      </Styled(span)>
                    </button>
                  </Styled(button)>
                </Button>
              </WithForwardRef(Button)>
              <WithForwardRef(Button)
                data-index={2}
                key="2/.2"
                onClick={[Function]}
                size="large"
              >
                <Button
                  data-index={2}
                  forwardedRef={null}
                  onClick={[Function]}
                  size="large"
                >
                  <Styled(button)
                    data-index={2}
                    onClick={[Function]}
                    size="large"
                    text="Paste"
                  >
                    <button
                      className="emotion-22"
                      data-index={2}
                      onClick={[Function]}
                      size="large"
                    >
                      <Styled(span)>
                        <span
                          className="emotion-1"
                        >
                          <Styled(span)
                            size="large"
                          >
                            <span
                              className="emotion-20"
                              size="large"
                            >
                              Paste
                            </span>
                          </Styled(span)>
                        </span>
                      </Styled(span)>
                    </button>
                  </Styled(button)>
                </Button>
              </WithForwardRef(Button)>
            </div>
          </Styled(div)>
        </ButtonGroup>
        <ButtonGroup
          aria-label="Edit text"
          key="jumbo"
          size="jumbo"
        >
          <Styled(div)
            aria-label="Edit text"
            role="group"
          >
            <div
              aria-label="Edit text"
              className="emotion-9"
              role="group"
            >
              <WithForwardRef(Button)
                data-index={0}
                key="0/.0"
                onClick={[Function]}
                size="jumbo"
              >
                <Button
                  data-index={0}
                  forwardedRef={null}
                  onClick={[Function]}
                  size="jumbo"
                >
                  <Styled(button)
                    data-index={0}
                    onClick={[Function]}
                    size="jumbo"
                    text="Cut"
                  >
                    <button
                      className="emotion-32"
                      data-index={0}
                      onClick={[Function]}
                      size="jumbo"
                    >
                      <Styled(span)>
                        <span
                          className="emotion-1"
                        >
                          <Styled(span)
                            size="jumbo"
                          >
                            <span
                              className="emotion-30"
                              size="jumbo"
                            >
                              Cut
                            </span>
                          </Styled(span)>
                        </span>
                      </Styled(span)>
                    </button>
                  </Styled(button)>
                </Button>
              </WithForwardRef(Button)>
              <WithForwardRef(Button)
                data-index={1}
                key="1/.1"
                onClick={[Function]}
                size="jumbo"
              >
                <Button
                  data-index={1}
                  forwardedRef={null}
                  onClick={[Function]}
                  size="jumbo"
                >
                  <Styled(button)
                    data-index={1}
                    onClick={[Function]}
                    size="jumbo"
                    text="Copy"
                  >
                    <button
                      className="emotion-32"
                      data-index={1}
                      onClick={[Function]}
                      size="jumbo"
                    >
                      <Styled(span)>
                        <span
                          className="emotion-1"
                        >
                          <Styled(span)
                            size="jumbo"
                          >
                            <span
                              className="emotion-30"
                              size="jumbo"
                            >
                              Copy
                            </span>
                          </Styled(span)>
                        </span>
                      </Styled(span)>
                    </button>
                  </Styled(button)>
                </Button>
              </WithForwardRef(Button)>
              <WithForwardRef(Button)
                data-index={2}
                key="2/.2"
                onClick={[Function]}
                size="jumbo"
              >
                <Button
                  data-index={2}
                  forwardedRef={null}
                  onClick={[Function]}
                  size="jumbo"
                >
                  <Styled(button)
                    data-index={2}
                    onClick={[Function]}
                    size="jumbo"
                    text="Paste"
                  >
                    <button
                      className="emotion-32"
                      data-index={2}
                      onClick={[Function]}
                      size="jumbo"
                    >
                      <Styled(span)>
                        <span
                          className="emotion-1"
                        >
                          <Styled(span)
                            size="jumbo"
                          >
                            <span
                              className="emotion-30"
                              size="jumbo"
                            >
                              Paste
                            </span>
                          </Styled(span)>
                        </span>
                      </Styled(span)>
                    </button>
                  </Styled(button)>
                </Button>
              </WithForwardRef(Button)>
            </div>
          </Styled(div)>
        </ButtonGroup>
        <ButtonGroup
          aria-label="Edit text"
          fullWidth={true}
        >
          <Styled(div)
            aria-label="Edit text"
            fullWidth={true}
            role="group"
          >
            <div
              aria-label="Edit text"
              className="emotion-49"
              role="group"
            >
              <WithForwardRef(Button)
                data-index={0}
                key="0/.0"
                onClick={[Function]}
                size="large"
              >
                <Button
                  data-index={0}
                  forwardedRef={null}
                  onClick={[Function]}
                  size="large"
                >
                  <Styled(button)
                    data-index={0}
                    onClick={[Function]}
                    size="large"
                    text="Cut"
                  >
                    <button
                      className="emotion-22"
                      data-index={0}
                      onClick={[Function]}
                      size="large"
                    >
                      <Styled(span)>
                        <span
                          className="emotion-1"
                        >
                          <Styled(span)
                            size="large"
                          >
                            <span
                              className="emotion-20"
                              size="large"
                            >
                              Cut
                            </span>
                          </Styled(span)>
                        </span>
                      </Styled(span)>
                    </button>
                  </Styled(button)>
                </Button>
              </WithForwardRef(Button)>
              <WithForwardRef(Button)
                data-index={1}
                key="1/.1"
                onClick={[Function]}
                size="large"
              >
                <Button
                  data-index={1}
                  forwardedRef={null}
                  onClick={[Function]}
                  size="large"
                >
                  <Styled(button)
                    data-index={1}
                    onClick={[Function]}
                    size="large"
                    text="Copy"
                  >
                    <button
                      className="emotion-22"
                      data-index={1}
                      onClick={[Function]}
                      size="large"
                    >
                      <Styled(span)>
                        <span
                          className="emotion-1"
                        >
                          <Styled(span)
                            size="large"
                          >
                            <span
                              className="emotion-20"
                              size="large"
                            >
                              Copy
                            </span>
                          </Styled(span)>
                        </span>
                      </Styled(span)>
                    </button>
                  </Styled(button)>
                </Button>
              </WithForwardRef(Button)>
              <WithForwardRef(Button)
                data-index={2}
                key="2/.2"
                onClick={[Function]}
                size="large"
              >
                <Button
                  data-index={2}
                  forwardedRef={null}
                  onClick={[Function]}
                  size="large"
                >
                  <Styled(button)
                    data-index={2}
                    onClick={[Function]}
                    size="large"
                    text="Paste"
                  >
                    <button
                      className="emotion-22"
                      data-index={2}
                      onClick={[Function]}
                      size="large"
                    >
                      <Styled(span)>
                        <span
                          className="emotion-1"
                        >
                          <Styled(span)
                            size="large"
                          >
                            <span
                              className="emotion-20"
                              size="large"
                            >
                              Paste
                            </span>
                          </Styled(span)>
                        </span>
                      </Styled(span)>
                    </button>
                  </Styled(button)>
                </Button>
              </WithForwardRef(Button)>
            </div>
          </Styled(div)>
        </ButtonGroup>
      </div>
    </Styled(div)>
  </DemoLayout>
</Component>
`;

exports[`ButtonGroup demo examples Snapshots: uncontrolled 1`] = `
.emotion-9 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-9 *,
.emotion-9 *::before,
.emotion-9 *::after {
  box-sizing: inherit;
}

.emotion-9 button:focus,
.emotion-9 button:active {
  position: relative;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled]) {
  border-color: #5691f0;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #f55353;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #3ba164;
}

.emotion-9 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #cf7911;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled]) {
  border-color: #1d5bbf;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #b80d0d;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #20693d;
}

.emotion-9 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #8a4d03;
}

.emotion-9 button[disabled] {
  border: solid 1px #c8d1e0;
}

.emotion-9 button[disabled][aria-checked=true] {
  background-color: #c8d1e0;
  color: #8e99ab;
}

.emotion-9 button[disabled][aria-checked=true]:hover {
  color: #8e99ab;
}

.emotion-9 > button:not(:first-child),
.emotion-9 > *:not(:first-child) button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

.emotion-9 > button:not(:last-child),
.emotion-9 > *:not(:last-child) button {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  border-right-color: transparent;
}

.emotion-9 > [aria-checked=false]:focus,
.emotion-9 > button:not([aria-checked]):focus,
.emotion-9 > *:not([aria-checked]) button:focus,
.emotion-9 > [aria-checked=false] button:focus,
.emotion-9 > button:not([aria-checked]) button:focus,
.emotion-9 > *:not([aria-checked]) button button:focus {
  border-left-color: #c8d1e0;
  border-right-color: #c8d1e0;
}

.emotion-9 > [aria-checked=false] + [aria-checked=false]:not(:focus) {
  border-left-color: #c8d1e0;
}

.emotion-9 > [aria-checked=false]:not([disabled]):hover + [aria-checked=false]:not(:focus),
.emotion-9 > *:not([aria-checked]):not([disabled]):hover + button:not([aria-checked]):not(:focus),
.emotion-9 > *:not([aria-checked]):not([disabled]):hover + *:not([aria-checked]) button:not(:focus) {
  border-left-color: transparent;
}

.emotion-9 > [aria-checked=true] + [aria-checked=false]:not(:focus) {
  border-left-color: transparent;
}

.emotion-9 > [aria-checked=true] + [aria-checked=true]:not(:focus) {
  border-left-color: currentcolor;
}

.emotion-5 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-5 *,
.emotion-5 *::before,
.emotion-5 *::after {
  box-sizing: inherit;
}

.emotion-5:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-5:hover {
  background-color: #f5f7fa;
  border-color: #5691f0;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-5:focus:active,
.emotion-5:focus:hover {
  border-color: #c8d1e0;
}

.emotion-5:active {
  background-color: #ebeff5;
  border-color: #1d5bbf;
  color: #3272d9;
}

.emotion-5::-moz-focus-inner {
  border: 0;
}

.emotion-5 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-5 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-5 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-5 [role="img"]:only-child {
  margin: 0;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  max-height: 100%;
  pointer-events: none;
  width: 100%;
}

.emotion-0 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.875em;
  line-height: 2.857142857142857em;
}

.emotion-0:first-child {
  padding-left: 0.5714285714285714em;
}

.emotion-0:last-child {
  padding-right: 0.5714285714285714em;
}

.emotion-2 {
  box-sizing: border-box;
  color: #ffffff;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #3272d9;
  border-color: transparent;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-2 *,
.emotion-2 *::before,
.emotion-2 *::after {
  box-sizing: inherit;
}

.emotion-2:focus {
  background-color: #3272d9;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:hover {
  background-color: #5691f0;
  color: #ffffff;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:focus:active,
.emotion-2:focus:hover {
  border-color: transparent;
}

.emotion-2:active {
  background-color: #1d5bbf;
  border-color: #1d5bbf;
  color: #ffffff;
}

.emotion-2::-moz-focus-inner {
  border: 0;
}

.emotion-2 [role="img"] {
  box-sizing: content-box;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-2 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-2 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-2 [role="img"]:only-child {
  margin: 0;
}

<ButtonGroup
  aria-label="Align text"
  mode="radio"
>
  <Styled(div)
    aria-label="Align text"
    mode="radio"
    role="radiogroup"
  >
    <div
      aria-label="Align text"
      className="emotion-9"
      mode="radio"
      role="radiogroup"
    >
      <WithForwardRef(Button)
        aria-checked={true}
        data-index={0}
        defaultChecked={true}
        key="0/.0"
        onClick={[Function]}
        primary={true}
        role="radio"
        size="large"
      >
        <Button
          aria-checked={true}
          data-index={0}
          defaultChecked={true}
          forwardedRef={null}
          onClick={[Function]}
          primary={true}
          role="radio"
          size="large"
        >
          <Styled(button)
            aria-checked={true}
            data-index={0}
            defaultChecked={true}
            onClick={[Function]}
            primary={true}
            role="radio"
            size="large"
            text="Left"
          >
            <button
              aria-checked={true}
              className="emotion-2"
              data-index={0}
              defaultChecked={true}
              onClick={[Function]}
              role="radio"
              size="large"
            >
              <Styled(span)>
                <span
                  className="emotion-1"
                >
                  <Styled(span)
                    size="large"
                  >
                    <span
                      className="emotion-0"
                      size="large"
                    >
                      Left
                    </span>
                  </Styled(span)>
                </span>
              </Styled(span)>
            </button>
          </Styled(button)>
        </Button>
      </WithForwardRef(Button)>
      <WithForwardRef(Button)
        aria-checked={false}
        data-index={1}
        key="1/.1"
        onClick={[Function]}
        role="radio"
        size="large"
      >
        <Button
          aria-checked={false}
          data-index={1}
          forwardedRef={null}
          onClick={[Function]}
          role="radio"
          size="large"
        >
          <Styled(button)
            aria-checked={false}
            data-index={1}
            onClick={[Function]}
            role="radio"
            size="large"
            text="Center"
          >
            <button
              aria-checked={false}
              className="emotion-5"
              data-index={1}
              onClick={[Function]}
              role="radio"
              size="large"
            >
              <Styled(span)>
                <span
                  className="emotion-1"
                >
                  <Styled(span)
                    size="large"
                  >
                    <span
                      className="emotion-0"
                      size="large"
                    >
                      Center
                    </span>
                  </Styled(span)>
                </span>
              </Styled(span)>
            </button>
          </Styled(button)>
        </Button>
      </WithForwardRef(Button)>
      <WithForwardRef(Button)
        aria-checked={false}
        data-index={2}
        key="2/.2"
        onClick={[Function]}
        role="radio"
        size="large"
      >
        <Button
          aria-checked={false}
          data-index={2}
          forwardedRef={null}
          onClick={[Function]}
          role="radio"
          size="large"
        >
          <Styled(button)
            aria-checked={false}
            data-index={2}
            onClick={[Function]}
            role="radio"
            size="large"
            text="Right"
          >
            <button
              aria-checked={false}
              className="emotion-5"
              data-index={2}
              onClick={[Function]}
              role="radio"
              size="large"
            >
              <Styled(span)>
                <span
                  className="emotion-1"
                >
                  <Styled(span)
                    size="large"
                  >
                    <span
                      className="emotion-0"
                      size="large"
                    >
                      Right
                    </span>
                  </Styled(span)>
                </span>
              </Styled(span)>
            </button>
          </Styled(button)>
        </Button>
      </WithForwardRef(Button)>
    </div>
  </Styled(div)>
</ButtonGroup>
`;

exports[`ButtonGroup demo examples Snapshots: variants 1`] = `
.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  max-height: 100%;
  pointer-events: none;
  width: 100%;
}

.emotion-0 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.875em;
  line-height: 2.857142857142857em;
}

.emotion-0:first-child {
  padding-left: 0.5714285714285714em;
}

.emotion-0:last-child {
  padding-right: 0.5714285714285714em;
}

.emotion-21[class] > *:not(:last-child) {
  margin-bottom: 1rem;
}

.emotion-6 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-6 *,
.emotion-6 *::before,
.emotion-6 *::after {
  box-sizing: inherit;
}

.emotion-6 button:focus,
.emotion-6 button:active {
  position: relative;
}

.emotion-6 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled]) {
  border-color: #3ba164;
}

.emotion-6 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #f55353;
}

.emotion-6 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #3ba164;
}

.emotion-6 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #cf7911;
}

.emotion-6 button:active:not(:focus):not([aria-checked=true]):not([disabled]) {
  border-color: #20693d;
}

.emotion-6 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #b80d0d;
}

.emotion-6 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #20693d;
}

.emotion-6 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #8a4d03;
}

.emotion-6 button[disabled] {
  border: solid 1px #c8d1e0;
}

.emotion-6 button[disabled][aria-checked=true] {
  background-color: #c8d1e0;
  color: #8e99ab;
}

.emotion-6 button[disabled][aria-checked=true]:hover {
  color: #8e99ab;
}

.emotion-6 > button:not(:first-child),
.emotion-6 > *:not(:first-child) button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

.emotion-6 > button:not(:last-child),
.emotion-6 > *:not(:last-child) button {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  border-right-color: transparent;
}

.emotion-6 > [aria-checked=false]:focus,
.emotion-6 > button:not([aria-checked]):focus,
.emotion-6 > *:not([aria-checked]) button:focus,
.emotion-6 > [aria-checked=false] button:focus,
.emotion-6 > button:not([aria-checked]) button:focus,
.emotion-6 > *:not([aria-checked]) button button:focus {
  border-left-color: #c8d1e0;
  border-right-color: #c8d1e0;
}

.emotion-6 > [aria-checked=false] + [aria-checked=false]:not(:focus) {
  border-left-color: #c8d1e0;
}

.emotion-6 > [aria-checked=false]:not([disabled]):hover + [aria-checked=false]:not(:focus),
.emotion-6 > *:not([aria-checked]):not([disabled]):hover + button:not([aria-checked]):not(:focus),
.emotion-6 > *:not([aria-checked]):not([disabled]):hover + *:not([aria-checked]) button:not(:focus) {
  border-left-color: transparent;
}

.emotion-6 > [aria-checked=true] + [aria-checked=false]:not(:focus) {
  border-left-color: transparent;
}

.emotion-6 > [aria-checked=true] + [aria-checked=true]:not(:focus) {
  border-left-color: currentcolor;
}

.emotion-2 {
  box-sizing: border-box;
  color: #2a854e;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-2 *,
.emotion-2 *::before,
.emotion-2 *::after {
  box-sizing: inherit;
}

.emotion-2:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #20693d;
  color: #2a854e;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:hover {
  background-color: #f5f7fa;
  border-color: #3ba164;
  color: #2a854e;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:focus:active,
.emotion-2:focus:hover {
  border-color: #c8d1e0;
}

.emotion-2:active {
  background-color: #ebeff5;
  border-color: #20693d;
  color: #2a854e;
}

.emotion-2::-moz-focus-inner {
  border: 0;
}

.emotion-2 [role="img"] {
  box-sizing: content-box;
  color: #2a854e;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-2 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-2 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-2 [role="img"]:only-child {
  margin: 0;
}

.emotion-13 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-13 *,
.emotion-13 *::before,
.emotion-13 *::after {
  box-sizing: inherit;
}

.emotion-13 button:focus,
.emotion-13 button:active {
  position: relative;
}

.emotion-13 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled]) {
  border-color: #cf7911;
}

.emotion-13 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #f55353;
}

.emotion-13 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #3ba164;
}

.emotion-13 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #cf7911;
}

.emotion-13 button:active:not(:focus):not([aria-checked=true]):not([disabled]) {
  border-color: #8a4d03;
}

.emotion-13 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #b80d0d;
}

.emotion-13 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #20693d;
}

.emotion-13 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #8a4d03;
}

.emotion-13 button[disabled] {
  border: solid 1px #c8d1e0;
}

.emotion-13 button[disabled][aria-checked=true] {
  background-color: #c8d1e0;
  color: #8e99ab;
}

.emotion-13 button[disabled][aria-checked=true]:hover {
  color: #8e99ab;
}

.emotion-13 > button:not(:first-child),
.emotion-13 > *:not(:first-child) button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

.emotion-13 > button:not(:last-child),
.emotion-13 > *:not(:last-child) button {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  border-right-color: transparent;
}

.emotion-13 > [aria-checked=false]:focus,
.emotion-13 > button:not([aria-checked]):focus,
.emotion-13 > *:not([aria-checked]) button:focus,
.emotion-13 > [aria-checked=false] button:focus,
.emotion-13 > button:not([aria-checked]) button:focus,
.emotion-13 > *:not([aria-checked]) button button:focus {
  border-left-color: #c8d1e0;
  border-right-color: #c8d1e0;
}

.emotion-13 > [aria-checked=false] + [aria-checked=false]:not(:focus) {
  border-left-color: #c8d1e0;
}

.emotion-13 > [aria-checked=false]:not([disabled]):hover + [aria-checked=false]:not(:focus),
.emotion-13 > *:not([aria-checked]):not([disabled]):hover + button:not([aria-checked]):not(:focus),
.emotion-13 > *:not([aria-checked]):not([disabled]):hover + *:not([aria-checked]) button:not(:focus) {
  border-left-color: transparent;
}

.emotion-13 > [aria-checked=true] + [aria-checked=false]:not(:focus) {
  border-left-color: transparent;
}

.emotion-13 > [aria-checked=true] + [aria-checked=true]:not(:focus) {
  border-left-color: currentcolor;
}

.emotion-9 {
  box-sizing: border-box;
  color: #ad5f00;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-9 *,
.emotion-9 *::before,
.emotion-9 *::after {
  box-sizing: inherit;
}

.emotion-9:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #8a4d03;
  color: #ad5f00;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-9:hover {
  background-color: #f5f7fa;
  border-color: #cf7911;
  color: #ad5f00;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-9:focus:active,
.emotion-9:focus:hover {
  border-color: #c8d1e0;
}

.emotion-9:active {
  background-color: #ebeff5;
  border-color: #8a4d03;
  color: #ad5f00;
}

.emotion-9::-moz-focus-inner {
  border: 0;
}

.emotion-9 [role="img"] {
  box-sizing: content-box;
  color: #ad5f00;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-9 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-9 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-9 [role="img"]:only-child {
  margin: 0;
}

.emotion-20 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

.emotion-20 *,
.emotion-20 *::before,
.emotion-20 *::after {
  box-sizing: inherit;
}

.emotion-20 button:focus,
.emotion-20 button:active {
  position: relative;
}

.emotion-20 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled]) {
  border-color: #f55353;
}

.emotion-20 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #f55353;
}

.emotion-20 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #3ba164;
}

.emotion-20 button:hover:not(:focus):not(:active):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #cf7911;
}

.emotion-20 button:active:not(:focus):not([aria-checked=true]):not([disabled]) {
  border-color: #b80d0d;
}

.emotion-20 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="danger"] {
  border-color: #b80d0d;
}

.emotion-20 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="success"] {
  border-color: #20693d;
}

.emotion-20 button:active:not(:focus):not([aria-checked=true]):not([disabled])[data-variant="warning"] {
  border-color: #8a4d03;
}

.emotion-20 button[disabled] {
  border: solid 1px #c8d1e0;
}

.emotion-20 button[disabled][aria-checked=true] {
  background-color: #c8d1e0;
  color: #8e99ab;
}

.emotion-20 button[disabled][aria-checked=true]:hover {
  color: #8e99ab;
}

.emotion-20 > button:not(:first-child),
.emotion-20 > *:not(:first-child) button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

.emotion-20 > button:not(:last-child),
.emotion-20 > *:not(:last-child) button {
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
  border-right-color: transparent;
}

.emotion-20 > [aria-checked=false]:focus,
.emotion-20 > button:not([aria-checked]):focus,
.emotion-20 > *:not([aria-checked]) button:focus,
.emotion-20 > [aria-checked=false] button:focus,
.emotion-20 > button:not([aria-checked]) button:focus,
.emotion-20 > *:not([aria-checked]) button button:focus {
  border-left-color: #c8d1e0;
  border-right-color: #c8d1e0;
}

.emotion-20 > [aria-checked=false] + [aria-checked=false]:not(:focus) {
  border-left-color: #c8d1e0;
}

.emotion-20 > [aria-checked=false]:not([disabled]):hover + [aria-checked=false]:not(:focus),
.emotion-20 > *:not([aria-checked]):not([disabled]):hover + button:not([aria-checked]):not(:focus),
.emotion-20 > *:not([aria-checked]):not([disabled]):hover + *:not([aria-checked]) button:not(:focus) {
  border-left-color: transparent;
}

.emotion-20 > [aria-checked=true] + [aria-checked=false]:not(:focus) {
  border-left-color: transparent;
}

.emotion-20 > [aria-checked=true] + [aria-checked=true]:not(:focus) {
  border-left-color: currentcolor;
}

.emotion-16 {
  box-sizing: border-box;
  color: #de1b1b;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-16 *,
.emotion-16 *::before,
.emotion-16 *::after {
  box-sizing: inherit;
}

.emotion-16:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #b80d0d;
  color: #de1b1b;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-16:hover {
  background-color: #f5f7fa;
  border-color: #f55353;
  color: #de1b1b;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-16:focus:active,
.emotion-16:focus:hover {
  border-color: #c8d1e0;
}

.emotion-16:active {
  background-color: #ebeff5;
  border-color: #b80d0d;
  color: #de1b1b;
}

.emotion-16::-moz-focus-inner {
  border: 0;
}

.emotion-16 [role="img"] {
  box-sizing: content-box;
  color: #de1b1b;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-16 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-16 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-16 [role="img"]:only-child {
  margin: 0;
}

<DemoLayout>
  <Styled(div)
    marginBottom="1rem"
  >
    <div
      className="emotion-21"
    >
      <ButtonGroup
        aria-label="Shopping options"
        variant="success"
      >
        <Styled(div)
          aria-label="Shopping options"
          role="group"
          variant="success"
        >
          <div
            aria-label="Shopping options"
            className="emotion-6"
            role="group"
          >
            <WithForwardRef(Button)
              data-index={0}
              key="0/.0"
              onClick={[Function]}
              size="large"
              variant="success"
            >
              <Button
                data-index={0}
                forwardedRef={null}
                onClick={[Function]}
                size="large"
                variant="success"
              >
                <Styled(button)
                  data-index={0}
                  onClick={[Function]}
                  size="large"
                  text="Donate $5"
                  variant="success"
                >
                  <button
                    className="emotion-2"
                    data-index={0}
                    onClick={[Function]}
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Donate $5
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              data-index={1}
              key="1/.1"
              onClick={[Function]}
              size="large"
              variant="success"
            >
              <Button
                data-index={1}
                forwardedRef={null}
                onClick={[Function]}
                size="large"
                variant="success"
              >
                <Styled(button)
                  data-index={1}
                  onClick={[Function]}
                  size="large"
                  text="Donate $10"
                  variant="success"
                >
                  <button
                    className="emotion-2"
                    data-index={1}
                    onClick={[Function]}
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Donate $10
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
          </div>
        </Styled(div)>
      </ButtonGroup>
      <ButtonGroup
        aria-label="Shopping options"
        variant="warning"
      >
        <Styled(div)
          aria-label="Shopping options"
          role="group"
          variant="warning"
        >
          <div
            aria-label="Shopping options"
            className="emotion-13"
            role="group"
          >
            <WithForwardRef(Button)
              data-index={0}
              key="0/.0"
              onClick={[Function]}
              size="large"
              variant="warning"
            >
              <Button
                data-index={0}
                forwardedRef={null}
                onClick={[Function]}
                size="large"
                variant="warning"
              >
                <Styled(button)
                  data-index={0}
                  onClick={[Function]}
                  size="large"
                  text="Revoke Author Permissions"
                  variant="warning"
                >
                  <button
                    className="emotion-9"
                    data-index={0}
                    onClick={[Function]}
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Revoke Author Permissions
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              data-index={1}
              key="1/.1"
              onClick={[Function]}
              size="large"
              variant="warning"
            >
              <Button
                data-index={1}
                forwardedRef={null}
                onClick={[Function]}
                size="large"
                variant="warning"
              >
                <Styled(button)
                  data-index={1}
                  onClick={[Function]}
                  size="large"
                  text="Revoke Group Permissions"
                  variant="warning"
                >
                  <button
                    className="emotion-9"
                    data-index={1}
                    onClick={[Function]}
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Revoke Group Permissions
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
          </div>
        </Styled(div)>
      </ButtonGroup>
      <ButtonGroup
        aria-label="Shopping options"
        variant="danger"
      >
        <Styled(div)
          aria-label="Shopping options"
          role="group"
          variant="danger"
        >
          <div
            aria-label="Shopping options"
            className="emotion-20"
            role="group"
          >
            <WithForwardRef(Button)
              data-index={0}
              key="0/.0"
              onClick={[Function]}
              size="large"
              variant="danger"
            >
              <Button
                data-index={0}
                forwardedRef={null}
                onClick={[Function]}
                size="large"
                variant="danger"
              >
                <Styled(button)
                  data-index={0}
                  onClick={[Function]}
                  size="large"
                  text="Send Storm Watch"
                  variant="danger"
                >
                  <button
                    className="emotion-16"
                    data-index={0}
                    onClick={[Function]}
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Send Storm Watch
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
            <WithForwardRef(Button)
              data-index={1}
              key="1/.1"
              onClick={[Function]}
              size="large"
              variant="danger"
            >
              <Button
                data-index={1}
                forwardedRef={null}
                onClick={[Function]}
                size="large"
                variant="danger"
              >
                <Styled(button)
                  data-index={1}
                  onClick={[Function]}
                  size="large"
                  text="Send Storm Warning"
                  variant="danger"
                >
                  <button
                    className="emotion-16"
                    data-index={1}
                    onClick={[Function]}
                    size="large"
                  >
                    <Styled(span)>
                      <span
                        className="emotion-1"
                      >
                        <Styled(span)
                          size="large"
                        >
                          <span
                            className="emotion-0"
                            size="large"
                          >
                            Send Storm Warning
                          </span>
                        </Styled(span)>
                      </span>
                    </Styled(span)>
                  </button>
                </Styled(button)>
              </Button>
            </WithForwardRef(Button)>
          </div>
        </Styled(div)>
      </ButtonGroup>
    </div>
  </Styled(div)>
</DemoLayout>
`;
