// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Truncate does not render tooltip when not truncated 1`] = `
.emotion-0 {
  display: inline-block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
}

.emotion-0:focus {
  outline: 1px solid #1d5bbf;
  outline-offset: -1px;
}

@media screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-0:focus {
    outline: none;
  }
}

<Truncate>
  <Styled(span)
    showTooltip={false}
  >
    <span
      className="emotion-0"
    >
      Long text string that hopefully truncates
      <EventListener
        listeners={
          Array [
            Object {
              "event": "resize",
              "handler": [Function],
              "target": "window",
            },
          ]
        }
      />
    </span>
  </Styled(span)>
</Truncate>
`;

exports[`Truncate renders a tooltip when truncated 1`] = `
.emotion-3 {
  white-space: normal;
}

.emotion-2 {
  display: inline-block;
  white-space: normal;
}

.emotion-1 {
  display: inline-block;
}

.emotion-0 {
  pointer-events: all;
  display: inline-block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
}

.emotion-0:focus {
  outline: 1px solid #1d5bbf;
  outline-offset: -1px;
}

@media screen and (-ms-high-contrast:active),(-ms-high-contrast:none) {
  .emotion-0:focus {
    outline: none;
  }
}

<Truncate>
  <Styled(Tooltip)
    content="Long text string that hopefully truncates"
    hasArrow={true}
    placement="bottom"
  >
    <Tooltip
      className="emotion-3"
      content="Long text string that hopefully truncates"
      hasArrow={true}
      placement="bottom"
    >
      <WithTheme(Themed(Popover))
        className="emotion-3"
        content={[Function]}
        focusTriggerOnClose={false}
        hasArrow={true}
        id="tooltip-1"
        isOpen={false}
        onClose={[Function]}
        onOpen={[Function]}
        placement="bottom"
      >
        <Themed(Popover)
          className="emotion-3"
          content={[Function]}
          focusTriggerOnClose={false}
          hasArrow={true}
          id="tooltip-1"
          isOpen={false}
          onClose={[Function]}
          onOpen={[Function]}
          placement="bottom"
        >
          <ThemeProvider>
            <ThemeProvider>
              <Popover
                className="emotion-3"
                content={[Function]}
                focusTriggerOnClose={false}
                hasArrow={true}
                id="tooltip-1"
                isOpen={false}
                onClose={[Function]}
                onOpen={[Function]}
                placement="bottom"
              >
                <Manager>
                  <Styled(span)
                    className="emotion-3"
                    content={[Function]}
                    focusTriggerOnClose={false}
                    hasArrow={true}
                    id="tooltip-1"
                    isOpen={false}
                    onClose={[Function]}
                    onOpen={[Function]}
                    placement="bottom"
                  >
                    <span
                      className="emotion-2"
                      content={[Function]}
                      id="tooltip-1"
                      onClose={[Function]}
                      onOpen={[Function]}
                    >
                      <PopoverTrigger
                        aria-describedby="tooltip-1-content"
                        aria-owns="tooltip-1-content"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onFocus={[Function]}
                        onMouseEnter={[Function]}
                        onMouseLeave={[Function]}
                        role="button"
                        showTooltip={true}
                        tabIndex={0}
                      >
                        <Reference>
                          <InnerReference
                            getReferenceRef={[Function]}
                          >
                            <Styled(span)>
                              <span
                                className="emotion-1"
                              >
                                <Styled(span)
                                  aria-describedby="tooltip-1-content"
                                  aria-owns="tooltip-1-content"
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onFocus={[Function]}
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  role="button"
                                  showTooltip={true}
                                  tabIndex={0}
                                >
                                  <span
                                    aria-describedby="tooltip-1-content"
                                    aria-owns="tooltip-1-content"
                                    className="emotion-0"
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onFocus={[Function]}
                                    onMouseEnter={[Function]}
                                    onMouseLeave={[Function]}
                                    role="button"
                                    tabIndex={0}
                                  >
                                    Long text string that hopefully truncates
                                    <EventListener
                                      listeners={
                                        Array [
                                          Object {
                                            "event": "resize",
                                            "handler": [Function],
                                            "target": "window",
                                          },
                                        ]
                                      }
                                    />
                                  </span>
                                </Styled(span)>
                              </span>
                            </Styled(span)>
                          </InnerReference>
                        </Reference>
                      </PopoverTrigger>
                    </span>
                  </Styled(span)>
                </Manager>
              </Popover>
            </ThemeProvider>
          </ThemeProvider>
        </Themed(Popover)>
      </WithTheme(Themed(Popover))>
    </Tooltip>
  </Styled(Tooltip)>
</Truncate>
`;
