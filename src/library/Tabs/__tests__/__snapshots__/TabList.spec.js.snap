// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TabList applies shadow when scrollable 1`] = `
.emotion-27 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  position: relative;
}

.emotion-8 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  list-style: none;
  margin: 0;
  padding: 0;
  white-space: nowrap;
}

.emotion-8 > *:not(:last-child) {
  margin-right: 1em;
}

.emotion-3 {
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-3:hover [role="img"] {
  color: #3272d9;
}

.emotion-3 > span {
  height: 100%;
}

.emotion-2 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: transparent;
  border-color: transparent;
  border-radius: 0;
  border-style: solid;
  border-width: 0px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2em;
  margin: 0;
  min-width: 2em;
  padding: 0;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-2 *,
.emotion-2 *::before,
.emotion-2 *::after {
  box-sizing: inherit;
}

.emotion-2:focus {
  border-color: #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:hover {
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-2:focus:active,
.emotion-2:focus:hover {
  border-color: #1d5bbf;
}

.emotion-2:active {
  color: #3272d9;
}

.emotion-2::-moz-focus-inner {
  border: 0;
}

.emotion-2 [role="img"] {
  box-sizing: content-box;
  color: #58606e;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-2 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-2 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-2 [role="img"]:only-child {
  margin: 0;
}

.emotion-2:hover [role="img"] {
  color: #3272d9;
}

.emotion-2 > span {
  height: 100%;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  max-height: 100%;
  pointer-events: none;
  width: 100%;
}

.emotion-0 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.25em;
  width: 1.25em;
}

.emotion-15 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  min-width: 0%;
}

.emotion-15::before {
  bottom: 1px;
}

.emotion-10 {
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: hidden;
  padding-left: 2px;
  padding-right: 2px;
}

.emotion-9 {
  outline: 0;
  overflow-x: auto;
  -webkit-transition: outline 0.1s 0.25s;
  transition: outline 0.1s 0.25s;
  overflow: -moz-scrollbars-none;
  -ms-overflow-style: none;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  overflow-y: hidden;
  padding-left: 2px;
  padding-right: 2px;
}

.emotion-9:focus {
  outline: 1px solid #1d5bbf;
}

.emotion-9::-webkit-scrollbar {
  display: none;
}

.emotion-14 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  min-width: 0%;
}

.emotion-14::before {
  bottom: 0;
  box-shadow: inset -24px 0 22px -14px #ffffff;
  content: "";
  pointer-events: none;
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
}

.emotion-14::before {
  bottom: 1px;
}

<TabList
  position="top"
>
  <Styled(div)>
    <div
      className="emotion-27"
    >
      <TabListIncrementButton
        icon={<IconChevronLeft />}
        key="start"
        onClick={[Function]}
      >
        <Styled(WithTheme(Themed(WithForwardRef(Button))))
          aria-hidden={true}
          iconStart={<IconChevronLeft />}
          minimal={true}
          onClick={[Function]}
          size="medium"
          tabIndex={-1}
        >
          <WithTheme(Themed(WithForwardRef(Button)))
            aria-hidden={true}
            className="emotion-3"
            iconStart={<IconChevronLeft />}
            minimal={true}
            onClick={[Function]}
            size="medium"
            tabIndex={-1}
          >
            <Themed(WithForwardRef(Button))
              aria-hidden={true}
              className="emotion-3"
              iconStart={<IconChevronLeft />}
              minimal={true}
              onClick={[Function]}
              size="medium"
              tabIndex={-1}
            >
              <ThemeProvider>
                <ThemeProvider>
                  <WithForwardRef(Button)
                    aria-hidden={true}
                    className="emotion-3"
                    iconStart={<IconChevronLeft />}
                    minimal={true}
                    onClick={[Function]}
                    size="medium"
                    tabIndex={-1}
                  >
                    <Button
                      aria-hidden={true}
                      className="emotion-3"
                      forwardedRef={null}
                      iconStart={<IconChevronLeft />}
                      minimal={true}
                      onClick={[Function]}
                      size="medium"
                      tabIndex={-1}
                    >
                      <Styled(button)
                        aria-hidden={true}
                        className="emotion-3"
                        minimal={true}
                        onClick={[Function]}
                        size="medium"
                        tabIndex={-1}
                      >
                        <button
                          aria-hidden={true}
                          className="emotion-2"
                          onClick={[Function]}
                          size="medium"
                          tabIndex={-1}
                        >
                          <Styled(span)>
                            <span
                              className="emotion-1"
                            >
                              <IconChevronLeft
                                key="iconStart"
                                size="medium"
                              >
                                <Icon
                                  rtl={true}
                                  size="medium"
                                >
                                  <Styled(svg)
                                    aria-hidden={true}
                                    focusable="false"
                                    role="img"
                                    rtl={true}
                                    size="medium"
                                    viewBox="0 0 24 24"
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="emotion-0"
                                      focusable="false"
                                      role="img"
                                      size="medium"
                                      viewBox="0 0 24 24"
                                    >
                                      <g>
                                        <path
                                          d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
                                        />
                                      </g>
                                    </svg>
                                  </Styled(svg)>
                                </Icon>
                              </IconChevronLeft>
                            </span>
                          </Styled(span)>
                        </button>
                      </Styled(button)>
                    </Button>
                  </WithForwardRef(Button)>
                </ThemeProvider>
              </ThemeProvider>
            </Themed(WithForwardRef(Button))>
          </WithTheme(Themed(WithForwardRef(Button)))>
        </Styled(WithTheme(Themed(WithForwardRef(Button))))>
      </TabListIncrementButton>
      <withProps(Styled(WithTheme(Themed(OverflowContainerWithShadows))))
        key="inner"
        position="top"
        scrollX={true}
      >
        <Styled(WithTheme(Themed(OverflowContainerWithShadows)))
          hideScrollbars={true}
          position="top"
          scrollX={true}
          tabIndex={null}
        >
          <WithTheme(Themed(OverflowContainerWithShadows))
            className="emotion-15"
            hideScrollbars={true}
            position="top"
            scrollX={true}
            tabIndex={null}
          >
            <Themed(OverflowContainerWithShadows)
              className="emotion-15"
              hideScrollbars={true}
              position="top"
              scrollX={true}
              tabIndex={null}
            >
              <ThemeProvider>
                <ThemeProvider>
                  <OverflowContainerWithShadows
                    className="emotion-15"
                    hideScrollbars={true}
                    position="top"
                    scrollX={true}
                    tabIndex={null}
                  >
                    <Styled(div)
                      className="emotion-15"
                      hasShadowLeft={false}
                      hasShadowRight={true}
                      position="top"
                      tabIndex={null}
                    >
                      <div
                        className="emotion-14"
                        tabIndex={null}
                      >
                        <Styled(WithTheme(Themed(OverflowContainer)))
                          containerRef={[Function]}
                          hideScrollbars={true}
                          onScroll={[Function]}
                          scrollX={true}
                          tabIndex={0}
                        >
                          <WithTheme(Themed(OverflowContainer))
                            className="emotion-10"
                            containerRef={[Function]}
                            hideScrollbars={true}
                            onScroll={[Function]}
                            scrollX={true}
                            tabIndex={0}
                          >
                            <Themed(OverflowContainer)
                              className="emotion-10"
                              containerRef={[Function]}
                              hideScrollbars={true}
                              onScroll={[Function]}
                              scrollX={true}
                              tabIndex={0}
                            >
                              <ThemeProvider>
                                <ThemeProvider>
                                  <OverflowContainer
                                    className="emotion-10"
                                    containerRef={[Function]}
                                    hideScrollbars={true}
                                    onScroll={[Function]}
                                    scrollX={true}
                                    tabIndex={0}
                                  >
                                    <Styled(div)
                                      className="emotion-10"
                                      containerRef={[Function]}
                                      hideScrollbars={true}
                                      onScroll={[Function]}
                                      scrollX={true}
                                      tabIndex={0}
                                    >
                                      <div
                                        className="emotion-9"
                                        onScroll={[Function]}
                                        tabIndex={0}
                                      >
                                        <Styled(ul)
                                          count={0}
                                        >
                                          <ul
                                            className="emotion-8"
                                          />
                                        </Styled(ul)>
                                        <EventListener
                                          listeners={
                                            Array [
                                              Object {
                                                "event": "resize",
                                                "handler": [Function],
                                                "target": "window",
                                              },
                                            ]
                                          }
                                        />
                                      </div>
                                    </Styled(div)>
                                  </OverflowContainer>
                                </ThemeProvider>
                              </ThemeProvider>
                            </Themed(OverflowContainer)>
                          </WithTheme(Themed(OverflowContainer))>
                        </Styled(WithTheme(Themed(OverflowContainer)))>
                      </div>
                    </Styled(div)>
                  </OverflowContainerWithShadows>
                </ThemeProvider>
              </ThemeProvider>
            </Themed(OverflowContainerWithShadows)>
          </WithTheme(Themed(OverflowContainerWithShadows))>
        </Styled(WithTheme(Themed(OverflowContainerWithShadows)))>
      </withProps(Styled(WithTheme(Themed(OverflowContainerWithShadows))))>
      <TabListIncrementButton
        icon={<IconChevronRight />}
        key="end"
        onClick={[Function]}
      >
        <Styled(WithTheme(Themed(WithForwardRef(Button))))
          aria-hidden={true}
          iconStart={<IconChevronRight />}
          minimal={true}
          onClick={[Function]}
          size="medium"
          tabIndex={-1}
        >
          <WithTheme(Themed(WithForwardRef(Button)))
            aria-hidden={true}
            className="emotion-3"
            iconStart={<IconChevronRight />}
            minimal={true}
            onClick={[Function]}
            size="medium"
            tabIndex={-1}
          >
            <Themed(WithForwardRef(Button))
              aria-hidden={true}
              className="emotion-3"
              iconStart={<IconChevronRight />}
              minimal={true}
              onClick={[Function]}
              size="medium"
              tabIndex={-1}
            >
              <ThemeProvider>
                <ThemeProvider>
                  <WithForwardRef(Button)
                    aria-hidden={true}
                    className="emotion-3"
                    iconStart={<IconChevronRight />}
                    minimal={true}
                    onClick={[Function]}
                    size="medium"
                    tabIndex={-1}
                  >
                    <Button
                      aria-hidden={true}
                      className="emotion-3"
                      forwardedRef={null}
                      iconStart={<IconChevronRight />}
                      minimal={true}
                      onClick={[Function]}
                      size="medium"
                      tabIndex={-1}
                    >
                      <Styled(button)
                        aria-hidden={true}
                        className="emotion-3"
                        minimal={true}
                        onClick={[Function]}
                        size="medium"
                        tabIndex={-1}
                      >
                        <button
                          aria-hidden={true}
                          className="emotion-2"
                          onClick={[Function]}
                          size="medium"
                          tabIndex={-1}
                        >
                          <Styled(span)>
                            <span
                              className="emotion-1"
                            >
                              <IconChevronRight
                                key="iconStart"
                                size="medium"
                              >
                                <Icon
                                  rtl={true}
                                  size="medium"
                                >
                                  <Styled(svg)
                                    aria-hidden={true}
                                    focusable="false"
                                    role="img"
                                    rtl={true}
                                    size="medium"
                                    viewBox="0 0 24 24"
                                  >
                                    <svg
                                      aria-hidden={true}
                                      className="emotion-0"
                                      focusable="false"
                                      role="img"
                                      size="medium"
                                      viewBox="0 0 24 24"
                                    >
                                      <g>
                                        <path
                                          d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
                                        />
                                      </g>
                                    </svg>
                                  </Styled(svg)>
                                </Icon>
                              </IconChevronRight>
                            </span>
                          </Styled(span)>
                        </button>
                      </Styled(button)>
                    </Button>
                  </WithForwardRef(Button)>
                </ThemeProvider>
              </ThemeProvider>
            </Themed(WithForwardRef(Button))>
          </WithTheme(Themed(WithForwardRef(Button)))>
        </Styled(WithTheme(Themed(WithForwardRef(Button))))>
      </TabListIncrementButton>
      <EventListener
        listeners={
          Array [
            Object {
              "event": "resize",
              "handler": [Function],
              "target": "window",
            },
          ]
        }
      />
    </div>
  </Styled(div)>
</TabList>
`;

exports[`TabList does not apply shadow when not scrollable 1`] = `
.emotion-1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
  position: relative;
}

.emotion-0 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
  list-style: none;
  margin: 0;
  padding: 0;
  white-space: nowrap;
}

.emotion-0 > *:not(:last-child) {
  margin-right: 1em;
}

<TabList
  position="top"
>
  <Styled(div)>
    <div
      className="emotion-1"
    >
      <Styled(ul)
        count={0}
      >
        <ul
          className="emotion-0"
        />
      </Styled(ul)>
      <EventListener
        listeners={
          Array [
            Object {
              "event": "resize",
              "handler": [Function],
              "target": "window",
            },
          ]
        }
      />
    </div>
  </Styled(div)>
</TabList>
`;
