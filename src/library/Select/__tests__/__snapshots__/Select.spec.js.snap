// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Select demo examples Snapshots: controlled 1`] = `
.emotion-14 {
  width: 100%;
}

.emotion-14 > span {
  width: 100%;
}

.emotion-13 {
  display: inline-block;
  width: 100%;
}

.emotion-13 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-7:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-3 {
  margin: 0.5em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-6 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

<Component>
  <MyForm>
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      itemKey="value"
      onChange={[Function]}
      placeholder="Select..."
      placement="bottom-start"
      size="large"
    >
      <Styled(WithTheme(Themed(Dropdown)))
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        id="select-4"
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onChange={[Function]}
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Select..."
        placement="bottom-start"
        size="large"
      >
        <WithTheme(Themed(Dropdown))
          className="emotion-14"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          id="select-4"
          isOpen={false}
          itemKey="value"
          menu={[Function]}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onChange={[Function]}
          onClose={[Function]}
          onOpen={[Function]}
          placeholder="Select..."
          placement="bottom-start"
          size="large"
        >
          <Themed(Dropdown)
            className="emotion-14"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            id="select-4"
            isOpen={false}
            itemKey="value"
            menu={[Function]}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onChange={[Function]}
            onClose={[Function]}
            onOpen={[Function]}
            placeholder="Select..."
            placement="bottom-start"
            size="large"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="emotion-14"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  id="select-4"
                  isOpen={false}
                  itemKey="value"
                  menu={[Function]}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onChange={[Function]}
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="Select..."
                  placement="bottom-start"
                  size="large"
                >
                  <Popover
                    className="emotion-14"
                    content={[Function]}
                    focusTriggerOnClose={true}
                    hasArrow={true}
                    id="select-4"
                    isOpen={false}
                    itemKey="value"
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    onChange={[Function]}
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Select..."
                    placement="bottom-start"
                    size="large"
                    triggerRef={[Function]}
                  >
                    <Manager>
                      <Styled(span)
                        className="emotion-14"
                        content={[Function]}
                        focusTriggerOnClose={true}
                        hasArrow={true}
                        id="select-4"
                        isOpen={false}
                        itemKey="value"
                        onChange={[Function]}
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Select..."
                        placement="bottom-start"
                        size="large"
                        triggerRef={[Function]}
                      >
                        <span
                          className="emotion-13"
                          content={[Function]}
                          id="select-4"
                          onChange={[Function]}
                          onClose={[Function]}
                          onOpen={[Function]}
                          placeholder="Select..."
                          size="large"
                        >
                          <PopoverTrigger
                            aria-describedby="select-4-content"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-owns="select-4-content"
                            isOpen={false}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            placeholder="Select..."
                            role="button"
                            size="large"
                            tabIndex={0}
                            triggerRef={[Function]}
                          >
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <Styled(span)>
                                  <span
                                    className="emotion-12"
                                  >
                                    <SelectTrigger
                                      aria-describedby="select-4-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-4-content"
                                      isOpen={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      placeholder="Select..."
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                      triggerRef={[Function]}
                                    >
                                      <Styled(WithTheme(Themed(FauxControl)))
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-4-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-4-content"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <WithTheme(Themed(FauxControl))
                                          afterItems={
                                            Array [
                                              <withProps(Styled(IconArrowDropdownDown)) />,
                                              <input
                                                onClick={[Function]}
                                                type="hidden"
                                                value=""
                                              />,
                                            ]
                                          }
                                          aria-describedby="select-4-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-4-content"
                                          className="emotion-8"
                                          control={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "__emotion_base": "div",
                                              "__emotion_forwardProp": undefined,
                                              "__emotion_real": [Circular],
                                              "__emotion_styles": Array [
                                                [Function],
                                              ],
                                              "defaultProps": undefined,
                                              "displayName": "Styled(div)",
                                              "render": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          controlProps={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          fauxControlRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                        >
                                          <Themed(FauxControl)
                                            afterItems={
                                              Array [
                                                <withProps(Styled(IconArrowDropdownDown)) />,
                                                <input
                                                  onClick={[Function]}
                                                  type="hidden"
                                                  value=""
                                                />,
                                              ]
                                            }
                                            aria-describedby="select-4-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-4-content"
                                            className="emotion-8"
                                            control={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "__emotion_base": "div",
                                                "__emotion_forwardProp": undefined,
                                                "__emotion_real": [Circular],
                                                "__emotion_styles": Array [
                                                  [Function],
                                                ],
                                                "defaultProps": undefined,
                                                "displayName": "Styled(div)",
                                                "render": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            controlProps={
                                              Object {
                                                "hasPlaceholder": true,
                                                "variant": undefined,
                                              }
                                            }
                                            fauxControlRef={[Function]}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            size="large"
                                            tabIndex={0}
                                          >
                                            <ThemeProvider>
                                              <ThemeProvider>
                                                <FauxControl
                                                  afterItems={
                                                    Array [
                                                      <withProps(Styled(IconArrowDropdownDown)) />,
                                                      <input
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />,
                                                    ]
                                                  }
                                                  aria-describedby="select-4-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-4-content"
                                                  className="emotion-8"
                                                  control={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "__emotion_base": "div",
                                                      "__emotion_forwardProp": undefined,
                                                      "__emotion_real": [Circular],
                                                      "__emotion_styles": Array [
                                                        [Function],
                                                      ],
                                                      "defaultProps": undefined,
                                                      "displayName": "Styled(div)",
                                                      "render": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  controlProps={
                                                    Object {
                                                      "hasPlaceholder": true,
                                                      "variant": undefined,
                                                    }
                                                  }
                                                  fauxControlRef={[Function]}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  size="large"
                                                  tabIndex={0}
                                                >
                                                  <Styled(div)
                                                    aria-describedby="select-4-content"
                                                    aria-expanded={false}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-4-content"
                                                    className="emotion-8"
                                                    control={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "__emotion_base": "div",
                                                        "__emotion_forwardProp": undefined,
                                                        "__emotion_real": [Circular],
                                                        "__emotion_styles": Array [
                                                          [Function],
                                                        ],
                                                        "defaultProps": undefined,
                                                        "displayName": "Styled(div)",
                                                        "render": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    <div
                                                      aria-describedby="select-4-content"
                                                      aria-expanded={false}
                                                      aria-haspopup="listbox"
                                                      aria-owns="select-4-content"
                                                      className="emotion-7"
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      <Styled(div)
                                                        controlPropsIn={
                                                          Object {
                                                            "hasPlaceholder": true,
                                                            "variant": undefined,
                                                          }
                                                        }
                                                        hasPlaceholder={true}
                                                        key="control"
                                                        size="large"
                                                      >
                                                        <div
                                                          className="emotion-1"
                                                          size="large"
                                                        >
                                                          <Styled(span)>
                                                            <span
                                                              className="emotion-0"
                                                            >
                                                              Select...
                                                            </span>
                                                          </Styled(span)>
                                                        </div>
                                                      </Styled(div)>
                                                      <withProps(Styled(IconArrowDropdownDown))
                                                        key="arrow"
                                                      >
                                                        <Styled(IconArrowDropdownDown)
                                                          size="1.5em"
                                                        >
                                                          <IconArrowDropdownDown
                                                            className="emotion-3"
                                                            size="1.5em"
                                                          >
                                                            <Icon
                                                              className="emotion-3"
                                                              rtl={false}
                                                              size="1.5em"
                                                            >
                                                              <Styled(svg)
                                                                aria-hidden={true}
                                                                className="emotion-3"
                                                                focusable="false"
                                                                role="img"
                                                                rtl={false}
                                                                size="1.5em"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="emotion-2"
                                                                  focusable="false"
                                                                  role="img"
                                                                  size="1.5em"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <g>
                                                                    <path
                                                                      d="M12 17.5l-8-8h16z"
                                                                    />
                                                                  </g>
                                                                </svg>
                                                              </Styled(svg)>
                                                            </Icon>
                                                          </IconArrowDropdownDown>
                                                        </Styled(IconArrowDropdownDown)>
                                                      </withProps(Styled(IconArrowDropdownDown))>
                                                      <input
                                                        key="input"
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />
                                                      <Styled(div)>
                                                        <div
                                                          className="emotion-6"
                                                        />
                                                      </Styled(div)>
                                                    </div>
                                                  </Styled(div)>
                                                </FauxControl>
                                              </ThemeProvider>
                                            </ThemeProvider>
                                          </Themed(FauxControl)>
                                        </WithTheme(Themed(FauxControl))>
                                      </Styled(WithTheme(Themed(FauxControl)))>
                                    </SelectTrigger>
                                  </span>
                                </Styled(span)>
                              </InnerReference>
                            </Reference>
                          </PopoverTrigger>
                        </span>
                      </Styled(span)>
                    </Manager>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </WithTheme(Themed(Dropdown))>
      </Styled(WithTheme(Themed(Dropdown)))>
    </Select>
  </MyForm>
</Component>
`;

exports[`Select demo examples Snapshots: custom-item 1`] = `
.emotion-14 {
  width: 100%;
}

.emotion-14 > span {
  width: 100%;
}

.emotion-13 {
  display: inline-block;
  width: 100%;
}

.emotion-13 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-7:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-3 {
  margin: 0.5em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-6 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

<Component>
  <Select
    data={
      Array [
        Object {
          "avatar": "/images/avatar.svg",
          "text": "Newton",
          "value": "newton",
          "work": "Principia Mathematica",
        },
        Object {
          "avatar": "/images/avatar.svg",
          "text": "Descartes",
          "value": "descartes",
          "work": "La Géométrie",
        },
        Object {
          "avatar": "/images/avatar.svg",
          "text": "Euclid",
          "value": "euclid",
          "work": "Elements",
        },
      ]
    }
    item={[Function]}
    itemKey="value"
    placeholder="Select..."
    placement="bottom-start"
    size="large"
  >
    <Styled(WithTheme(Themed(Dropdown)))
      data={
        Array [
          Object {
            "avatar": "/images/avatar.svg",
            "text": "Newton",
            "value": "newton",
            "work": "Principia Mathematica",
          },
          Object {
            "avatar": "/images/avatar.svg",
            "text": "Descartes",
            "value": "descartes",
            "work": "La Géométrie",
          },
          Object {
            "avatar": "/images/avatar.svg",
            "text": "Euclid",
            "value": "euclid",
            "work": "Elements",
          },
        ]
      }
      id="select-71"
      isOpen={false}
      item={[Function]}
      itemKey="value"
      menu={[Function]}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      onClose={[Function]}
      onOpen={[Function]}
      placeholder="Select..."
      placement="bottom-start"
      size="large"
    >
      <WithTheme(Themed(Dropdown))
        className="emotion-14"
        data={
          Array [
            Object {
              "avatar": "/images/avatar.svg",
              "text": "Newton",
              "value": "newton",
              "work": "Principia Mathematica",
            },
            Object {
              "avatar": "/images/avatar.svg",
              "text": "Descartes",
              "value": "descartes",
              "work": "La Géométrie",
            },
            Object {
              "avatar": "/images/avatar.svg",
              "text": "Euclid",
              "value": "euclid",
              "work": "Elements",
            },
          ]
        }
        id="select-71"
        isOpen={false}
        item={[Function]}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Select..."
        placement="bottom-start"
        size="large"
      >
        <Themed(Dropdown)
          className="emotion-14"
          data={
            Array [
              Object {
                "avatar": "/images/avatar.svg",
                "text": "Newton",
                "value": "newton",
                "work": "Principia Mathematica",
              },
              Object {
                "avatar": "/images/avatar.svg",
                "text": "Descartes",
                "value": "descartes",
                "work": "La Géométrie",
              },
              Object {
                "avatar": "/images/avatar.svg",
                "text": "Euclid",
                "value": "euclid",
                "work": "Elements",
              },
            ]
          }
          id="select-71"
          isOpen={false}
          item={[Function]}
          itemKey="value"
          menu={[Function]}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placeholder="Select..."
          placement="bottom-start"
          size="large"
        >
          <ThemeProvider>
            <ThemeProvider>
              <Dropdown
                className="emotion-14"
                data={
                  Array [
                    Object {
                      "avatar": "/images/avatar.svg",
                      "text": "Newton",
                      "value": "newton",
                      "work": "Principia Mathematica",
                    },
                    Object {
                      "avatar": "/images/avatar.svg",
                      "text": "Descartes",
                      "value": "descartes",
                      "work": "La Géométrie",
                    },
                    Object {
                      "avatar": "/images/avatar.svg",
                      "text": "Euclid",
                      "value": "euclid",
                      "work": "Elements",
                    },
                  ]
                }
                id="select-71"
                isOpen={false}
                item={[Function]}
                itemKey="value"
                menu={[Function]}
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placeholder="Select..."
                placement="bottom-start"
                size="large"
              >
                <Popover
                  className="emotion-14"
                  content={[Function]}
                  focusTriggerOnClose={true}
                  hasArrow={true}
                  id="select-71"
                  isOpen={false}
                  itemKey="value"
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="Select..."
                  placement="bottom-start"
                  size="large"
                  triggerRef={[Function]}
                >
                  <Manager>
                    <Styled(span)
                      className="emotion-14"
                      content={[Function]}
                      focusTriggerOnClose={true}
                      hasArrow={true}
                      id="select-71"
                      isOpen={false}
                      itemKey="value"
                      onClose={[Function]}
                      onOpen={[Function]}
                      placeholder="Select..."
                      placement="bottom-start"
                      size="large"
                      triggerRef={[Function]}
                    >
                      <span
                        className="emotion-13"
                        content={[Function]}
                        id="select-71"
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Select..."
                        size="large"
                      >
                        <PopoverTrigger
                          aria-describedby="select-71-content"
                          aria-expanded={false}
                          aria-haspopup="listbox"
                          aria-owns="select-71-content"
                          isOpen={false}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select..."
                          role="button"
                          size="large"
                          tabIndex={0}
                          triggerRef={[Function]}
                        >
                          <Reference>
                            <InnerReference
                              getReferenceRef={[Function]}
                            >
                              <Styled(span)>
                                <span
                                  className="emotion-12"
                                >
                                  <SelectTrigger
                                    aria-describedby="select-71-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-71-content"
                                    isOpen={false}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    placeholder="Select..."
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                    triggerRef={[Function]}
                                  >
                                    <Styled(WithTheme(Themed(FauxControl)))
                                      afterItems={
                                        Array [
                                          <withProps(Styled(IconArrowDropdownDown)) />,
                                          <input
                                            onClick={[Function]}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-71-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-71-content"
                                      control={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "__emotion_base": "div",
                                          "__emotion_forwardProp": undefined,
                                          "__emotion_real": [Circular],
                                          "__emotion_styles": Array [
                                            [Function],
                                          ],
                                          "defaultProps": undefined,
                                          "displayName": "Styled(div)",
                                          "render": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                    >
                                      <WithTheme(Themed(FauxControl))
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-71-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-71-content"
                                        className="emotion-8"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <Themed(FauxControl)
                                          afterItems={
                                            Array [
                                              <withProps(Styled(IconArrowDropdownDown)) />,
                                              <input
                                                onClick={[Function]}
                                                type="hidden"
                                                value=""
                                              />,
                                            ]
                                          }
                                          aria-describedby="select-71-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-71-content"
                                          className="emotion-8"
                                          control={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "__emotion_base": "div",
                                              "__emotion_forwardProp": undefined,
                                              "__emotion_real": [Circular],
                                              "__emotion_styles": Array [
                                                [Function],
                                              ],
                                              "defaultProps": undefined,
                                              "displayName": "Styled(div)",
                                              "render": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          controlProps={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          fauxControlRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                        >
                                          <ThemeProvider>
                                            <ThemeProvider>
                                              <FauxControl
                                                afterItems={
                                                  Array [
                                                    <withProps(Styled(IconArrowDropdownDown)) />,
                                                    <input
                                                      onClick={[Function]}
                                                      type="hidden"
                                                      value=""
                                                    />,
                                                  ]
                                                }
                                                aria-describedby="select-71-content"
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-owns="select-71-content"
                                                className="emotion-8"
                                                control={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "__emotion_base": "div",
                                                    "__emotion_forwardProp": undefined,
                                                    "__emotion_real": [Circular],
                                                    "__emotion_styles": Array [
                                                      [Function],
                                                    ],
                                                    "defaultProps": undefined,
                                                    "displayName": "Styled(div)",
                                                    "render": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                controlProps={
                                                  Object {
                                                    "hasPlaceholder": true,
                                                    "variant": undefined,
                                                  }
                                                }
                                                fauxControlRef={[Function]}
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                size="large"
                                                tabIndex={0}
                                              >
                                                <Styled(div)
                                                  aria-describedby="select-71-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-71-content"
                                                  className="emotion-8"
                                                  control={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "__emotion_base": "div",
                                                      "__emotion_forwardProp": undefined,
                                                      "__emotion_real": [Circular],
                                                      "__emotion_styles": Array [
                                                        [Function],
                                                      ],
                                                      "defaultProps": undefined,
                                                      "displayName": "Styled(div)",
                                                      "render": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <div
                                                    aria-describedby="select-71-content"
                                                    aria-expanded={false}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-71-content"
                                                    className="emotion-7"
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    <Styled(div)
                                                      controlPropsIn={
                                                        Object {
                                                          "hasPlaceholder": true,
                                                          "variant": undefined,
                                                        }
                                                      }
                                                      hasPlaceholder={true}
                                                      key="control"
                                                      size="large"
                                                    >
                                                      <div
                                                        className="emotion-1"
                                                        size="large"
                                                      >
                                                        <Styled(span)>
                                                          <span
                                                            className="emotion-0"
                                                          >
                                                            Select...
                                                          </span>
                                                        </Styled(span)>
                                                      </div>
                                                    </Styled(div)>
                                                    <withProps(Styled(IconArrowDropdownDown))
                                                      key="arrow"
                                                    >
                                                      <Styled(IconArrowDropdownDown)
                                                        size="1.5em"
                                                      >
                                                        <IconArrowDropdownDown
                                                          className="emotion-3"
                                                          size="1.5em"
                                                        >
                                                          <Icon
                                                            className="emotion-3"
                                                            rtl={false}
                                                            size="1.5em"
                                                          >
                                                            <Styled(svg)
                                                              aria-hidden={true}
                                                              className="emotion-3"
                                                              focusable="false"
                                                              role="img"
                                                              rtl={false}
                                                              size="1.5em"
                                                              viewBox="0 0 24 24"
                                                            >
                                                              <svg
                                                                aria-hidden={true}
                                                                className="emotion-2"
                                                                focusable="false"
                                                                role="img"
                                                                size="1.5em"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <g>
                                                                  <path
                                                                    d="M12 17.5l-8-8h16z"
                                                                  />
                                                                </g>
                                                              </svg>
                                                            </Styled(svg)>
                                                          </Icon>
                                                        </IconArrowDropdownDown>
                                                      </Styled(IconArrowDropdownDown)>
                                                    </withProps(Styled(IconArrowDropdownDown))>
                                                    <input
                                                      key="input"
                                                      onClick={[Function]}
                                                      type="hidden"
                                                      value=""
                                                    />
                                                    <Styled(div)>
                                                      <div
                                                        className="emotion-6"
                                                      />
                                                    </Styled(div)>
                                                  </div>
                                                </Styled(div)>
                                              </FauxControl>
                                            </ThemeProvider>
                                          </ThemeProvider>
                                        </Themed(FauxControl)>
                                      </WithTheme(Themed(FauxControl))>
                                    </Styled(WithTheme(Themed(FauxControl)))>
                                  </SelectTrigger>
                                </span>
                              </Styled(span)>
                            </InnerReference>
                          </Reference>
                        </PopoverTrigger>
                      </span>
                    </Styled(span)>
                  </Manager>
                </Popover>
              </Dropdown>
            </ThemeProvider>
          </ThemeProvider>
        </Themed(Dropdown)>
      </WithTheme(Themed(Dropdown))>
    </Styled(WithTheme(Themed(Dropdown)))>
  </Select>
</Component>
`;

exports[`Select demo examples Snapshots: custom-menu 1`] = `
.emotion-14 {
  width: 100%;
}

.emotion-14 > span {
  width: 100%;
}

.emotion-13 {
  display: inline-block;
  width: 100%;
}

.emotion-13 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-7:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-3 {
  margin: 0.5em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-6 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

<Component>
  <Select
    data={
      Array [
        Object {
          "text": "Alpha",
          "value": "alpha",
        },
        Object {
          "text": "Beta",
          "value": "beta",
        },
        Object {
          "text": "Gamma",
          "value": "gamma",
        },
      ]
    }
    itemKey="value"
    menu={[Function]}
    placeholder="Select..."
    placement="bottom-start"
    size="large"
  >
    <Styled(WithTheme(Themed(Dropdown)))
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      id="select-74"
      isOpen={false}
      itemKey="value"
      menu={[Function]}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      onClose={[Function]}
      onOpen={[Function]}
      placeholder="Select..."
      placement="bottom-start"
      size="large"
    >
      <WithTheme(Themed(Dropdown))
        className="emotion-14"
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        id="select-74"
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Select..."
        placement="bottom-start"
        size="large"
      >
        <Themed(Dropdown)
          className="emotion-14"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          id="select-74"
          isOpen={false}
          itemKey="value"
          menu={[Function]}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placeholder="Select..."
          placement="bottom-start"
          size="large"
        >
          <ThemeProvider>
            <ThemeProvider>
              <Dropdown
                className="emotion-14"
                data={
                  Array [
                    Object {
                      "text": "Alpha",
                      "value": "alpha",
                    },
                    Object {
                      "text": "Beta",
                      "value": "beta",
                    },
                    Object {
                      "text": "Gamma",
                      "value": "gamma",
                    },
                  ]
                }
                id="select-74"
                isOpen={false}
                itemKey="value"
                menu={[Function]}
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placeholder="Select..."
                placement="bottom-start"
                size="large"
              >
                <Popover
                  className="emotion-14"
                  content={[Function]}
                  focusTriggerOnClose={true}
                  hasArrow={true}
                  id="select-74"
                  isOpen={false}
                  itemKey="value"
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="Select..."
                  placement="bottom-start"
                  size="large"
                  triggerRef={[Function]}
                >
                  <Manager>
                    <Styled(span)
                      className="emotion-14"
                      content={[Function]}
                      focusTriggerOnClose={true}
                      hasArrow={true}
                      id="select-74"
                      isOpen={false}
                      itemKey="value"
                      onClose={[Function]}
                      onOpen={[Function]}
                      placeholder="Select..."
                      placement="bottom-start"
                      size="large"
                      triggerRef={[Function]}
                    >
                      <span
                        className="emotion-13"
                        content={[Function]}
                        id="select-74"
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Select..."
                        size="large"
                      >
                        <PopoverTrigger
                          aria-describedby="select-74-content"
                          aria-expanded={false}
                          aria-haspopup="listbox"
                          aria-owns="select-74-content"
                          isOpen={false}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select..."
                          role="button"
                          size="large"
                          tabIndex={0}
                          triggerRef={[Function]}
                        >
                          <Reference>
                            <InnerReference
                              getReferenceRef={[Function]}
                            >
                              <Styled(span)>
                                <span
                                  className="emotion-12"
                                >
                                  <SelectTrigger
                                    aria-describedby="select-74-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-74-content"
                                    isOpen={false}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    placeholder="Select..."
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                    triggerRef={[Function]}
                                  >
                                    <Styled(WithTheme(Themed(FauxControl)))
                                      afterItems={
                                        Array [
                                          <withProps(Styled(IconArrowDropdownDown)) />,
                                          <input
                                            onClick={[Function]}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-74-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-74-content"
                                      control={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "__emotion_base": "div",
                                          "__emotion_forwardProp": undefined,
                                          "__emotion_real": [Circular],
                                          "__emotion_styles": Array [
                                            [Function],
                                          ],
                                          "defaultProps": undefined,
                                          "displayName": "Styled(div)",
                                          "render": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                    >
                                      <WithTheme(Themed(FauxControl))
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-74-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-74-content"
                                        className="emotion-8"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <Themed(FauxControl)
                                          afterItems={
                                            Array [
                                              <withProps(Styled(IconArrowDropdownDown)) />,
                                              <input
                                                onClick={[Function]}
                                                type="hidden"
                                                value=""
                                              />,
                                            ]
                                          }
                                          aria-describedby="select-74-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-74-content"
                                          className="emotion-8"
                                          control={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "__emotion_base": "div",
                                              "__emotion_forwardProp": undefined,
                                              "__emotion_real": [Circular],
                                              "__emotion_styles": Array [
                                                [Function],
                                              ],
                                              "defaultProps": undefined,
                                              "displayName": "Styled(div)",
                                              "render": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          controlProps={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          fauxControlRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                        >
                                          <ThemeProvider>
                                            <ThemeProvider>
                                              <FauxControl
                                                afterItems={
                                                  Array [
                                                    <withProps(Styled(IconArrowDropdownDown)) />,
                                                    <input
                                                      onClick={[Function]}
                                                      type="hidden"
                                                      value=""
                                                    />,
                                                  ]
                                                }
                                                aria-describedby="select-74-content"
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-owns="select-74-content"
                                                className="emotion-8"
                                                control={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "__emotion_base": "div",
                                                    "__emotion_forwardProp": undefined,
                                                    "__emotion_real": [Circular],
                                                    "__emotion_styles": Array [
                                                      [Function],
                                                    ],
                                                    "defaultProps": undefined,
                                                    "displayName": "Styled(div)",
                                                    "render": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                controlProps={
                                                  Object {
                                                    "hasPlaceholder": true,
                                                    "variant": undefined,
                                                  }
                                                }
                                                fauxControlRef={[Function]}
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                size="large"
                                                tabIndex={0}
                                              >
                                                <Styled(div)
                                                  aria-describedby="select-74-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-74-content"
                                                  className="emotion-8"
                                                  control={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "__emotion_base": "div",
                                                      "__emotion_forwardProp": undefined,
                                                      "__emotion_real": [Circular],
                                                      "__emotion_styles": Array [
                                                        [Function],
                                                      ],
                                                      "defaultProps": undefined,
                                                      "displayName": "Styled(div)",
                                                      "render": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <div
                                                    aria-describedby="select-74-content"
                                                    aria-expanded={false}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-74-content"
                                                    className="emotion-7"
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    <Styled(div)
                                                      controlPropsIn={
                                                        Object {
                                                          "hasPlaceholder": true,
                                                          "variant": undefined,
                                                        }
                                                      }
                                                      hasPlaceholder={true}
                                                      key="control"
                                                      size="large"
                                                    >
                                                      <div
                                                        className="emotion-1"
                                                        size="large"
                                                      >
                                                        <Styled(span)>
                                                          <span
                                                            className="emotion-0"
                                                          >
                                                            Select...
                                                          </span>
                                                        </Styled(span)>
                                                      </div>
                                                    </Styled(div)>
                                                    <withProps(Styled(IconArrowDropdownDown))
                                                      key="arrow"
                                                    >
                                                      <Styled(IconArrowDropdownDown)
                                                        size="1.5em"
                                                      >
                                                        <IconArrowDropdownDown
                                                          className="emotion-3"
                                                          size="1.5em"
                                                        >
                                                          <Icon
                                                            className="emotion-3"
                                                            rtl={false}
                                                            size="1.5em"
                                                          >
                                                            <Styled(svg)
                                                              aria-hidden={true}
                                                              className="emotion-3"
                                                              focusable="false"
                                                              role="img"
                                                              rtl={false}
                                                              size="1.5em"
                                                              viewBox="0 0 24 24"
                                                            >
                                                              <svg
                                                                aria-hidden={true}
                                                                className="emotion-2"
                                                                focusable="false"
                                                                role="img"
                                                                size="1.5em"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <g>
                                                                  <path
                                                                    d="M12 17.5l-8-8h16z"
                                                                  />
                                                                </g>
                                                              </svg>
                                                            </Styled(svg)>
                                                          </Icon>
                                                        </IconArrowDropdownDown>
                                                      </Styled(IconArrowDropdownDown)>
                                                    </withProps(Styled(IconArrowDropdownDown))>
                                                    <input
                                                      key="input"
                                                      onClick={[Function]}
                                                      type="hidden"
                                                      value=""
                                                    />
                                                    <Styled(div)>
                                                      <div
                                                        className="emotion-6"
                                                      />
                                                    </Styled(div)>
                                                  </div>
                                                </Styled(div)>
                                              </FauxControl>
                                            </ThemeProvider>
                                          </ThemeProvider>
                                        </Themed(FauxControl)>
                                      </WithTheme(Themed(FauxControl))>
                                    </Styled(WithTheme(Themed(FauxControl)))>
                                  </SelectTrigger>
                                </span>
                              </Styled(span)>
                            </InnerReference>
                          </Reference>
                        </PopoverTrigger>
                      </span>
                    </Styled(span)>
                  </Manager>
                </Popover>
              </Dropdown>
            </ThemeProvider>
          </ThemeProvider>
        </Themed(Dropdown)>
      </WithTheme(Themed(Dropdown))>
    </Styled(WithTheme(Themed(Dropdown)))>
  </Select>
</Component>
`;

exports[`Select demo examples Snapshots: custom-trigger 1`] = `
.emotion-2 {
  width: 100%;
}

.emotion-2 > span {
  width: 100%;
}

.emotion-1 {
  display: inline-block;
  width: 100%;
}

.emotion-1 > span {
  width: 100%;
}

<Component>
  <Select
    data={
      Array [
        Object {
          "text": "Alpha",
          "value": "alpha",
        },
        Object {
          "text": "Beta",
          "value": "beta",
        },
        Object {
          "text": "Gamma",
          "value": "gamma",
        },
      ]
    }
    itemKey="value"
    placeholder="Select..."
    placement="bottom-start"
    size="large"
    trigger={[Function]}
  >
    <Styled(WithTheme(Themed(Dropdown)))
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      id="select-77"
      isOpen={false}
      itemKey="value"
      menu={[Function]}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      onClose={[Function]}
      onOpen={[Function]}
      placeholder="Select..."
      placement="bottom-start"
      size="large"
    >
      <WithTheme(Themed(Dropdown))
        className="emotion-2"
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        id="select-77"
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Select..."
        placement="bottom-start"
        size="large"
      >
        <Themed(Dropdown)
          className="emotion-2"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          id="select-77"
          isOpen={false}
          itemKey="value"
          menu={[Function]}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placeholder="Select..."
          placement="bottom-start"
          size="large"
        >
          <ThemeProvider>
            <ThemeProvider>
              <Dropdown
                className="emotion-2"
                data={
                  Array [
                    Object {
                      "text": "Alpha",
                      "value": "alpha",
                    },
                    Object {
                      "text": "Beta",
                      "value": "beta",
                    },
                    Object {
                      "text": "Gamma",
                      "value": "gamma",
                    },
                  ]
                }
                id="select-77"
                isOpen={false}
                itemKey="value"
                menu={[Function]}
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placeholder="Select..."
                placement="bottom-start"
                size="large"
              >
                <Popover
                  className="emotion-2"
                  content={[Function]}
                  focusTriggerOnClose={true}
                  hasArrow={true}
                  id="select-77"
                  isOpen={false}
                  itemKey="value"
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="Select..."
                  placement="bottom-start"
                  size="large"
                  triggerRef={[Function]}
                >
                  <Manager>
                    <Styled(span)
                      className="emotion-2"
                      content={[Function]}
                      focusTriggerOnClose={true}
                      hasArrow={true}
                      id="select-77"
                      isOpen={false}
                      itemKey="value"
                      onClose={[Function]}
                      onOpen={[Function]}
                      placeholder="Select..."
                      placement="bottom-start"
                      size="large"
                      triggerRef={[Function]}
                    >
                      <span
                        className="emotion-1"
                        content={[Function]}
                        id="select-77"
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Select..."
                        size="large"
                      >
                        <Reference>
                          <InnerReference
                            getReferenceRef={[Function]}
                          >
                            <Styled(button)
                              aria-describedby="select-77-content"
                              aria-expanded={false}
                              aria-haspopup="listbox"
                              aria-owns="select-77-content"
                              isOpen={false}
                              onBlur={[Function]}
                              onClick={[Function]}
                              onKeyDown={[Function]}
                              onKeyUp={[Function]}
                              placeholder="Select..."
                              size="large"
                              tabIndex={0}
                            >
                              <button
                                aria-describedby="select-77-content"
                                aria-expanded={false}
                                aria-haspopup="listbox"
                                aria-owns="select-77-content"
                                className="emotion-0"
                                onBlur={[Function]}
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                placeholder="Select..."
                                size="large"
                                tabIndex={0}
                              >
                                Please select...
                                 
                                <span
                                  aria-hidden="true"
                                  role="img"
                                >
                                  ▼
                                </span>
                              </button>
                            </Styled(button)>
                          </InnerReference>
                        </Reference>
                      </span>
                    </Styled(span)>
                  </Manager>
                </Popover>
              </Dropdown>
            </ThemeProvider>
          </ThemeProvider>
        </Themed(Dropdown)>
      </WithTheme(Themed(Dropdown))>
    </Styled(WithTheme(Themed(Dropdown)))>
  </Select>
</Component>
`;

exports[`Select demo examples Snapshots: data 1`] = `
.emotion-14 {
  width: 100%;
}

.emotion-14 > span {
  width: 100%;
}

.emotion-13 {
  display: inline-block;
  width: 100%;
}

.emotion-13 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-7:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-3 {
  margin: 0.5em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-6 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

<Component>
  <Select
    data={
      Array [
        Object {
          "secondaryText": "Secondary text",
          "text": "Menu item",
          "value": "basic",
        },
        Object {
          "iconStart": <IconCloud />,
          "text": "Icon at start",
          "value": "iconStart",
        },
        Object {
          "iconEnd": <IconCloud />,
          "text": "Icon at end",
          "value": "iconEnd",
        },
        Object {
          "divider": true,
        },
        Object {
          "disabled": true,
          "onClick": [Function],
          "text": "Disabled menu item",
          "value": "disabled",
        },
        Object {
          "group": true,
          "title": "Group Title",
        },
        Object {
          "text": "Success variant",
          "value": "success",
          "variant": "success",
        },
        Object {
          "text": "Warning variant",
          "value": "warning",
          "variant": "warning",
        },
        Object {
          "text": "Danger variant",
          "value": "danger",
          "variant": "danger",
        },
      ]
    }
    itemKey="value"
    placeholder="Select..."
    placement="bottom-start"
    size="large"
  >
    <Styled(WithTheme(Themed(Dropdown)))
      data={
        Array [
          Object {
            "secondaryText": "Secondary text",
            "text": "Menu item",
            "value": "basic",
          },
          Object {
            "iconStart": <IconCloud />,
            "text": "Icon at start",
            "value": "iconStart",
          },
          Object {
            "iconEnd": <IconCloud />,
            "text": "Icon at end",
            "value": "iconEnd",
          },
          Object {
            "divider": true,
          },
          Object {
            "disabled": true,
            "onClick": [Function],
            "text": "Disabled menu item",
            "value": "disabled",
          },
          Object {
            "group": true,
            "title": "Group Title",
          },
          Object {
            "text": "Success variant",
            "value": "success",
            "variant": "success",
          },
          Object {
            "text": "Warning variant",
            "value": "warning",
            "variant": "warning",
          },
          Object {
            "text": "Danger variant",
            "value": "danger",
            "variant": "danger",
          },
        ]
      }
      id="select-7"
      isOpen={false}
      itemKey="value"
      menu={[Function]}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      onClose={[Function]}
      onOpen={[Function]}
      placeholder="Select..."
      placement="bottom-start"
      size="large"
    >
      <WithTheme(Themed(Dropdown))
        className="emotion-14"
        data={
          Array [
            Object {
              "secondaryText": "Secondary text",
              "text": "Menu item",
              "value": "basic",
            },
            Object {
              "iconStart": <IconCloud />,
              "text": "Icon at start",
              "value": "iconStart",
            },
            Object {
              "iconEnd": <IconCloud />,
              "text": "Icon at end",
              "value": "iconEnd",
            },
            Object {
              "divider": true,
            },
            Object {
              "disabled": true,
              "onClick": [Function],
              "text": "Disabled menu item",
              "value": "disabled",
            },
            Object {
              "group": true,
              "title": "Group Title",
            },
            Object {
              "text": "Success variant",
              "value": "success",
              "variant": "success",
            },
            Object {
              "text": "Warning variant",
              "value": "warning",
              "variant": "warning",
            },
            Object {
              "text": "Danger variant",
              "value": "danger",
              "variant": "danger",
            },
          ]
        }
        id="select-7"
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Select..."
        placement="bottom-start"
        size="large"
      >
        <Themed(Dropdown)
          className="emotion-14"
          data={
            Array [
              Object {
                "secondaryText": "Secondary text",
                "text": "Menu item",
                "value": "basic",
              },
              Object {
                "iconStart": <IconCloud />,
                "text": "Icon at start",
                "value": "iconStart",
              },
              Object {
                "iconEnd": <IconCloud />,
                "text": "Icon at end",
                "value": "iconEnd",
              },
              Object {
                "divider": true,
              },
              Object {
                "disabled": true,
                "onClick": [Function],
                "text": "Disabled menu item",
                "value": "disabled",
              },
              Object {
                "group": true,
                "title": "Group Title",
              },
              Object {
                "text": "Success variant",
                "value": "success",
                "variant": "success",
              },
              Object {
                "text": "Warning variant",
                "value": "warning",
                "variant": "warning",
              },
              Object {
                "text": "Danger variant",
                "value": "danger",
                "variant": "danger",
              },
            ]
          }
          id="select-7"
          isOpen={false}
          itemKey="value"
          menu={[Function]}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placeholder="Select..."
          placement="bottom-start"
          size="large"
        >
          <ThemeProvider>
            <ThemeProvider>
              <Dropdown
                className="emotion-14"
                data={
                  Array [
                    Object {
                      "secondaryText": "Secondary text",
                      "text": "Menu item",
                      "value": "basic",
                    },
                    Object {
                      "iconStart": <IconCloud />,
                      "text": "Icon at start",
                      "value": "iconStart",
                    },
                    Object {
                      "iconEnd": <IconCloud />,
                      "text": "Icon at end",
                      "value": "iconEnd",
                    },
                    Object {
                      "divider": true,
                    },
                    Object {
                      "disabled": true,
                      "onClick": [Function],
                      "text": "Disabled menu item",
                      "value": "disabled",
                    },
                    Object {
                      "group": true,
                      "title": "Group Title",
                    },
                    Object {
                      "text": "Success variant",
                      "value": "success",
                      "variant": "success",
                    },
                    Object {
                      "text": "Warning variant",
                      "value": "warning",
                      "variant": "warning",
                    },
                    Object {
                      "text": "Danger variant",
                      "value": "danger",
                      "variant": "danger",
                    },
                  ]
                }
                id="select-7"
                isOpen={false}
                itemKey="value"
                menu={[Function]}
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placeholder="Select..."
                placement="bottom-start"
                size="large"
              >
                <Popover
                  className="emotion-14"
                  content={[Function]}
                  focusTriggerOnClose={true}
                  hasArrow={true}
                  id="select-7"
                  isOpen={false}
                  itemKey="value"
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="Select..."
                  placement="bottom-start"
                  size="large"
                  triggerRef={[Function]}
                >
                  <Manager>
                    <Styled(span)
                      className="emotion-14"
                      content={[Function]}
                      focusTriggerOnClose={true}
                      hasArrow={true}
                      id="select-7"
                      isOpen={false}
                      itemKey="value"
                      onClose={[Function]}
                      onOpen={[Function]}
                      placeholder="Select..."
                      placement="bottom-start"
                      size="large"
                      triggerRef={[Function]}
                    >
                      <span
                        className="emotion-13"
                        content={[Function]}
                        id="select-7"
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Select..."
                        size="large"
                      >
                        <PopoverTrigger
                          aria-describedby="select-7-content"
                          aria-expanded={false}
                          aria-haspopup="listbox"
                          aria-owns="select-7-content"
                          isOpen={false}
                          onBlur={[Function]}
                          onClick={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          placeholder="Select..."
                          role="button"
                          size="large"
                          tabIndex={0}
                          triggerRef={[Function]}
                        >
                          <Reference>
                            <InnerReference
                              getReferenceRef={[Function]}
                            >
                              <Styled(span)>
                                <span
                                  className="emotion-12"
                                >
                                  <SelectTrigger
                                    aria-describedby="select-7-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-7-content"
                                    isOpen={false}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    placeholder="Select..."
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                    triggerRef={[Function]}
                                  >
                                    <Styled(WithTheme(Themed(FauxControl)))
                                      afterItems={
                                        Array [
                                          <withProps(Styled(IconArrowDropdownDown)) />,
                                          <input
                                            onClick={[Function]}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-7-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-7-content"
                                      control={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "__emotion_base": "div",
                                          "__emotion_forwardProp": undefined,
                                          "__emotion_real": [Circular],
                                          "__emotion_styles": Array [
                                            [Function],
                                          ],
                                          "defaultProps": undefined,
                                          "displayName": "Styled(div)",
                                          "render": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                    >
                                      <WithTheme(Themed(FauxControl))
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-7-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-7-content"
                                        className="emotion-8"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <Themed(FauxControl)
                                          afterItems={
                                            Array [
                                              <withProps(Styled(IconArrowDropdownDown)) />,
                                              <input
                                                onClick={[Function]}
                                                type="hidden"
                                                value=""
                                              />,
                                            ]
                                          }
                                          aria-describedby="select-7-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-7-content"
                                          className="emotion-8"
                                          control={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "__emotion_base": "div",
                                              "__emotion_forwardProp": undefined,
                                              "__emotion_real": [Circular],
                                              "__emotion_styles": Array [
                                                [Function],
                                              ],
                                              "defaultProps": undefined,
                                              "displayName": "Styled(div)",
                                              "render": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          controlProps={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          fauxControlRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                        >
                                          <ThemeProvider>
                                            <ThemeProvider>
                                              <FauxControl
                                                afterItems={
                                                  Array [
                                                    <withProps(Styled(IconArrowDropdownDown)) />,
                                                    <input
                                                      onClick={[Function]}
                                                      type="hidden"
                                                      value=""
                                                    />,
                                                  ]
                                                }
                                                aria-describedby="select-7-content"
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-owns="select-7-content"
                                                className="emotion-8"
                                                control={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "__emotion_base": "div",
                                                    "__emotion_forwardProp": undefined,
                                                    "__emotion_real": [Circular],
                                                    "__emotion_styles": Array [
                                                      [Function],
                                                    ],
                                                    "defaultProps": undefined,
                                                    "displayName": "Styled(div)",
                                                    "render": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                controlProps={
                                                  Object {
                                                    "hasPlaceholder": true,
                                                    "variant": undefined,
                                                  }
                                                }
                                                fauxControlRef={[Function]}
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                size="large"
                                                tabIndex={0}
                                              >
                                                <Styled(div)
                                                  aria-describedby="select-7-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-7-content"
                                                  className="emotion-8"
                                                  control={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "__emotion_base": "div",
                                                      "__emotion_forwardProp": undefined,
                                                      "__emotion_real": [Circular],
                                                      "__emotion_styles": Array [
                                                        [Function],
                                                      ],
                                                      "defaultProps": undefined,
                                                      "displayName": "Styled(div)",
                                                      "render": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <div
                                                    aria-describedby="select-7-content"
                                                    aria-expanded={false}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-7-content"
                                                    className="emotion-7"
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    <Styled(div)
                                                      controlPropsIn={
                                                        Object {
                                                          "hasPlaceholder": true,
                                                          "variant": undefined,
                                                        }
                                                      }
                                                      hasPlaceholder={true}
                                                      key="control"
                                                      size="large"
                                                    >
                                                      <div
                                                        className="emotion-1"
                                                        size="large"
                                                      >
                                                        <Styled(span)>
                                                          <span
                                                            className="emotion-0"
                                                          >
                                                            Select...
                                                          </span>
                                                        </Styled(span)>
                                                      </div>
                                                    </Styled(div)>
                                                    <withProps(Styled(IconArrowDropdownDown))
                                                      key="arrow"
                                                    >
                                                      <Styled(IconArrowDropdownDown)
                                                        size="1.5em"
                                                      >
                                                        <IconArrowDropdownDown
                                                          className="emotion-3"
                                                          size="1.5em"
                                                        >
                                                          <Icon
                                                            className="emotion-3"
                                                            rtl={false}
                                                            size="1.5em"
                                                          >
                                                            <Styled(svg)
                                                              aria-hidden={true}
                                                              className="emotion-3"
                                                              focusable="false"
                                                              role="img"
                                                              rtl={false}
                                                              size="1.5em"
                                                              viewBox="0 0 24 24"
                                                            >
                                                              <svg
                                                                aria-hidden={true}
                                                                className="emotion-2"
                                                                focusable="false"
                                                                role="img"
                                                                size="1.5em"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <g>
                                                                  <path
                                                                    d="M12 17.5l-8-8h16z"
                                                                  />
                                                                </g>
                                                              </svg>
                                                            </Styled(svg)>
                                                          </Icon>
                                                        </IconArrowDropdownDown>
                                                      </Styled(IconArrowDropdownDown)>
                                                    </withProps(Styled(IconArrowDropdownDown))>
                                                    <input
                                                      key="input"
                                                      onClick={[Function]}
                                                      type="hidden"
                                                      value=""
                                                    />
                                                    <Styled(div)>
                                                      <div
                                                        className="emotion-6"
                                                      />
                                                    </Styled(div)>
                                                  </div>
                                                </Styled(div)>
                                              </FauxControl>
                                            </ThemeProvider>
                                          </ThemeProvider>
                                        </Themed(FauxControl)>
                                      </WithTheme(Themed(FauxControl))>
                                    </Styled(WithTheme(Themed(FauxControl)))>
                                  </SelectTrigger>
                                </span>
                              </Styled(span)>
                            </InnerReference>
                          </Reference>
                        </PopoverTrigger>
                      </span>
                    </Styled(span)>
                  </Manager>
                </Popover>
              </Dropdown>
            </ThemeProvider>
          </ThemeProvider>
        </Themed(Dropdown)>
      </WithTheme(Themed(Dropdown))>
    </Styled(WithTheme(Themed(Dropdown)))>
  </Select>
</Component>
`;

exports[`Select demo examples Snapshots: disabled 1`] = `
.emotion-14 {
  width: 100%;
}

.emotion-14 > span {
  width: 100%;
}

.emotion-13 {
  display: inline-block;
  width: 100%;
}

.emotion-13 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-3 {
  margin: 0.5em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #afbacc;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #afbacc;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #afbacc;
  margin-left: 0.5em;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: none;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #afbacc;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #afbacc;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #afbacc;
  margin-left: 0.5em;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #afbacc;
  -webkit-text-fill-color: #afbacc;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-6 {
  background-color: #ebeff5;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

<Select
  data={
    Array [
      Object {
        "text": "Alpha",
        "value": "alpha",
      },
      Object {
        "text": "Beta",
        "value": "beta",
      },
      Object {
        "text": "Gamma",
        "value": "gamma",
      },
    ]
  }
  disabled={true}
  itemKey="value"
  placeholder="Select..."
  placement="bottom-start"
  size="large"
>
  <Styled(WithTheme(Themed(Dropdown)))
    data={
      Array [
        Object {
          "text": "Alpha",
          "value": "alpha",
        },
        Object {
          "text": "Beta",
          "value": "beta",
        },
        Object {
          "text": "Gamma",
          "value": "gamma",
        },
      ]
    }
    disabled={true}
    id="select-13"
    isOpen={false}
    itemKey="value"
    menu={[Function]}
    modifiers={
      Object {
        "contentWidth": Object {
          "enabled": true,
          "fn": [Function],
        },
      }
    }
    onClose={[Function]}
    onOpen={[Function]}
    placeholder="Select..."
    placement="bottom-start"
    size="large"
  >
    <WithTheme(Themed(Dropdown))
      className="emotion-14"
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      disabled={true}
      id="select-13"
      isOpen={false}
      itemKey="value"
      menu={[Function]}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      onClose={[Function]}
      onOpen={[Function]}
      placeholder="Select..."
      placement="bottom-start"
      size="large"
    >
      <Themed(Dropdown)
        className="emotion-14"
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        disabled={true}
        id="select-13"
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Select..."
        placement="bottom-start"
        size="large"
      >
        <ThemeProvider>
          <ThemeProvider>
            <Dropdown
              className="emotion-14"
              data={
                Array [
                  Object {
                    "text": "Alpha",
                    "value": "alpha",
                  },
                  Object {
                    "text": "Beta",
                    "value": "beta",
                  },
                  Object {
                    "text": "Gamma",
                    "value": "gamma",
                  },
                ]
              }
              disabled={true}
              id="select-13"
              isOpen={false}
              itemKey="value"
              menu={[Function]}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placeholder="Select..."
              placement="bottom-start"
              size="large"
            >
              <Popover
                className="emotion-14"
                content={[Function]}
                disabled={true}
                focusTriggerOnClose={true}
                hasArrow={true}
                id="select-13"
                isOpen={false}
                itemKey="value"
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placeholder="Select..."
                placement="bottom-start"
                size="large"
                triggerRef={[Function]}
              >
                <Manager>
                  <Styled(span)
                    className="emotion-14"
                    content={[Function]}
                    disabled={true}
                    focusTriggerOnClose={true}
                    hasArrow={true}
                    id="select-13"
                    isOpen={false}
                    itemKey="value"
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Select..."
                    placement="bottom-start"
                    size="large"
                    triggerRef={[Function]}
                  >
                    <span
                      className="emotion-13"
                      content={[Function]}
                      disabled={true}
                      id="select-13"
                      onClose={[Function]}
                      onOpen={[Function]}
                      placeholder="Select..."
                      size="large"
                    >
                      <PopoverTrigger
                        aria-describedby="select-13-content"
                        aria-disabled={true}
                        aria-expanded={false}
                        aria-haspopup="listbox"
                        aria-owns="select-13-content"
                        disabled={true}
                        isOpen={false}
                        onBlur={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        placeholder="Select..."
                        role="button"
                        size="large"
                        triggerRef={[Function]}
                      >
                        <Reference>
                          <InnerReference
                            getReferenceRef={[Function]}
                          >
                            <Styled(span)>
                              <span
                                className="emotion-12"
                              >
                                <SelectTrigger
                                  aria-describedby="select-13-content"
                                  aria-disabled={true}
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-owns="select-13-content"
                                  disabled={true}
                                  isOpen={false}
                                  onBlur={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  placeholder="Select..."
                                  role="button"
                                  size="large"
                                  triggerRef={[Function]}
                                >
                                  <Styled(WithTheme(Themed(FauxControl)))
                                    afterItems={
                                      Array [
                                        <withProps(Styled(IconArrowDropdownDown)) />,
                                        <input
                                          onClick={[Function]}
                                          type="hidden"
                                          value=""
                                        />,
                                      ]
                                    }
                                    aria-describedby="select-13-content"
                                    aria-disabled={true}
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-13-content"
                                    control={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "__emotion_base": "div",
                                        "__emotion_forwardProp": undefined,
                                        "__emotion_real": [Circular],
                                        "__emotion_styles": Array [
                                          [Function],
                                        ],
                                        "defaultProps": undefined,
                                        "displayName": "Styled(div)",
                                        "render": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    controlProps={
                                      Object {
                                        "hasPlaceholder": true,
                                        "variant": undefined,
                                      }
                                    }
                                    disabled={true}
                                    fauxControlRef={[Function]}
                                    onBlur={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    size="large"
                                  >
                                    <WithTheme(Themed(FauxControl))
                                      afterItems={
                                        Array [
                                          <withProps(Styled(IconArrowDropdownDown)) />,
                                          <input
                                            onClick={[Function]}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-13-content"
                                      aria-disabled={true}
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-13-content"
                                      className="emotion-8"
                                      control={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "__emotion_base": "div",
                                          "__emotion_forwardProp": undefined,
                                          "__emotion_real": [Circular],
                                          "__emotion_styles": Array [
                                            [Function],
                                          ],
                                          "defaultProps": undefined,
                                          "displayName": "Styled(div)",
                                          "render": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      disabled={true}
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                    >
                                      <Themed(FauxControl)
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-13-content"
                                        aria-disabled={true}
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-13-content"
                                        className="emotion-8"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        disabled={true}
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                      >
                                        <ThemeProvider>
                                          <ThemeProvider>
                                            <FauxControl
                                              afterItems={
                                                Array [
                                                  <withProps(Styled(IconArrowDropdownDown)) />,
                                                  <input
                                                    onClick={[Function]}
                                                    type="hidden"
                                                    value=""
                                                  />,
                                                ]
                                              }
                                              aria-describedby="select-13-content"
                                              aria-disabled={true}
                                              aria-expanded={false}
                                              aria-haspopup="listbox"
                                              aria-owns="select-13-content"
                                              className="emotion-8"
                                              control={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "__emotion_base": "div",
                                                  "__emotion_forwardProp": undefined,
                                                  "__emotion_real": [Circular],
                                                  "__emotion_styles": Array [
                                                    [Function],
                                                  ],
                                                  "defaultProps": undefined,
                                                  "displayName": "Styled(div)",
                                                  "render": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              controlProps={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              disabled={true}
                                              fauxControlRef={[Function]}
                                              onBlur={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              role="button"
                                              size="large"
                                            >
                                              <Styled(div)
                                                aria-describedby="select-13-content"
                                                aria-disabled={true}
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-owns="select-13-content"
                                                className="emotion-8"
                                                control={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "__emotion_base": "div",
                                                    "__emotion_forwardProp": undefined,
                                                    "__emotion_real": [Circular],
                                                    "__emotion_styles": Array [
                                                      [Function],
                                                    ],
                                                    "defaultProps": undefined,
                                                    "displayName": "Styled(div)",
                                                    "render": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                disabled={true}
                                                onBlur={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                              >
                                                <div
                                                  aria-describedby="select-13-content"
                                                  aria-disabled={true}
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-13-content"
                                                  className="emotion-7"
                                                  disabled={true}
                                                  onBlur={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                >
                                                  <Styled(div)
                                                    controlPropsIn={
                                                      Object {
                                                        "hasPlaceholder": true,
                                                        "variant": undefined,
                                                      }
                                                    }
                                                    disabled={true}
                                                    hasPlaceholder={true}
                                                    key="control"
                                                    size="large"
                                                  >
                                                    <div
                                                      className="emotion-1"
                                                      disabled={true}
                                                      size="large"
                                                    >
                                                      <Styled(span)>
                                                        <span
                                                          className="emotion-0"
                                                        >
                                                          Select...
                                                        </span>
                                                      </Styled(span)>
                                                    </div>
                                                  </Styled(div)>
                                                  <withProps(Styled(IconArrowDropdownDown))
                                                    key="arrow"
                                                  >
                                                    <Styled(IconArrowDropdownDown)
                                                      size="1.5em"
                                                    >
                                                      <IconArrowDropdownDown
                                                        className="emotion-3"
                                                        size="1.5em"
                                                      >
                                                        <Icon
                                                          className="emotion-3"
                                                          rtl={false}
                                                          size="1.5em"
                                                        >
                                                          <Styled(svg)
                                                            aria-hidden={true}
                                                            className="emotion-3"
                                                            focusable="false"
                                                            role="img"
                                                            rtl={false}
                                                            size="1.5em"
                                                            viewBox="0 0 24 24"
                                                          >
                                                            <svg
                                                              aria-hidden={true}
                                                              className="emotion-2"
                                                              focusable="false"
                                                              role="img"
                                                              size="1.5em"
                                                              viewBox="0 0 24 24"
                                                            >
                                                              <g>
                                                                <path
                                                                  d="M12 17.5l-8-8h16z"
                                                                />
                                                              </g>
                                                            </svg>
                                                          </Styled(svg)>
                                                        </Icon>
                                                      </IconArrowDropdownDown>
                                                    </Styled(IconArrowDropdownDown)>
                                                  </withProps(Styled(IconArrowDropdownDown))>
                                                  <input
                                                    key="input"
                                                    onClick={[Function]}
                                                    type="hidden"
                                                    value=""
                                                  />
                                                  <Styled(div)
                                                    disabled={true}
                                                  >
                                                    <div
                                                      className="emotion-6"
                                                      disabled={true}
                                                    />
                                                  </Styled(div)>
                                                </div>
                                              </Styled(div)>
                                            </FauxControl>
                                          </ThemeProvider>
                                        </ThemeProvider>
                                      </Themed(FauxControl)>
                                    </WithTheme(Themed(FauxControl))>
                                  </Styled(WithTheme(Themed(FauxControl)))>
                                </SelectTrigger>
                              </span>
                            </Styled(span)>
                          </InnerReference>
                        </Reference>
                      </PopoverTrigger>
                    </span>
                  </Styled(span)>
                </Manager>
              </Popover>
            </Dropdown>
          </ThemeProvider>
        </ThemeProvider>
      </Themed(Dropdown)>
    </WithTheme(Themed(Dropdown))>
  </Styled(WithTheme(Themed(Dropdown)))>
</Select>
`;

exports[`Select demo examples Snapshots: form-field 1`] = `
.emotion-16 {
  width: 100%;
}

.emotion-16 > span {
  width: 100%;
}

.emotion-15 {
  display: inline-block;
  width: 100%;
}

.emotion-15 > span {
  width: 100%;
}

.emotion-14 {
  display: inline-block;
}

.emotion-10 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-10 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-10 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-10 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-10 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-9 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-9 *,
.emotion-9 *::before,
.emotion-9 *::after {
  box-sizing: inherit;
}

.emotion-9:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-9:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-9:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-9 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-9 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-9 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-9 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-2 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-5 {
  margin: 0.5em;
}

.emotion-4 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-8 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-3 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-3::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-3::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-3:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-3::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-3::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-3:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-3::-ms-clear {
  display: none;
}

.emotion-3:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-23[class] > *:not(:last-child) {
  margin-bottom: 1rem;
}

.emotion-22 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
}

.emotion-22 *,
.emotion-22 *::before,
.emotion-22 *::after {
  box-sizing: inherit;
}

.emotion-1 {
  color: #58606e;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  font-size: 0.875em;
  font-weight: 600;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  margin-bottom: 0.5em;
}

.emotion-1 > * {
  -webkit-align-self: flex-end;
  -ms-flex-item-align: end;
  align-self: flex-end;
  display: inline-block;
}

.emotion-0 {
  color: #de1b1b;
  font-size: 0.6875em;
  font-weight: 400;
}

.emotion-21 {
  color: #58606e;
  font-size: 0.6875em;
  margin-top: 0.18181818181818182em;
}

<Styled(div)>
  <div
    className="emotion-23"
  >
    <FormField
      caption="Lorem ipsum dolor sit amet, consectetur adipiscing elit."
      data={
        Array [
          Object {
            "text": "Alabama",
            "value": "AL",
          },
          Object {
            "text": "Alaska",
            "value": "AK",
          },
          Object {
            "text": "Arizona",
            "value": "AZ",
          },
          Object {
            "text": "Arkansas",
            "value": "AR",
          },
          Object {
            "text": "California",
            "value": "CA",
          },
          Object {
            "text": "Colorado",
            "value": "CO",
          },
          Object {
            "text": "Connecticut",
            "value": "CT",
          },
          Object {
            "text": "Delaware",
            "value": "DE",
          },
          Object {
            "text": "Florida",
            "value": "FL",
          },
          Object {
            "text": "Georgia",
            "value": "GA",
          },
          Object {
            "text": "Hawaii",
            "value": "HI",
          },
          Object {
            "text": "Idaho",
            "value": "ID",
          },
          Object {
            "text": "Illinois",
            "value": "IL",
          },
          Object {
            "text": "Indiana",
            "value": "IN",
          },
          Object {
            "text": "Iowa",
            "value": "IA",
          },
          Object {
            "text": "Kansas",
            "value": "KS",
          },
          Object {
            "text": "Kentucky",
            "value": "KY",
          },
          Object {
            "text": "Louisiana",
            "value": "LA",
          },
          Object {
            "text": "Maine",
            "value": "ME",
          },
          Object {
            "text": "Maryland",
            "value": "MD",
          },
          Object {
            "text": "Massachusetts",
            "value": "MA",
          },
          Object {
            "text": "Michigan",
            "value": "MI",
          },
          Object {
            "text": "Minnesota",
            "value": "MN",
          },
          Object {
            "text": "Mississippi",
            "value": "MS",
          },
          Object {
            "text": "Missouri",
            "value": "MO",
          },
          Object {
            "text": "Montana",
            "value": "MT",
          },
          Object {
            "text": "Nebraska",
            "value": "NE",
          },
          Object {
            "text": "Nevada",
            "value": "NV",
          },
          Object {
            "text": "New Hampshire",
            "value": "NH",
          },
          Object {
            "text": "New Jersey",
            "value": "NJ",
          },
          Object {
            "text": "New Mexico",
            "value": "NM",
          },
          Object {
            "text": "New York",
            "value": "NY",
          },
          Object {
            "text": "North Carolina",
            "value": "NC",
          },
          Object {
            "text": "North Dakota",
            "value": "ND",
          },
          Object {
            "text": "Ohio",
            "value": "OH",
          },
          Object {
            "text": "Oklahoma",
            "value": "OK",
          },
          Object {
            "text": "Oregon",
            "value": "OR",
          },
          Object {
            "text": "Pennsylvania",
            "value": "PA",
          },
          Object {
            "text": "Rhode Island",
            "value": "RI",
          },
          Object {
            "text": "South Carolina",
            "value": "SC",
          },
          Object {
            "text": "South Dakota",
            "value": "SD",
          },
          Object {
            "text": "Tennessee",
            "value": "TN",
          },
          Object {
            "text": "Texas",
            "value": "TX",
          },
          Object {
            "text": "Utah",
            "value": "UT",
          },
          Object {
            "text": "Vermont",
            "value": "VT",
          },
          Object {
            "text": "Virginia",
            "value": "VA",
          },
          Object {
            "text": "Washington",
            "value": "WA",
          },
          Object {
            "text": "West Virginia",
            "value": "WV",
          },
          Object {
            "text": "Wisconsin",
            "value": "WI",
          },
          Object {
            "text": "Wyoming",
            "value": "WY",
          },
        ]
      }
      input={[Function]}
      label="State"
      name="state"
      placeholder="Choose a state..."
      required={true}
      requiredText="Required"
    >
      <Styled(div)>
        <div
          className="emotion-22"
        >
          <label>
            <Styled(div)
              key="formField-78-textWrapper"
            >
              <div
                className="emotion-1"
              >
                <span
                  id="formField-78-labelText"
                >
                  State
                </span>
                <Styled(span)>
                  <span
                    className="emotion-0"
                  >
                    Required
                  </span>
                </Styled(span)>
              </div>
            </Styled(div)>
            <Select
              aria-describedby="formField-78-caption"
              data={
                Array [
                  Object {
                    "text": "Alabama",
                    "value": "AL",
                  },
                  Object {
                    "text": "Alaska",
                    "value": "AK",
                  },
                  Object {
                    "text": "Arizona",
                    "value": "AZ",
                  },
                  Object {
                    "text": "Arkansas",
                    "value": "AR",
                  },
                  Object {
                    "text": "California",
                    "value": "CA",
                  },
                  Object {
                    "text": "Colorado",
                    "value": "CO",
                  },
                  Object {
                    "text": "Connecticut",
                    "value": "CT",
                  },
                  Object {
                    "text": "Delaware",
                    "value": "DE",
                  },
                  Object {
                    "text": "Florida",
                    "value": "FL",
                  },
                  Object {
                    "text": "Georgia",
                    "value": "GA",
                  },
                  Object {
                    "text": "Hawaii",
                    "value": "HI",
                  },
                  Object {
                    "text": "Idaho",
                    "value": "ID",
                  },
                  Object {
                    "text": "Illinois",
                    "value": "IL",
                  },
                  Object {
                    "text": "Indiana",
                    "value": "IN",
                  },
                  Object {
                    "text": "Iowa",
                    "value": "IA",
                  },
                  Object {
                    "text": "Kansas",
                    "value": "KS",
                  },
                  Object {
                    "text": "Kentucky",
                    "value": "KY",
                  },
                  Object {
                    "text": "Louisiana",
                    "value": "LA",
                  },
                  Object {
                    "text": "Maine",
                    "value": "ME",
                  },
                  Object {
                    "text": "Maryland",
                    "value": "MD",
                  },
                  Object {
                    "text": "Massachusetts",
                    "value": "MA",
                  },
                  Object {
                    "text": "Michigan",
                    "value": "MI",
                  },
                  Object {
                    "text": "Minnesota",
                    "value": "MN",
                  },
                  Object {
                    "text": "Mississippi",
                    "value": "MS",
                  },
                  Object {
                    "text": "Missouri",
                    "value": "MO",
                  },
                  Object {
                    "text": "Montana",
                    "value": "MT",
                  },
                  Object {
                    "text": "Nebraska",
                    "value": "NE",
                  },
                  Object {
                    "text": "Nevada",
                    "value": "NV",
                  },
                  Object {
                    "text": "New Hampshire",
                    "value": "NH",
                  },
                  Object {
                    "text": "New Jersey",
                    "value": "NJ",
                  },
                  Object {
                    "text": "New Mexico",
                    "value": "NM",
                  },
                  Object {
                    "text": "New York",
                    "value": "NY",
                  },
                  Object {
                    "text": "North Carolina",
                    "value": "NC",
                  },
                  Object {
                    "text": "North Dakota",
                    "value": "ND",
                  },
                  Object {
                    "text": "Ohio",
                    "value": "OH",
                  },
                  Object {
                    "text": "Oklahoma",
                    "value": "OK",
                  },
                  Object {
                    "text": "Oregon",
                    "value": "OR",
                  },
                  Object {
                    "text": "Pennsylvania",
                    "value": "PA",
                  },
                  Object {
                    "text": "Rhode Island",
                    "value": "RI",
                  },
                  Object {
                    "text": "South Carolina",
                    "value": "SC",
                  },
                  Object {
                    "text": "South Dakota",
                    "value": "SD",
                  },
                  Object {
                    "text": "Tennessee",
                    "value": "TN",
                  },
                  Object {
                    "text": "Texas",
                    "value": "TX",
                  },
                  Object {
                    "text": "Utah",
                    "value": "UT",
                  },
                  Object {
                    "text": "Vermont",
                    "value": "VT",
                  },
                  Object {
                    "text": "Virginia",
                    "value": "VA",
                  },
                  Object {
                    "text": "Washington",
                    "value": "WA",
                  },
                  Object {
                    "text": "West Virginia",
                    "value": "WV",
                  },
                  Object {
                    "text": "Wisconsin",
                    "value": "WI",
                  },
                  Object {
                    "text": "Wyoming",
                    "value": "WY",
                  },
                ]
              }
              itemKey="value"
              key="formField-78-control"
              name="state"
              placeholder="Choose a state..."
              placement="bottom-start"
              required={true}
              size="large"
            >
              <Styled(WithTheme(Themed(Dropdown)))
                aria-describedby="formField-78-caption"
                data={
                  Array [
                    Object {
                      "text": "Alabama",
                      "value": "AL",
                    },
                    Object {
                      "text": "Alaska",
                      "value": "AK",
                    },
                    Object {
                      "text": "Arizona",
                      "value": "AZ",
                    },
                    Object {
                      "text": "Arkansas",
                      "value": "AR",
                    },
                    Object {
                      "text": "California",
                      "value": "CA",
                    },
                    Object {
                      "text": "Colorado",
                      "value": "CO",
                    },
                    Object {
                      "text": "Connecticut",
                      "value": "CT",
                    },
                    Object {
                      "text": "Delaware",
                      "value": "DE",
                    },
                    Object {
                      "text": "Florida",
                      "value": "FL",
                    },
                    Object {
                      "text": "Georgia",
                      "value": "GA",
                    },
                    Object {
                      "text": "Hawaii",
                      "value": "HI",
                    },
                    Object {
                      "text": "Idaho",
                      "value": "ID",
                    },
                    Object {
                      "text": "Illinois",
                      "value": "IL",
                    },
                    Object {
                      "text": "Indiana",
                      "value": "IN",
                    },
                    Object {
                      "text": "Iowa",
                      "value": "IA",
                    },
                    Object {
                      "text": "Kansas",
                      "value": "KS",
                    },
                    Object {
                      "text": "Kentucky",
                      "value": "KY",
                    },
                    Object {
                      "text": "Louisiana",
                      "value": "LA",
                    },
                    Object {
                      "text": "Maine",
                      "value": "ME",
                    },
                    Object {
                      "text": "Maryland",
                      "value": "MD",
                    },
                    Object {
                      "text": "Massachusetts",
                      "value": "MA",
                    },
                    Object {
                      "text": "Michigan",
                      "value": "MI",
                    },
                    Object {
                      "text": "Minnesota",
                      "value": "MN",
                    },
                    Object {
                      "text": "Mississippi",
                      "value": "MS",
                    },
                    Object {
                      "text": "Missouri",
                      "value": "MO",
                    },
                    Object {
                      "text": "Montana",
                      "value": "MT",
                    },
                    Object {
                      "text": "Nebraska",
                      "value": "NE",
                    },
                    Object {
                      "text": "Nevada",
                      "value": "NV",
                    },
                    Object {
                      "text": "New Hampshire",
                      "value": "NH",
                    },
                    Object {
                      "text": "New Jersey",
                      "value": "NJ",
                    },
                    Object {
                      "text": "New Mexico",
                      "value": "NM",
                    },
                    Object {
                      "text": "New York",
                      "value": "NY",
                    },
                    Object {
                      "text": "North Carolina",
                      "value": "NC",
                    },
                    Object {
                      "text": "North Dakota",
                      "value": "ND",
                    },
                    Object {
                      "text": "Ohio",
                      "value": "OH",
                    },
                    Object {
                      "text": "Oklahoma",
                      "value": "OK",
                    },
                    Object {
                      "text": "Oregon",
                      "value": "OR",
                    },
                    Object {
                      "text": "Pennsylvania",
                      "value": "PA",
                    },
                    Object {
                      "text": "Rhode Island",
                      "value": "RI",
                    },
                    Object {
                      "text": "South Carolina",
                      "value": "SC",
                    },
                    Object {
                      "text": "South Dakota",
                      "value": "SD",
                    },
                    Object {
                      "text": "Tennessee",
                      "value": "TN",
                    },
                    Object {
                      "text": "Texas",
                      "value": "TX",
                    },
                    Object {
                      "text": "Utah",
                      "value": "UT",
                    },
                    Object {
                      "text": "Vermont",
                      "value": "VT",
                    },
                    Object {
                      "text": "Virginia",
                      "value": "VA",
                    },
                    Object {
                      "text": "Washington",
                      "value": "WA",
                    },
                    Object {
                      "text": "West Virginia",
                      "value": "WV",
                    },
                    Object {
                      "text": "Wisconsin",
                      "value": "WI",
                    },
                    Object {
                      "text": "Wyoming",
                      "value": "WY",
                    },
                  ]
                }
                id="select-79"
                isOpen={false}
                itemKey="value"
                menu={[Function]}
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                name="state"
                onClose={[Function]}
                onOpen={[Function]}
                placeholder="Choose a state..."
                placement="bottom-start"
                required={true}
                size="large"
              >
                <WithTheme(Themed(Dropdown))
                  aria-describedby="formField-78-caption"
                  className="emotion-16"
                  data={
                    Array [
                      Object {
                        "text": "Alabama",
                        "value": "AL",
                      },
                      Object {
                        "text": "Alaska",
                        "value": "AK",
                      },
                      Object {
                        "text": "Arizona",
                        "value": "AZ",
                      },
                      Object {
                        "text": "Arkansas",
                        "value": "AR",
                      },
                      Object {
                        "text": "California",
                        "value": "CA",
                      },
                      Object {
                        "text": "Colorado",
                        "value": "CO",
                      },
                      Object {
                        "text": "Connecticut",
                        "value": "CT",
                      },
                      Object {
                        "text": "Delaware",
                        "value": "DE",
                      },
                      Object {
                        "text": "Florida",
                        "value": "FL",
                      },
                      Object {
                        "text": "Georgia",
                        "value": "GA",
                      },
                      Object {
                        "text": "Hawaii",
                        "value": "HI",
                      },
                      Object {
                        "text": "Idaho",
                        "value": "ID",
                      },
                      Object {
                        "text": "Illinois",
                        "value": "IL",
                      },
                      Object {
                        "text": "Indiana",
                        "value": "IN",
                      },
                      Object {
                        "text": "Iowa",
                        "value": "IA",
                      },
                      Object {
                        "text": "Kansas",
                        "value": "KS",
                      },
                      Object {
                        "text": "Kentucky",
                        "value": "KY",
                      },
                      Object {
                        "text": "Louisiana",
                        "value": "LA",
                      },
                      Object {
                        "text": "Maine",
                        "value": "ME",
                      },
                      Object {
                        "text": "Maryland",
                        "value": "MD",
                      },
                      Object {
                        "text": "Massachusetts",
                        "value": "MA",
                      },
                      Object {
                        "text": "Michigan",
                        "value": "MI",
                      },
                      Object {
                        "text": "Minnesota",
                        "value": "MN",
                      },
                      Object {
                        "text": "Mississippi",
                        "value": "MS",
                      },
                      Object {
                        "text": "Missouri",
                        "value": "MO",
                      },
                      Object {
                        "text": "Montana",
                        "value": "MT",
                      },
                      Object {
                        "text": "Nebraska",
                        "value": "NE",
                      },
                      Object {
                        "text": "Nevada",
                        "value": "NV",
                      },
                      Object {
                        "text": "New Hampshire",
                        "value": "NH",
                      },
                      Object {
                        "text": "New Jersey",
                        "value": "NJ",
                      },
                      Object {
                        "text": "New Mexico",
                        "value": "NM",
                      },
                      Object {
                        "text": "New York",
                        "value": "NY",
                      },
                      Object {
                        "text": "North Carolina",
                        "value": "NC",
                      },
                      Object {
                        "text": "North Dakota",
                        "value": "ND",
                      },
                      Object {
                        "text": "Ohio",
                        "value": "OH",
                      },
                      Object {
                        "text": "Oklahoma",
                        "value": "OK",
                      },
                      Object {
                        "text": "Oregon",
                        "value": "OR",
                      },
                      Object {
                        "text": "Pennsylvania",
                        "value": "PA",
                      },
                      Object {
                        "text": "Rhode Island",
                        "value": "RI",
                      },
                      Object {
                        "text": "South Carolina",
                        "value": "SC",
                      },
                      Object {
                        "text": "South Dakota",
                        "value": "SD",
                      },
                      Object {
                        "text": "Tennessee",
                        "value": "TN",
                      },
                      Object {
                        "text": "Texas",
                        "value": "TX",
                      },
                      Object {
                        "text": "Utah",
                        "value": "UT",
                      },
                      Object {
                        "text": "Vermont",
                        "value": "VT",
                      },
                      Object {
                        "text": "Virginia",
                        "value": "VA",
                      },
                      Object {
                        "text": "Washington",
                        "value": "WA",
                      },
                      Object {
                        "text": "West Virginia",
                        "value": "WV",
                      },
                      Object {
                        "text": "Wisconsin",
                        "value": "WI",
                      },
                      Object {
                        "text": "Wyoming",
                        "value": "WY",
                      },
                    ]
                  }
                  id="select-79"
                  isOpen={false}
                  itemKey="value"
                  menu={[Function]}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  name="state"
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="Choose a state..."
                  placement="bottom-start"
                  required={true}
                  size="large"
                >
                  <Themed(Dropdown)
                    aria-describedby="formField-78-caption"
                    className="emotion-16"
                    data={
                      Array [
                        Object {
                          "text": "Alabama",
                          "value": "AL",
                        },
                        Object {
                          "text": "Alaska",
                          "value": "AK",
                        },
                        Object {
                          "text": "Arizona",
                          "value": "AZ",
                        },
                        Object {
                          "text": "Arkansas",
                          "value": "AR",
                        },
                        Object {
                          "text": "California",
                          "value": "CA",
                        },
                        Object {
                          "text": "Colorado",
                          "value": "CO",
                        },
                        Object {
                          "text": "Connecticut",
                          "value": "CT",
                        },
                        Object {
                          "text": "Delaware",
                          "value": "DE",
                        },
                        Object {
                          "text": "Florida",
                          "value": "FL",
                        },
                        Object {
                          "text": "Georgia",
                          "value": "GA",
                        },
                        Object {
                          "text": "Hawaii",
                          "value": "HI",
                        },
                        Object {
                          "text": "Idaho",
                          "value": "ID",
                        },
                        Object {
                          "text": "Illinois",
                          "value": "IL",
                        },
                        Object {
                          "text": "Indiana",
                          "value": "IN",
                        },
                        Object {
                          "text": "Iowa",
                          "value": "IA",
                        },
                        Object {
                          "text": "Kansas",
                          "value": "KS",
                        },
                        Object {
                          "text": "Kentucky",
                          "value": "KY",
                        },
                        Object {
                          "text": "Louisiana",
                          "value": "LA",
                        },
                        Object {
                          "text": "Maine",
                          "value": "ME",
                        },
                        Object {
                          "text": "Maryland",
                          "value": "MD",
                        },
                        Object {
                          "text": "Massachusetts",
                          "value": "MA",
                        },
                        Object {
                          "text": "Michigan",
                          "value": "MI",
                        },
                        Object {
                          "text": "Minnesota",
                          "value": "MN",
                        },
                        Object {
                          "text": "Mississippi",
                          "value": "MS",
                        },
                        Object {
                          "text": "Missouri",
                          "value": "MO",
                        },
                        Object {
                          "text": "Montana",
                          "value": "MT",
                        },
                        Object {
                          "text": "Nebraska",
                          "value": "NE",
                        },
                        Object {
                          "text": "Nevada",
                          "value": "NV",
                        },
                        Object {
                          "text": "New Hampshire",
                          "value": "NH",
                        },
                        Object {
                          "text": "New Jersey",
                          "value": "NJ",
                        },
                        Object {
                          "text": "New Mexico",
                          "value": "NM",
                        },
                        Object {
                          "text": "New York",
                          "value": "NY",
                        },
                        Object {
                          "text": "North Carolina",
                          "value": "NC",
                        },
                        Object {
                          "text": "North Dakota",
                          "value": "ND",
                        },
                        Object {
                          "text": "Ohio",
                          "value": "OH",
                        },
                        Object {
                          "text": "Oklahoma",
                          "value": "OK",
                        },
                        Object {
                          "text": "Oregon",
                          "value": "OR",
                        },
                        Object {
                          "text": "Pennsylvania",
                          "value": "PA",
                        },
                        Object {
                          "text": "Rhode Island",
                          "value": "RI",
                        },
                        Object {
                          "text": "South Carolina",
                          "value": "SC",
                        },
                        Object {
                          "text": "South Dakota",
                          "value": "SD",
                        },
                        Object {
                          "text": "Tennessee",
                          "value": "TN",
                        },
                        Object {
                          "text": "Texas",
                          "value": "TX",
                        },
                        Object {
                          "text": "Utah",
                          "value": "UT",
                        },
                        Object {
                          "text": "Vermont",
                          "value": "VT",
                        },
                        Object {
                          "text": "Virginia",
                          "value": "VA",
                        },
                        Object {
                          "text": "Washington",
                          "value": "WA",
                        },
                        Object {
                          "text": "West Virginia",
                          "value": "WV",
                        },
                        Object {
                          "text": "Wisconsin",
                          "value": "WI",
                        },
                        Object {
                          "text": "Wyoming",
                          "value": "WY",
                        },
                      ]
                    }
                    id="select-79"
                    isOpen={false}
                    itemKey="value"
                    menu={[Function]}
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    name="state"
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Choose a state..."
                    placement="bottom-start"
                    required={true}
                    size="large"
                  >
                    <ThemeProvider>
                      <ThemeProvider>
                        <Dropdown
                          aria-describedby="formField-78-caption"
                          className="emotion-16"
                          data={
                            Array [
                              Object {
                                "text": "Alabama",
                                "value": "AL",
                              },
                              Object {
                                "text": "Alaska",
                                "value": "AK",
                              },
                              Object {
                                "text": "Arizona",
                                "value": "AZ",
                              },
                              Object {
                                "text": "Arkansas",
                                "value": "AR",
                              },
                              Object {
                                "text": "California",
                                "value": "CA",
                              },
                              Object {
                                "text": "Colorado",
                                "value": "CO",
                              },
                              Object {
                                "text": "Connecticut",
                                "value": "CT",
                              },
                              Object {
                                "text": "Delaware",
                                "value": "DE",
                              },
                              Object {
                                "text": "Florida",
                                "value": "FL",
                              },
                              Object {
                                "text": "Georgia",
                                "value": "GA",
                              },
                              Object {
                                "text": "Hawaii",
                                "value": "HI",
                              },
                              Object {
                                "text": "Idaho",
                                "value": "ID",
                              },
                              Object {
                                "text": "Illinois",
                                "value": "IL",
                              },
                              Object {
                                "text": "Indiana",
                                "value": "IN",
                              },
                              Object {
                                "text": "Iowa",
                                "value": "IA",
                              },
                              Object {
                                "text": "Kansas",
                                "value": "KS",
                              },
                              Object {
                                "text": "Kentucky",
                                "value": "KY",
                              },
                              Object {
                                "text": "Louisiana",
                                "value": "LA",
                              },
                              Object {
                                "text": "Maine",
                                "value": "ME",
                              },
                              Object {
                                "text": "Maryland",
                                "value": "MD",
                              },
                              Object {
                                "text": "Massachusetts",
                                "value": "MA",
                              },
                              Object {
                                "text": "Michigan",
                                "value": "MI",
                              },
                              Object {
                                "text": "Minnesota",
                                "value": "MN",
                              },
                              Object {
                                "text": "Mississippi",
                                "value": "MS",
                              },
                              Object {
                                "text": "Missouri",
                                "value": "MO",
                              },
                              Object {
                                "text": "Montana",
                                "value": "MT",
                              },
                              Object {
                                "text": "Nebraska",
                                "value": "NE",
                              },
                              Object {
                                "text": "Nevada",
                                "value": "NV",
                              },
                              Object {
                                "text": "New Hampshire",
                                "value": "NH",
                              },
                              Object {
                                "text": "New Jersey",
                                "value": "NJ",
                              },
                              Object {
                                "text": "New Mexico",
                                "value": "NM",
                              },
                              Object {
                                "text": "New York",
                                "value": "NY",
                              },
                              Object {
                                "text": "North Carolina",
                                "value": "NC",
                              },
                              Object {
                                "text": "North Dakota",
                                "value": "ND",
                              },
                              Object {
                                "text": "Ohio",
                                "value": "OH",
                              },
                              Object {
                                "text": "Oklahoma",
                                "value": "OK",
                              },
                              Object {
                                "text": "Oregon",
                                "value": "OR",
                              },
                              Object {
                                "text": "Pennsylvania",
                                "value": "PA",
                              },
                              Object {
                                "text": "Rhode Island",
                                "value": "RI",
                              },
                              Object {
                                "text": "South Carolina",
                                "value": "SC",
                              },
                              Object {
                                "text": "South Dakota",
                                "value": "SD",
                              },
                              Object {
                                "text": "Tennessee",
                                "value": "TN",
                              },
                              Object {
                                "text": "Texas",
                                "value": "TX",
                              },
                              Object {
                                "text": "Utah",
                                "value": "UT",
                              },
                              Object {
                                "text": "Vermont",
                                "value": "VT",
                              },
                              Object {
                                "text": "Virginia",
                                "value": "VA",
                              },
                              Object {
                                "text": "Washington",
                                "value": "WA",
                              },
                              Object {
                                "text": "West Virginia",
                                "value": "WV",
                              },
                              Object {
                                "text": "Wisconsin",
                                "value": "WI",
                              },
                              Object {
                                "text": "Wyoming",
                                "value": "WY",
                              },
                            ]
                          }
                          id="select-79"
                          isOpen={false}
                          itemKey="value"
                          menu={[Function]}
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                            }
                          }
                          name="state"
                          onClose={[Function]}
                          onOpen={[Function]}
                          placeholder="Choose a state..."
                          placement="bottom-start"
                          required={true}
                          size="large"
                        >
                          <Popover
                            aria-describedby="formField-78-caption"
                            className="emotion-16"
                            content={[Function]}
                            focusTriggerOnClose={true}
                            hasArrow={true}
                            id="select-79"
                            isOpen={false}
                            itemKey="value"
                            modifiers={
                              Object {
                                "contentWidth": Object {
                                  "enabled": true,
                                  "fn": [Function],
                                },
                              }
                            }
                            name="state"
                            onClose={[Function]}
                            onOpen={[Function]}
                            placeholder="Choose a state..."
                            placement="bottom-start"
                            required={true}
                            size="large"
                            triggerRef={[Function]}
                          >
                            <Manager>
                              <Styled(span)
                                aria-describedby="formField-78-caption"
                                className="emotion-16"
                                content={[Function]}
                                focusTriggerOnClose={true}
                                hasArrow={true}
                                id="select-79"
                                isOpen={false}
                                itemKey="value"
                                name="state"
                                onClose={[Function]}
                                onOpen={[Function]}
                                placeholder="Choose a state..."
                                placement="bottom-start"
                                required={true}
                                size="large"
                                triggerRef={[Function]}
                              >
                                <span
                                  aria-describedby="formField-78-caption"
                                  className="emotion-15"
                                  content={[Function]}
                                  id="select-79"
                                  name="state"
                                  onClose={[Function]}
                                  onOpen={[Function]}
                                  placeholder="Choose a state..."
                                  required={true}
                                  size="large"
                                >
                                  <PopoverTrigger
                                    aria-describedby="select-79-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-79-content"
                                    aria-required={true}
                                    isOpen={false}
                                    name="state"
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    placeholder="Choose a state..."
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                    triggerRef={[Function]}
                                  >
                                    <Reference>
                                      <InnerReference
                                        getReferenceRef={[Function]}
                                      >
                                        <Styled(span)>
                                          <span
                                            className="emotion-14"
                                          >
                                            <SelectTrigger
                                              aria-describedby="select-79-content"
                                              aria-expanded={false}
                                              aria-haspopup="listbox"
                                              aria-owns="select-79-content"
                                              aria-required={true}
                                              isOpen={false}
                                              name="state"
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              placeholder="Choose a state..."
                                              role="button"
                                              size="large"
                                              tabIndex={0}
                                              triggerRef={[Function]}
                                            >
                                              <Styled(WithTheme(Themed(FauxControl)))
                                                afterItems={
                                                  Array [
                                                    <withProps(Styled(IconArrowDropdownDown)) />,
                                                    <input
                                                      name="state"
                                                      onClick={[Function]}
                                                      type="hidden"
                                                      value=""
                                                    />,
                                                  ]
                                                }
                                                aria-describedby="select-79-content"
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-owns="select-79-content"
                                                aria-required={true}
                                                control={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "__emotion_base": "div",
                                                    "__emotion_forwardProp": undefined,
                                                    "__emotion_real": [Circular],
                                                    "__emotion_styles": Array [
                                                      [Function],
                                                    ],
                                                    "defaultProps": undefined,
                                                    "displayName": "Styled(div)",
                                                    "render": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                controlProps={
                                                  Object {
                                                    "hasPlaceholder": true,
                                                    "variant": undefined,
                                                  }
                                                }
                                                fauxControlRef={[Function]}
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                size="large"
                                                tabIndex={0}
                                              >
                                                <WithTheme(Themed(FauxControl))
                                                  afterItems={
                                                    Array [
                                                      <withProps(Styled(IconArrowDropdownDown)) />,
                                                      <input
                                                        name="state"
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />,
                                                    ]
                                                  }
                                                  aria-describedby="select-79-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-79-content"
                                                  aria-required={true}
                                                  className="emotion-10"
                                                  control={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "__emotion_base": "div",
                                                      "__emotion_forwardProp": undefined,
                                                      "__emotion_real": [Circular],
                                                      "__emotion_styles": Array [
                                                        [Function],
                                                      ],
                                                      "defaultProps": undefined,
                                                      "displayName": "Styled(div)",
                                                      "render": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  controlProps={
                                                    Object {
                                                      "hasPlaceholder": true,
                                                      "variant": undefined,
                                                    }
                                                  }
                                                  fauxControlRef={[Function]}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  size="large"
                                                  tabIndex={0}
                                                >
                                                  <Themed(FauxControl)
                                                    afterItems={
                                                      Array [
                                                        <withProps(Styled(IconArrowDropdownDown)) />,
                                                        <input
                                                          name="state"
                                                          onClick={[Function]}
                                                          type="hidden"
                                                          value=""
                                                        />,
                                                      ]
                                                    }
                                                    aria-describedby="select-79-content"
                                                    aria-expanded={false}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-79-content"
                                                    aria-required={true}
                                                    className="emotion-10"
                                                    control={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "__emotion_base": "div",
                                                        "__emotion_forwardProp": undefined,
                                                        "__emotion_real": [Circular],
                                                        "__emotion_styles": Array [
                                                          [Function],
                                                        ],
                                                        "defaultProps": undefined,
                                                        "displayName": "Styled(div)",
                                                        "render": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    controlProps={
                                                      Object {
                                                        "hasPlaceholder": true,
                                                        "variant": undefined,
                                                      }
                                                    }
                                                    fauxControlRef={[Function]}
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    size="large"
                                                    tabIndex={0}
                                                  >
                                                    <ThemeProvider>
                                                      <ThemeProvider>
                                                        <FauxControl
                                                          afterItems={
                                                            Array [
                                                              <withProps(Styled(IconArrowDropdownDown)) />,
                                                              <input
                                                                name="state"
                                                                onClick={[Function]}
                                                                type="hidden"
                                                                value=""
                                                              />,
                                                            ]
                                                          }
                                                          aria-describedby="select-79-content"
                                                          aria-expanded={false}
                                                          aria-haspopup="listbox"
                                                          aria-owns="select-79-content"
                                                          aria-required={true}
                                                          className="emotion-10"
                                                          control={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "__emotion_base": "div",
                                                              "__emotion_forwardProp": undefined,
                                                              "__emotion_real": [Circular],
                                                              "__emotion_styles": Array [
                                                                [Function],
                                                              ],
                                                              "defaultProps": undefined,
                                                              "displayName": "Styled(div)",
                                                              "render": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          controlProps={
                                                            Object {
                                                              "hasPlaceholder": true,
                                                              "variant": undefined,
                                                            }
                                                          }
                                                          fauxControlRef={[Function]}
                                                          onBlur={[Function]}
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          role="button"
                                                          size="large"
                                                          tabIndex={0}
                                                        >
                                                          <Styled(div)
                                                            aria-describedby="select-79-content"
                                                            aria-expanded={false}
                                                            aria-haspopup="listbox"
                                                            aria-owns="select-79-content"
                                                            aria-required={true}
                                                            className="emotion-10"
                                                            control={
                                                              Object {
                                                                "$$typeof": Symbol(react.forward_ref),
                                                                "__emotion_base": "div",
                                                                "__emotion_forwardProp": undefined,
                                                                "__emotion_real": [Circular],
                                                                "__emotion_styles": Array [
                                                                  [Function],
                                                                ],
                                                                "defaultProps": undefined,
                                                                "displayName": "Styled(div)",
                                                                "render": [Function],
                                                                "withComponent": [Function],
                                                              }
                                                            }
                                                            onBlur={[Function]}
                                                            onClick={[Function]}
                                                            onKeyDown={[Function]}
                                                            onKeyUp={[Function]}
                                                            role="button"
                                                            tabIndex={0}
                                                          >
                                                            <div
                                                              aria-describedby="select-79-content"
                                                              aria-expanded={false}
                                                              aria-haspopup="listbox"
                                                              aria-owns="select-79-content"
                                                              aria-required={true}
                                                              className="emotion-9"
                                                              onBlur={[Function]}
                                                              onClick={[Function]}
                                                              onKeyDown={[Function]}
                                                              onKeyUp={[Function]}
                                                              role="button"
                                                              tabIndex={0}
                                                            >
                                                              <Styled(div)
                                                                controlPropsIn={
                                                                  Object {
                                                                    "hasPlaceholder": true,
                                                                    "variant": undefined,
                                                                  }
                                                                }
                                                                hasPlaceholder={true}
                                                                key="control"
                                                                size="large"
                                                              >
                                                                <div
                                                                  className="emotion-3"
                                                                  size="large"
                                                                >
                                                                  <Styled(span)>
                                                                    <span
                                                                      className="emotion-2"
                                                                    >
                                                                      Choose a state...
                                                                    </span>
                                                                  </Styled(span)>
                                                                </div>
                                                              </Styled(div)>
                                                              <withProps(Styled(IconArrowDropdownDown))
                                                                key="arrow"
                                                              >
                                                                <Styled(IconArrowDropdownDown)
                                                                  size="1.5em"
                                                                >
                                                                  <IconArrowDropdownDown
                                                                    className="emotion-5"
                                                                    size="1.5em"
                                                                  >
                                                                    <Icon
                                                                      className="emotion-5"
                                                                      rtl={false}
                                                                      size="1.5em"
                                                                    >
                                                                      <Styled(svg)
                                                                        aria-hidden={true}
                                                                        className="emotion-5"
                                                                        focusable="false"
                                                                        role="img"
                                                                        rtl={false}
                                                                        size="1.5em"
                                                                        viewBox="0 0 24 24"
                                                                      >
                                                                        <svg
                                                                          aria-hidden={true}
                                                                          className="emotion-4"
                                                                          focusable="false"
                                                                          role="img"
                                                                          size="1.5em"
                                                                          viewBox="0 0 24 24"
                                                                        >
                                                                          <g>
                                                                            <path
                                                                              d="M12 17.5l-8-8h16z"
                                                                            />
                                                                          </g>
                                                                        </svg>
                                                                      </Styled(svg)>
                                                                    </Icon>
                                                                  </IconArrowDropdownDown>
                                                                </Styled(IconArrowDropdownDown)>
                                                              </withProps(Styled(IconArrowDropdownDown))>
                                                              <input
                                                                key="input"
                                                                name="state"
                                                                onClick={[Function]}
                                                                type="hidden"
                                                                value=""
                                                              />
                                                              <Styled(div)>
                                                                <div
                                                                  className="emotion-8"
                                                                />
                                                              </Styled(div)>
                                                            </div>
                                                          </Styled(div)>
                                                        </FauxControl>
                                                      </ThemeProvider>
                                                    </ThemeProvider>
                                                  </Themed(FauxControl)>
                                                </WithTheme(Themed(FauxControl))>
                                              </Styled(WithTheme(Themed(FauxControl)))>
                                            </SelectTrigger>
                                          </span>
                                        </Styled(span)>
                                      </InnerReference>
                                    </Reference>
                                  </PopoverTrigger>
                                </span>
                              </Styled(span)>
                            </Manager>
                          </Popover>
                        </Dropdown>
                      </ThemeProvider>
                    </ThemeProvider>
                  </Themed(Dropdown)>
                </WithTheme(Themed(Dropdown))>
              </Styled(WithTheme(Themed(Dropdown)))>
            </Select>
          </label>
          <Styled(div)
            caption="Lorem ipsum dolor sit amet, consectetur adipiscing elit."
            id="formField-78-caption"
            isGroup={false}
          >
            <div
              className="emotion-21"
              id="formField-78-caption"
            >
              Lorem ipsum dolor sit amet, consectetur adipiscing elit.
            </div>
          </Styled(div)>
        </div>
      </Styled(div)>
    </FormField>
  </div>
</Styled(div)>
`;

exports[`Select demo examples Snapshots: invalid 1`] = `
.emotion-14 {
  width: 100%;
}

.emotion-14 > span {
  width: 100%;
}

.emotion-13 {
  display: inline-block;
  width: 100%;
}

.emotion-13 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-7:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-3 {
  margin: 0.5em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-6 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

<Select
  data={
    Array [
      Object {
        "text": "Alpha",
        "value": "alpha",
      },
      Object {
        "text": "Beta",
        "value": "beta",
      },
      Object {
        "text": "Gamma",
        "value": "gamma",
      },
    ]
  }
  invalid={true}
  itemKey="value"
  placeholder="Select..."
  placement="bottom-start"
  size="large"
>
  <Styled(WithTheme(Themed(Dropdown)))
    data={
      Array [
        Object {
          "text": "Alpha",
          "value": "alpha",
        },
        Object {
          "text": "Beta",
          "value": "beta",
        },
        Object {
          "text": "Gamma",
          "value": "gamma",
        },
      ]
    }
    id="select-22"
    invalid={true}
    isOpen={false}
    itemKey="value"
    menu={[Function]}
    modifiers={
      Object {
        "contentWidth": Object {
          "enabled": true,
          "fn": [Function],
        },
      }
    }
    onClose={[Function]}
    onOpen={[Function]}
    placeholder="Select..."
    placement="bottom-start"
    size="large"
  >
    <WithTheme(Themed(Dropdown))
      className="emotion-14"
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      id="select-22"
      invalid={true}
      isOpen={false}
      itemKey="value"
      menu={[Function]}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      onClose={[Function]}
      onOpen={[Function]}
      placeholder="Select..."
      placement="bottom-start"
      size="large"
    >
      <Themed(Dropdown)
        className="emotion-14"
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        id="select-22"
        invalid={true}
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Select..."
        placement="bottom-start"
        size="large"
      >
        <ThemeProvider>
          <ThemeProvider>
            <Dropdown
              className="emotion-14"
              data={
                Array [
                  Object {
                    "text": "Alpha",
                    "value": "alpha",
                  },
                  Object {
                    "text": "Beta",
                    "value": "beta",
                  },
                  Object {
                    "text": "Gamma",
                    "value": "gamma",
                  },
                ]
              }
              id="select-22"
              invalid={true}
              isOpen={false}
              itemKey="value"
              menu={[Function]}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placeholder="Select..."
              placement="bottom-start"
              size="large"
            >
              <Popover
                className="emotion-14"
                content={[Function]}
                focusTriggerOnClose={true}
                hasArrow={true}
                id="select-22"
                invalid={true}
                isOpen={false}
                itemKey="value"
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placeholder="Select..."
                placement="bottom-start"
                size="large"
                triggerRef={[Function]}
              >
                <Manager>
                  <Styled(span)
                    className="emotion-14"
                    content={[Function]}
                    focusTriggerOnClose={true}
                    hasArrow={true}
                    id="select-22"
                    invalid={true}
                    isOpen={false}
                    itemKey="value"
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Select..."
                    placement="bottom-start"
                    size="large"
                    triggerRef={[Function]}
                  >
                    <span
                      className="emotion-13"
                      content={[Function]}
                      id="select-22"
                      onClose={[Function]}
                      onOpen={[Function]}
                      placeholder="Select..."
                      size="large"
                    >
                      <PopoverTrigger
                        aria-describedby="select-22-content"
                        aria-expanded={false}
                        aria-haspopup="listbox"
                        aria-invalid={true}
                        aria-owns="select-22-content"
                        isOpen={false}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        placeholder="Select..."
                        role="button"
                        size="large"
                        tabIndex={0}
                        triggerRef={[Function]}
                      >
                        <Reference>
                          <InnerReference
                            getReferenceRef={[Function]}
                          >
                            <Styled(span)>
                              <span
                                className="emotion-12"
                              >
                                <SelectTrigger
                                  aria-describedby="select-22-content"
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-invalid={true}
                                  aria-owns="select-22-content"
                                  isOpen={false}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  placeholder="Select..."
                                  role="button"
                                  size="large"
                                  tabIndex={0}
                                  triggerRef={[Function]}
                                >
                                  <Styled(WithTheme(Themed(FauxControl)))
                                    afterItems={
                                      Array [
                                        <withProps(Styled(IconArrowDropdownDown)) />,
                                        <input
                                          onClick={[Function]}
                                          type="hidden"
                                          value=""
                                        />,
                                      ]
                                    }
                                    aria-describedby="select-22-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-invalid={true}
                                    aria-owns="select-22-content"
                                    control={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "__emotion_base": "div",
                                        "__emotion_forwardProp": undefined,
                                        "__emotion_real": [Circular],
                                        "__emotion_styles": Array [
                                          [Function],
                                        ],
                                        "defaultProps": undefined,
                                        "displayName": "Styled(div)",
                                        "render": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    controlProps={
                                      Object {
                                        "hasPlaceholder": true,
                                        "variant": undefined,
                                      }
                                    }
                                    fauxControlRef={[Function]}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                  >
                                    <WithTheme(Themed(FauxControl))
                                      afterItems={
                                        Array [
                                          <withProps(Styled(IconArrowDropdownDown)) />,
                                          <input
                                            onClick={[Function]}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-22-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-invalid={true}
                                      aria-owns="select-22-content"
                                      className="emotion-8"
                                      control={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "__emotion_base": "div",
                                          "__emotion_forwardProp": undefined,
                                          "__emotion_real": [Circular],
                                          "__emotion_styles": Array [
                                            [Function],
                                          ],
                                          "defaultProps": undefined,
                                          "displayName": "Styled(div)",
                                          "render": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                    >
                                      <Themed(FauxControl)
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-22-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-invalid={true}
                                        aria-owns="select-22-content"
                                        className="emotion-8"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <ThemeProvider>
                                          <ThemeProvider>
                                            <FauxControl
                                              afterItems={
                                                Array [
                                                  <withProps(Styled(IconArrowDropdownDown)) />,
                                                  <input
                                                    onClick={[Function]}
                                                    type="hidden"
                                                    value=""
                                                  />,
                                                ]
                                              }
                                              aria-describedby="select-22-content"
                                              aria-expanded={false}
                                              aria-haspopup="listbox"
                                              aria-invalid={true}
                                              aria-owns="select-22-content"
                                              className="emotion-8"
                                              control={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "__emotion_base": "div",
                                                  "__emotion_forwardProp": undefined,
                                                  "__emotion_real": [Circular],
                                                  "__emotion_styles": Array [
                                                    [Function],
                                                  ],
                                                  "defaultProps": undefined,
                                                  "displayName": "Styled(div)",
                                                  "render": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              controlProps={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              fauxControlRef={[Function]}
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              role="button"
                                              size="large"
                                              tabIndex={0}
                                            >
                                              <Styled(div)
                                                aria-describedby="select-22-content"
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-invalid={true}
                                                aria-owns="select-22-content"
                                                className="emotion-8"
                                                control={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "__emotion_base": "div",
                                                    "__emotion_forwardProp": undefined,
                                                    "__emotion_real": [Circular],
                                                    "__emotion_styles": Array [
                                                      [Function],
                                                    ],
                                                    "defaultProps": undefined,
                                                    "displayName": "Styled(div)",
                                                    "render": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                tabIndex={0}
                                              >
                                                <div
                                                  aria-describedby="select-22-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-invalid={true}
                                                  aria-owns="select-22-content"
                                                  className="emotion-7"
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <Styled(div)
                                                    controlPropsIn={
                                                      Object {
                                                        "hasPlaceholder": true,
                                                        "variant": undefined,
                                                      }
                                                    }
                                                    hasPlaceholder={true}
                                                    key="control"
                                                    size="large"
                                                  >
                                                    <div
                                                      className="emotion-1"
                                                      size="large"
                                                    >
                                                      <Styled(span)>
                                                        <span
                                                          className="emotion-0"
                                                        >
                                                          Select...
                                                        </span>
                                                      </Styled(span)>
                                                    </div>
                                                  </Styled(div)>
                                                  <withProps(Styled(IconArrowDropdownDown))
                                                    key="arrow"
                                                  >
                                                    <Styled(IconArrowDropdownDown)
                                                      size="1.5em"
                                                    >
                                                      <IconArrowDropdownDown
                                                        className="emotion-3"
                                                        size="1.5em"
                                                      >
                                                        <Icon
                                                          className="emotion-3"
                                                          rtl={false}
                                                          size="1.5em"
                                                        >
                                                          <Styled(svg)
                                                            aria-hidden={true}
                                                            className="emotion-3"
                                                            focusable="false"
                                                            role="img"
                                                            rtl={false}
                                                            size="1.5em"
                                                            viewBox="0 0 24 24"
                                                          >
                                                            <svg
                                                              aria-hidden={true}
                                                              className="emotion-2"
                                                              focusable="false"
                                                              role="img"
                                                              size="1.5em"
                                                              viewBox="0 0 24 24"
                                                            >
                                                              <g>
                                                                <path
                                                                  d="M12 17.5l-8-8h16z"
                                                                />
                                                              </g>
                                                            </svg>
                                                          </Styled(svg)>
                                                        </Icon>
                                                      </IconArrowDropdownDown>
                                                    </Styled(IconArrowDropdownDown)>
                                                  </withProps(Styled(IconArrowDropdownDown))>
                                                  <input
                                                    key="input"
                                                    onClick={[Function]}
                                                    type="hidden"
                                                    value=""
                                                  />
                                                  <Styled(div)>
                                                    <div
                                                      className="emotion-6"
                                                    />
                                                  </Styled(div)>
                                                </div>
                                              </Styled(div)>
                                            </FauxControl>
                                          </ThemeProvider>
                                        </ThemeProvider>
                                      </Themed(FauxControl)>
                                    </WithTheme(Themed(FauxControl))>
                                  </Styled(WithTheme(Themed(FauxControl)))>
                                </SelectTrigger>
                              </span>
                            </Styled(span)>
                          </InnerReference>
                        </Reference>
                      </PopoverTrigger>
                    </span>
                  </Styled(span)>
                </Manager>
              </Popover>
            </Dropdown>
          </ThemeProvider>
        </ThemeProvider>
      </Themed(Dropdown)>
    </WithTheme(Themed(Dropdown))>
  </Styled(WithTheme(Themed(Dropdown)))>
</Select>
`;

exports[`Select demo examples Snapshots: overflow 1`] = `
.emotion-28 {
  width: 100%;
}

.emotion-28 > span {
  width: 100%;
}

.emotion-27 {
  display: inline-block;
  width: 100%;
}

.emotion-27 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-7:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-3 {
  margin: 0.5em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-6 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-26 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border: 1px solid #ebeff5;
  border-radius: 0.1875em;
  box-shadow: 0 2px 4px 0 rgba(0,0,0,0.2),0 4px 8px 0 rgba(0,0,0,0.2);
  max-height: 30vh;
  overflow-y: auto;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 14em;
  z-index: 100;
}

.emotion-26 *,
.emotion-26 *::before,
.emotion-26 *::after {
  box-sizing: inherit;
}

.emotion-26[data-placement^="top"] {
  margin-bottom: 5px;
}

.emotion-26[data-placement^="bottom"] {
  margin-top: 5px;
}

.emotion-26[data-placement^="left"] {
  margin-right: 5px;
}

.emotion-26[data-placement^="right"] {
  margin-left: 5px;
}

.emotion-26[data-x-out-of-boundaries] {
  visibility: hidden;
}

.emotion-25 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
}

.emotion-25 *,
.emotion-25 *::before,
.emotion-25 *::after {
  box-sizing: inherit;
}

.emotion-16 {
  color: #333840;
  cursor: pointer;
  display: block;
  font-weight: 400;
  padding: 0.5em 1em;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-16:focus {
  background-color: #f5f7fa;
  outline: 0;
}

.emotion-16:hover {
  background-color: #f5f7fa;
}

.emotion-16:active {
  background-color: #ebeff5;
}

.emotion-16[aria-selected="true"] {
  background-color: #f0f5fc;
  font-weight: 700;
}

.emotion-16[aria-selected="true"]:active {
  background-color: #accbfc;
}

.emotion-16 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-16 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-16 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-15 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.emotion-14 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  padding: 0.1875em 0 0.25em;
  white-space: normal;
  word-break: break-all;
}

.emotion-13 {
  font-size: 0.875em;
  margin-right: 0.5714285714285714em;
  word-break: break-word;
}

.emotion-33 {
  background-color: aliceblue;
  margin: 0 0 105px 0;
  overflow: hidden;
  padding: 25px;
}

<Styled(div)>
  <div
    className="emotion-33"
  >
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      isOpen={true}
      itemKey="value"
      placeholder="Select..."
      placement="bottom-start"
      size="large"
    >
      <Styled(WithTheme(Themed(Dropdown)))
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        id="select-52"
        isOpen={true}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Select..."
        placement="bottom-start"
        size="large"
      >
        <WithTheme(Themed(Dropdown))
          className="emotion-28"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          id="select-52"
          isOpen={true}
          itemKey="value"
          menu={[Function]}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placeholder="Select..."
          placement="bottom-start"
          size="large"
        >
          <Themed(Dropdown)
            className="emotion-28"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            id="select-52"
            isOpen={true}
            itemKey="value"
            menu={[Function]}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placeholder="Select..."
            placement="bottom-start"
            size="large"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="emotion-28"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  id="select-52"
                  isOpen={true}
                  itemKey="value"
                  menu={[Function]}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="Select..."
                  placement="bottom-start"
                  size="large"
                >
                  <Popover
                    className="emotion-28"
                    content={[Function]}
                    focusTriggerOnClose={true}
                    hasArrow={true}
                    id="select-52"
                    isOpen={true}
                    itemKey="value"
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Select..."
                    placement="bottom-start"
                    size="large"
                    triggerRef={[Function]}
                  >
                    <Manager>
                      <Styled(span)
                        className="emotion-28"
                        content={[Function]}
                        focusTriggerOnClose={true}
                        hasArrow={true}
                        id="select-52"
                        isOpen={true}
                        itemKey="value"
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Select..."
                        placement="bottom-start"
                        size="large"
                        triggerRef={[Function]}
                      >
                        <span
                          className="emotion-27"
                          content={[Function]}
                          id="select-52"
                          onClose={[Function]}
                          onOpen={[Function]}
                          placeholder="Select..."
                          size="large"
                        >
                          <PopoverTrigger
                            aria-activedescendant="select-52-menu"
                            aria-describedby="select-52-content"
                            aria-expanded={true}
                            aria-haspopup="listbox"
                            aria-owns="select-52-content"
                            isOpen={true}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            placeholder="Select..."
                            role="button"
                            size="large"
                            tabIndex={0}
                            triggerRef={[Function]}
                          >
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <Styled(span)>
                                  <span
                                    className="emotion-12"
                                  >
                                    <SelectTrigger
                                      aria-activedescendant="select-52-menu"
                                      aria-describedby="select-52-content"
                                      aria-expanded={true}
                                      aria-haspopup="listbox"
                                      aria-owns="select-52-content"
                                      isOpen={true}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      placeholder="Select..."
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                      triggerRef={[Function]}
                                    >
                                      <Styled(WithTheme(Themed(FauxControl)))
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownUp)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-activedescendant="select-52-menu"
                                        aria-describedby="select-52-content"
                                        aria-expanded={true}
                                        aria-haspopup="listbox"
                                        aria-owns="select-52-content"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <WithTheme(Themed(FauxControl))
                                          afterItems={
                                            Array [
                                              <withProps(Styled(IconArrowDropdownUp)) />,
                                              <input
                                                onClick={[Function]}
                                                type="hidden"
                                                value=""
                                              />,
                                            ]
                                          }
                                          aria-activedescendant="select-52-menu"
                                          aria-describedby="select-52-content"
                                          aria-expanded={true}
                                          aria-haspopup="listbox"
                                          aria-owns="select-52-content"
                                          className="emotion-8"
                                          control={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "__emotion_base": "div",
                                              "__emotion_forwardProp": undefined,
                                              "__emotion_real": [Circular],
                                              "__emotion_styles": Array [
                                                [Function],
                                              ],
                                              "defaultProps": undefined,
                                              "displayName": "Styled(div)",
                                              "render": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          controlProps={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          fauxControlRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                        >
                                          <Themed(FauxControl)
                                            afterItems={
                                              Array [
                                                <withProps(Styled(IconArrowDropdownUp)) />,
                                                <input
                                                  onClick={[Function]}
                                                  type="hidden"
                                                  value=""
                                                />,
                                              ]
                                            }
                                            aria-activedescendant="select-52-menu"
                                            aria-describedby="select-52-content"
                                            aria-expanded={true}
                                            aria-haspopup="listbox"
                                            aria-owns="select-52-content"
                                            className="emotion-8"
                                            control={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "__emotion_base": "div",
                                                "__emotion_forwardProp": undefined,
                                                "__emotion_real": [Circular],
                                                "__emotion_styles": Array [
                                                  [Function],
                                                ],
                                                "defaultProps": undefined,
                                                "displayName": "Styled(div)",
                                                "render": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            controlProps={
                                              Object {
                                                "hasPlaceholder": true,
                                                "variant": undefined,
                                              }
                                            }
                                            fauxControlRef={[Function]}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            size="large"
                                            tabIndex={0}
                                          >
                                            <ThemeProvider>
                                              <ThemeProvider>
                                                <FauxControl
                                                  afterItems={
                                                    Array [
                                                      <withProps(Styled(IconArrowDropdownUp)) />,
                                                      <input
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />,
                                                    ]
                                                  }
                                                  aria-activedescendant="select-52-menu"
                                                  aria-describedby="select-52-content"
                                                  aria-expanded={true}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-52-content"
                                                  className="emotion-8"
                                                  control={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "__emotion_base": "div",
                                                      "__emotion_forwardProp": undefined,
                                                      "__emotion_real": [Circular],
                                                      "__emotion_styles": Array [
                                                        [Function],
                                                      ],
                                                      "defaultProps": undefined,
                                                      "displayName": "Styled(div)",
                                                      "render": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  controlProps={
                                                    Object {
                                                      "hasPlaceholder": true,
                                                      "variant": undefined,
                                                    }
                                                  }
                                                  fauxControlRef={[Function]}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  size="large"
                                                  tabIndex={0}
                                                >
                                                  <Styled(div)
                                                    aria-activedescendant="select-52-menu"
                                                    aria-describedby="select-52-content"
                                                    aria-expanded={true}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-52-content"
                                                    className="emotion-8"
                                                    control={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "__emotion_base": "div",
                                                        "__emotion_forwardProp": undefined,
                                                        "__emotion_real": [Circular],
                                                        "__emotion_styles": Array [
                                                          [Function],
                                                        ],
                                                        "defaultProps": undefined,
                                                        "displayName": "Styled(div)",
                                                        "render": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    <div
                                                      aria-activedescendant="select-52-menu"
                                                      aria-describedby="select-52-content"
                                                      aria-expanded={true}
                                                      aria-haspopup="listbox"
                                                      aria-owns="select-52-content"
                                                      className="emotion-7"
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      <Styled(div)
                                                        controlPropsIn={
                                                          Object {
                                                            "hasPlaceholder": true,
                                                            "variant": undefined,
                                                          }
                                                        }
                                                        hasPlaceholder={true}
                                                        key="control"
                                                        size="large"
                                                      >
                                                        <div
                                                          className="emotion-1"
                                                          size="large"
                                                        >
                                                          <Styled(span)>
                                                            <span
                                                              className="emotion-0"
                                                            >
                                                              Select...
                                                            </span>
                                                          </Styled(span)>
                                                        </div>
                                                      </Styled(div)>
                                                      <withProps(Styled(IconArrowDropdownUp))
                                                        key="arrow"
                                                      >
                                                        <Styled(IconArrowDropdownUp)
                                                          size="1.5em"
                                                        >
                                                          <IconArrowDropdownUp
                                                            className="emotion-3"
                                                            size="1.5em"
                                                          >
                                                            <Icon
                                                              className="emotion-3"
                                                              rtl={false}
                                                              size="1.5em"
                                                            >
                                                              <Styled(svg)
                                                                aria-hidden={true}
                                                                className="emotion-3"
                                                                focusable="false"
                                                                role="img"
                                                                rtl={false}
                                                                size="1.5em"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="emotion-2"
                                                                  focusable="false"
                                                                  role="img"
                                                                  size="1.5em"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <g>
                                                                    <path
                                                                      d="M12 7.5l8 8H4z"
                                                                    />
                                                                  </g>
                                                                </svg>
                                                              </Styled(svg)>
                                                            </Icon>
                                                          </IconArrowDropdownUp>
                                                        </Styled(IconArrowDropdownUp)>
                                                      </withProps(Styled(IconArrowDropdownUp))>
                                                      <input
                                                        key="input"
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />
                                                      <Styled(div)>
                                                        <div
                                                          className="emotion-6"
                                                        />
                                                      </Styled(div)>
                                                    </div>
                                                  </Styled(div)>
                                                </FauxControl>
                                              </ThemeProvider>
                                            </ThemeProvider>
                                          </Themed(FauxControl)>
                                        </WithTheme(Themed(FauxControl))>
                                      </Styled(WithTheme(Themed(FauxControl)))>
                                    </SelectTrigger>
                                  </span>
                                </Styled(span)>
                              </InnerReference>
                            </Reference>
                          </PopoverTrigger>
                          <DropdownContent
                            hasArrow={true}
                            id="select-52-content"
                            modifiers={
                              Object {
                                "contentWidth": Object {
                                  "enabled": true,
                                  "fn": [Function],
                                },
                              }
                            }
                            onBlur={[Function]}
                            placement="bottom-start"
                          >
                            <WithTheme(RtlPopper)
                              modifiers={
                                Object {
                                  "contentWidth": Object {
                                    "enabled": true,
                                    "fn": [Function],
                                  },
                                }
                              }
                              placement="bottom-start"
                            >
                              <RtlPopper
                                modifiers={
                                  Object {
                                    "contentWidth": Object {
                                      "enabled": true,
                                      "fn": [Function],
                                    },
                                  }
                                }
                                placement="bottom-start"
                              >
                                <Popper
                                  modifiers={
                                    Object {
                                      "contentWidth": Object {
                                        "enabled": true,
                                        "fn": [Function],
                                      },
                                    }
                                  }
                                  placement="bottom-start"
                                >
                                  <InnerPopper
                                    eventsEnabled={true}
                                    modifiers={
                                      Object {
                                        "contentWidth": Object {
                                          "enabled": true,
                                          "fn": [Function],
                                        },
                                      }
                                    }
                                    placement="bottom-start"
                                    positionFixed={false}
                                    referenceElement={
                                      .emotion-5 {
  display: inline-block;
}

.emotion-4 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-4 *,
.emotion-4 *::before,
.emotion-4 *::after {
  box-sizing: inherit;
}

.emotion-4:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-4:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-4:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-4 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-4 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-4 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-4 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-3 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

<span
                                        class="emotion-5"
                                      >
                                        <div
                                          aria-activedescendant="select-52-menu"
                                          aria-describedby="select-52-content"
                                          aria-expanded="true"
                                          aria-haspopup="listbox"
                                          aria-owns="select-52-content"
                                          class="emotion-4"
                                          role="button"
                                          tabindex="0"
                                        >
                                          <div
                                            class="emotion-1"
                                          >
                                            <span
                                              class="emotion-0"
                                            >
                                              Select...
                                            </span>
                                          </div>
                                          <svg
                                            aria-hidden="true"
                                            class="emotion-2"
                                            focusable="false"
                                            role="img"
                                            viewBox="0 0 24 24"
                                          >
                                            <g>
                                              <path
                                                d="M12 7.5l8 8H4z"
                                              />
                                            </g>
                                          </svg>
                                          <input
                                            type="hidden"
                                            value=""
                                          />
                                          <div
                                            class="emotion-3"
                                          />
                                        </div>
                                      </span>
                                    }
                                  >
                                    <Styled(div)
                                      hasArrow={true}
                                      id="select-52-content"
                                      onBlur={[Function]}
                                      style={
                                        Object {
                                          "left": 0,
                                          "opacity": 0,
                                          "pointerEvents": "none",
                                          "position": "absolute",
                                          "top": 0,
                                        }
                                      }
                                    >
                                      <div
                                        className="emotion-26"
                                        id="select-52-content"
                                        onBlur={[Function]}
                                        style={
                                          Object {
                                            "left": 0,
                                            "opacity": 0,
                                            "pointerEvents": "none",
                                            "position": "absolute",
                                            "top": 0,
                                          }
                                        }
                                      >
                                        <Menu
                                          data={
                                            Array [
                                              Object {
                                                "text": "Alpha",
                                                "value": "alpha",
                                              },
                                              Object {
                                                "text": "Beta",
                                                "value": "beta",
                                              },
                                              Object {
                                                "text": "Gamma",
                                                "value": "gamma",
                                              },
                                            ]
                                          }
                                          id="select-52-menu"
                                          item={[Function]}
                                          itemKey="value"
                                          role="listbox"
                                        >
                                          <Styled(div)
                                            id="select-52-menu"
                                            item={[Function]}
                                            itemKey="value"
                                            role="listbox"
                                          >
                                            <div
                                              className="emotion-25"
                                              id="select-52-menu"
                                              role="listbox"
                                            >
                                              <MenuItem
                                                element="div"
                                                index={0}
                                                isHighlighted={false}
                                                item={
                                                  Object {
                                                    "text": "Alpha",
                                                    "value": "alpha",
                                                  }
                                                }
                                                key="alpha"
                                                render={[Function]}
                                                text="Alpha"
                                                value="alpha"
                                              >
                                                <MenuItem
                                                  aria-selected={false}
                                                  element="div"
                                                  id="select-52-item-0"
                                                  index={0}
                                                  isHighlighted={false}
                                                  item={
                                                    Object {
                                                      "text": "Alpha",
                                                      "value": "alpha",
                                                    }
                                                  }
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  role="option"
                                                  tabIndex={null}
                                                  text="Alpha"
                                                  value="alpha"
                                                >
                                                  <Styled(div)
                                                    aria-selected={false}
                                                    element="div"
                                                    id="select-52-item-0"
                                                    index={0}
                                                    isHighlighted={false}
                                                    item={
                                                      Object {
                                                        "text": "Alpha",
                                                        "value": "alpha",
                                                      }
                                                    }
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    role="option"
                                                    tabIndex={null}
                                                    text="Alpha"
                                                    value="alpha"
                                                  >
                                                    <div
                                                      aria-selected={false}
                                                      className="emotion-16"
                                                      id="select-52-item-0"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="option"
                                                      tabIndex={null}
                                                      value="alpha"
                                                    >
                                                      <Styled(span)>
                                                        <span
                                                          className="emotion-15"
                                                        >
                                                          <Styled(span)>
                                                            <span
                                                              className="emotion-14"
                                                            >
                                                              <Styled(span)>
                                                                <span
                                                                  className="emotion-13"
                                                                >
                                                                  Alpha
                                                                </span>
                                                              </Styled(span)>
                                                            </span>
                                                          </Styled(span)>
                                                        </span>
                                                      </Styled(span)>
                                                    </div>
                                                  </Styled(div)>
                                                </MenuItem>
                                              </MenuItem>
                                              <MenuItem
                                                element="div"
                                                index={1}
                                                isHighlighted={false}
                                                item={
                                                  Object {
                                                    "text": "Beta",
                                                    "value": "beta",
                                                  }
                                                }
                                                key="beta"
                                                render={[Function]}
                                                text="Beta"
                                                value="beta"
                                              >
                                                <MenuItem
                                                  aria-selected={false}
                                                  element="div"
                                                  id="select-52-item-1"
                                                  index={1}
                                                  isHighlighted={false}
                                                  item={
                                                    Object {
                                                      "text": "Beta",
                                                      "value": "beta",
                                                    }
                                                  }
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  role="option"
                                                  tabIndex={null}
                                                  text="Beta"
                                                  value="beta"
                                                >
                                                  <Styled(div)
                                                    aria-selected={false}
                                                    element="div"
                                                    id="select-52-item-1"
                                                    index={1}
                                                    isHighlighted={false}
                                                    item={
                                                      Object {
                                                        "text": "Beta",
                                                        "value": "beta",
                                                      }
                                                    }
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    role="option"
                                                    tabIndex={null}
                                                    text="Beta"
                                                    value="beta"
                                                  >
                                                    <div
                                                      aria-selected={false}
                                                      className="emotion-16"
                                                      id="select-52-item-1"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="option"
                                                      tabIndex={null}
                                                      value="beta"
                                                    >
                                                      <Styled(span)>
                                                        <span
                                                          className="emotion-15"
                                                        >
                                                          <Styled(span)>
                                                            <span
                                                              className="emotion-14"
                                                            >
                                                              <Styled(span)>
                                                                <span
                                                                  className="emotion-13"
                                                                >
                                                                  Beta
                                                                </span>
                                                              </Styled(span)>
                                                            </span>
                                                          </Styled(span)>
                                                        </span>
                                                      </Styled(span)>
                                                    </div>
                                                  </Styled(div)>
                                                </MenuItem>
                                              </MenuItem>
                                              <MenuItem
                                                element="div"
                                                index={2}
                                                isHighlighted={false}
                                                item={
                                                  Object {
                                                    "text": "Gamma",
                                                    "value": "gamma",
                                                  }
                                                }
                                                key="gamma"
                                                render={[Function]}
                                                text="Gamma"
                                                value="gamma"
                                              >
                                                <MenuItem
                                                  aria-selected={false}
                                                  element="div"
                                                  id="select-52-item-2"
                                                  index={2}
                                                  isHighlighted={false}
                                                  item={
                                                    Object {
                                                      "text": "Gamma",
                                                      "value": "gamma",
                                                    }
                                                  }
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  role="option"
                                                  tabIndex={null}
                                                  text="Gamma"
                                                  value="gamma"
                                                >
                                                  <Styled(div)
                                                    aria-selected={false}
                                                    element="div"
                                                    id="select-52-item-2"
                                                    index={2}
                                                    isHighlighted={false}
                                                    item={
                                                      Object {
                                                        "text": "Gamma",
                                                        "value": "gamma",
                                                      }
                                                    }
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    role="option"
                                                    tabIndex={null}
                                                    text="Gamma"
                                                    value="gamma"
                                                  >
                                                    <div
                                                      aria-selected={false}
                                                      className="emotion-16"
                                                      id="select-52-item-2"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="option"
                                                      tabIndex={null}
                                                      value="gamma"
                                                    >
                                                      <Styled(span)>
                                                        <span
                                                          className="emotion-15"
                                                        >
                                                          <Styled(span)>
                                                            <span
                                                              className="emotion-14"
                                                            >
                                                              <Styled(span)>
                                                                <span
                                                                  className="emotion-13"
                                                                >
                                                                  Gamma
                                                                </span>
                                                              </Styled(span)>
                                                            </span>
                                                          </Styled(span)>
                                                        </span>
                                                      </Styled(span)>
                                                    </div>
                                                  </Styled(div)>
                                                </MenuItem>
                                              </MenuItem>
                                            </div>
                                          </Styled(div)>
                                        </Menu>
                                      </div>
                                    </Styled(div)>
                                  </InnerPopper>
                                </Popper>
                              </RtlPopper>
                            </WithTheme(RtlPopper)>
                          </DropdownContent>
                          <EventListener
                            listeners={
                              Array [
                                Object {
                                  "event": "click",
                                  "handler": [Function],
                                  "options": true,
                                  "target": "document",
                                },
                                Object {
                                  "event": "keydown",
                                  "handler": [Function],
                                  "options": true,
                                  "target": "document",
                                },
                              ]
                            }
                          />
                        </span>
                      </Styled(span)>
                    </Manager>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </WithTheme(Themed(Dropdown))>
      </Styled(WithTheme(Themed(Dropdown)))>
    </Select>
  </div>
</Styled(div)>
`;

exports[`Select demo examples Snapshots: placeholder 1`] = `
.emotion-14 {
  width: 100%;
}

.emotion-14 > span {
  width: 100%;
}

.emotion-13 {
  display: inline-block;
  width: 100%;
}

.emotion-13 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-7:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-3 {
  margin: 0.5em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-6 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

<Select
  data={
    Array [
      Object {
        "text": "Alabama",
        "value": "AL",
      },
      Object {
        "text": "Alaska",
        "value": "AK",
      },
      Object {
        "text": "Arizona",
        "value": "AZ",
      },
      Object {
        "text": "Arkansas",
        "value": "AR",
      },
      Object {
        "text": "California",
        "value": "CA",
      },
      Object {
        "text": "Colorado",
        "value": "CO",
      },
      Object {
        "text": "Connecticut",
        "value": "CT",
      },
      Object {
        "text": "Delaware",
        "value": "DE",
      },
      Object {
        "text": "Florida",
        "value": "FL",
      },
      Object {
        "text": "Georgia",
        "value": "GA",
      },
      Object {
        "text": "Hawaii",
        "value": "HI",
      },
      Object {
        "text": "Idaho",
        "value": "ID",
      },
      Object {
        "text": "Illinois",
        "value": "IL",
      },
      Object {
        "text": "Indiana",
        "value": "IN",
      },
      Object {
        "text": "Iowa",
        "value": "IA",
      },
      Object {
        "text": "Kansas",
        "value": "KS",
      },
      Object {
        "text": "Kentucky",
        "value": "KY",
      },
      Object {
        "text": "Louisiana",
        "value": "LA",
      },
      Object {
        "text": "Maine",
        "value": "ME",
      },
      Object {
        "text": "Maryland",
        "value": "MD",
      },
      Object {
        "text": "Massachusetts",
        "value": "MA",
      },
      Object {
        "text": "Michigan",
        "value": "MI",
      },
      Object {
        "text": "Minnesota",
        "value": "MN",
      },
      Object {
        "text": "Mississippi",
        "value": "MS",
      },
      Object {
        "text": "Missouri",
        "value": "MO",
      },
      Object {
        "text": "Montana",
        "value": "MT",
      },
      Object {
        "text": "Nebraska",
        "value": "NE",
      },
      Object {
        "text": "Nevada",
        "value": "NV",
      },
      Object {
        "text": "New Hampshire",
        "value": "NH",
      },
      Object {
        "text": "New Jersey",
        "value": "NJ",
      },
      Object {
        "text": "New Mexico",
        "value": "NM",
      },
      Object {
        "text": "New York",
        "value": "NY",
      },
      Object {
        "text": "North Carolina",
        "value": "NC",
      },
      Object {
        "text": "North Dakota",
        "value": "ND",
      },
      Object {
        "text": "Ohio",
        "value": "OH",
      },
      Object {
        "text": "Oklahoma",
        "value": "OK",
      },
      Object {
        "text": "Oregon",
        "value": "OR",
      },
      Object {
        "text": "Pennsylvania",
        "value": "PA",
      },
      Object {
        "text": "Rhode Island",
        "value": "RI",
      },
      Object {
        "text": "South Carolina",
        "value": "SC",
      },
      Object {
        "text": "South Dakota",
        "value": "SD",
      },
      Object {
        "text": "Tennessee",
        "value": "TN",
      },
      Object {
        "text": "Texas",
        "value": "TX",
      },
      Object {
        "text": "Utah",
        "value": "UT",
      },
      Object {
        "text": "Vermont",
        "value": "VT",
      },
      Object {
        "text": "Virginia",
        "value": "VA",
      },
      Object {
        "text": "Washington",
        "value": "WA",
      },
      Object {
        "text": "West Virginia",
        "value": "WV",
      },
      Object {
        "text": "Wisconsin",
        "value": "WI",
      },
      Object {
        "text": "Wyoming",
        "value": "WY",
      },
    ]
  }
  itemKey="value"
  placeholder="Choose a state..."
  placement="bottom-start"
  size="large"
>
  <Styled(WithTheme(Themed(Dropdown)))
    data={
      Array [
        Object {
          "text": "Alabama",
          "value": "AL",
        },
        Object {
          "text": "Alaska",
          "value": "AK",
        },
        Object {
          "text": "Arizona",
          "value": "AZ",
        },
        Object {
          "text": "Arkansas",
          "value": "AR",
        },
        Object {
          "text": "California",
          "value": "CA",
        },
        Object {
          "text": "Colorado",
          "value": "CO",
        },
        Object {
          "text": "Connecticut",
          "value": "CT",
        },
        Object {
          "text": "Delaware",
          "value": "DE",
        },
        Object {
          "text": "Florida",
          "value": "FL",
        },
        Object {
          "text": "Georgia",
          "value": "GA",
        },
        Object {
          "text": "Hawaii",
          "value": "HI",
        },
        Object {
          "text": "Idaho",
          "value": "ID",
        },
        Object {
          "text": "Illinois",
          "value": "IL",
        },
        Object {
          "text": "Indiana",
          "value": "IN",
        },
        Object {
          "text": "Iowa",
          "value": "IA",
        },
        Object {
          "text": "Kansas",
          "value": "KS",
        },
        Object {
          "text": "Kentucky",
          "value": "KY",
        },
        Object {
          "text": "Louisiana",
          "value": "LA",
        },
        Object {
          "text": "Maine",
          "value": "ME",
        },
        Object {
          "text": "Maryland",
          "value": "MD",
        },
        Object {
          "text": "Massachusetts",
          "value": "MA",
        },
        Object {
          "text": "Michigan",
          "value": "MI",
        },
        Object {
          "text": "Minnesota",
          "value": "MN",
        },
        Object {
          "text": "Mississippi",
          "value": "MS",
        },
        Object {
          "text": "Missouri",
          "value": "MO",
        },
        Object {
          "text": "Montana",
          "value": "MT",
        },
        Object {
          "text": "Nebraska",
          "value": "NE",
        },
        Object {
          "text": "Nevada",
          "value": "NV",
        },
        Object {
          "text": "New Hampshire",
          "value": "NH",
        },
        Object {
          "text": "New Jersey",
          "value": "NJ",
        },
        Object {
          "text": "New Mexico",
          "value": "NM",
        },
        Object {
          "text": "New York",
          "value": "NY",
        },
        Object {
          "text": "North Carolina",
          "value": "NC",
        },
        Object {
          "text": "North Dakota",
          "value": "ND",
        },
        Object {
          "text": "Ohio",
          "value": "OH",
        },
        Object {
          "text": "Oklahoma",
          "value": "OK",
        },
        Object {
          "text": "Oregon",
          "value": "OR",
        },
        Object {
          "text": "Pennsylvania",
          "value": "PA",
        },
        Object {
          "text": "Rhode Island",
          "value": "RI",
        },
        Object {
          "text": "South Carolina",
          "value": "SC",
        },
        Object {
          "text": "South Dakota",
          "value": "SD",
        },
        Object {
          "text": "Tennessee",
          "value": "TN",
        },
        Object {
          "text": "Texas",
          "value": "TX",
        },
        Object {
          "text": "Utah",
          "value": "UT",
        },
        Object {
          "text": "Vermont",
          "value": "VT",
        },
        Object {
          "text": "Virginia",
          "value": "VA",
        },
        Object {
          "text": "Washington",
          "value": "WA",
        },
        Object {
          "text": "West Virginia",
          "value": "WV",
        },
        Object {
          "text": "Wisconsin",
          "value": "WI",
        },
        Object {
          "text": "Wyoming",
          "value": "WY",
        },
      ]
    }
    id="select-10"
    isOpen={false}
    itemKey="value"
    menu={[Function]}
    modifiers={
      Object {
        "contentWidth": Object {
          "enabled": true,
          "fn": [Function],
        },
      }
    }
    onClose={[Function]}
    onOpen={[Function]}
    placeholder="Choose a state..."
    placement="bottom-start"
    size="large"
  >
    <WithTheme(Themed(Dropdown))
      className="emotion-14"
      data={
        Array [
          Object {
            "text": "Alabama",
            "value": "AL",
          },
          Object {
            "text": "Alaska",
            "value": "AK",
          },
          Object {
            "text": "Arizona",
            "value": "AZ",
          },
          Object {
            "text": "Arkansas",
            "value": "AR",
          },
          Object {
            "text": "California",
            "value": "CA",
          },
          Object {
            "text": "Colorado",
            "value": "CO",
          },
          Object {
            "text": "Connecticut",
            "value": "CT",
          },
          Object {
            "text": "Delaware",
            "value": "DE",
          },
          Object {
            "text": "Florida",
            "value": "FL",
          },
          Object {
            "text": "Georgia",
            "value": "GA",
          },
          Object {
            "text": "Hawaii",
            "value": "HI",
          },
          Object {
            "text": "Idaho",
            "value": "ID",
          },
          Object {
            "text": "Illinois",
            "value": "IL",
          },
          Object {
            "text": "Indiana",
            "value": "IN",
          },
          Object {
            "text": "Iowa",
            "value": "IA",
          },
          Object {
            "text": "Kansas",
            "value": "KS",
          },
          Object {
            "text": "Kentucky",
            "value": "KY",
          },
          Object {
            "text": "Louisiana",
            "value": "LA",
          },
          Object {
            "text": "Maine",
            "value": "ME",
          },
          Object {
            "text": "Maryland",
            "value": "MD",
          },
          Object {
            "text": "Massachusetts",
            "value": "MA",
          },
          Object {
            "text": "Michigan",
            "value": "MI",
          },
          Object {
            "text": "Minnesota",
            "value": "MN",
          },
          Object {
            "text": "Mississippi",
            "value": "MS",
          },
          Object {
            "text": "Missouri",
            "value": "MO",
          },
          Object {
            "text": "Montana",
            "value": "MT",
          },
          Object {
            "text": "Nebraska",
            "value": "NE",
          },
          Object {
            "text": "Nevada",
            "value": "NV",
          },
          Object {
            "text": "New Hampshire",
            "value": "NH",
          },
          Object {
            "text": "New Jersey",
            "value": "NJ",
          },
          Object {
            "text": "New Mexico",
            "value": "NM",
          },
          Object {
            "text": "New York",
            "value": "NY",
          },
          Object {
            "text": "North Carolina",
            "value": "NC",
          },
          Object {
            "text": "North Dakota",
            "value": "ND",
          },
          Object {
            "text": "Ohio",
            "value": "OH",
          },
          Object {
            "text": "Oklahoma",
            "value": "OK",
          },
          Object {
            "text": "Oregon",
            "value": "OR",
          },
          Object {
            "text": "Pennsylvania",
            "value": "PA",
          },
          Object {
            "text": "Rhode Island",
            "value": "RI",
          },
          Object {
            "text": "South Carolina",
            "value": "SC",
          },
          Object {
            "text": "South Dakota",
            "value": "SD",
          },
          Object {
            "text": "Tennessee",
            "value": "TN",
          },
          Object {
            "text": "Texas",
            "value": "TX",
          },
          Object {
            "text": "Utah",
            "value": "UT",
          },
          Object {
            "text": "Vermont",
            "value": "VT",
          },
          Object {
            "text": "Virginia",
            "value": "VA",
          },
          Object {
            "text": "Washington",
            "value": "WA",
          },
          Object {
            "text": "West Virginia",
            "value": "WV",
          },
          Object {
            "text": "Wisconsin",
            "value": "WI",
          },
          Object {
            "text": "Wyoming",
            "value": "WY",
          },
        ]
      }
      id="select-10"
      isOpen={false}
      itemKey="value"
      menu={[Function]}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      onClose={[Function]}
      onOpen={[Function]}
      placeholder="Choose a state..."
      placement="bottom-start"
      size="large"
    >
      <Themed(Dropdown)
        className="emotion-14"
        data={
          Array [
            Object {
              "text": "Alabama",
              "value": "AL",
            },
            Object {
              "text": "Alaska",
              "value": "AK",
            },
            Object {
              "text": "Arizona",
              "value": "AZ",
            },
            Object {
              "text": "Arkansas",
              "value": "AR",
            },
            Object {
              "text": "California",
              "value": "CA",
            },
            Object {
              "text": "Colorado",
              "value": "CO",
            },
            Object {
              "text": "Connecticut",
              "value": "CT",
            },
            Object {
              "text": "Delaware",
              "value": "DE",
            },
            Object {
              "text": "Florida",
              "value": "FL",
            },
            Object {
              "text": "Georgia",
              "value": "GA",
            },
            Object {
              "text": "Hawaii",
              "value": "HI",
            },
            Object {
              "text": "Idaho",
              "value": "ID",
            },
            Object {
              "text": "Illinois",
              "value": "IL",
            },
            Object {
              "text": "Indiana",
              "value": "IN",
            },
            Object {
              "text": "Iowa",
              "value": "IA",
            },
            Object {
              "text": "Kansas",
              "value": "KS",
            },
            Object {
              "text": "Kentucky",
              "value": "KY",
            },
            Object {
              "text": "Louisiana",
              "value": "LA",
            },
            Object {
              "text": "Maine",
              "value": "ME",
            },
            Object {
              "text": "Maryland",
              "value": "MD",
            },
            Object {
              "text": "Massachusetts",
              "value": "MA",
            },
            Object {
              "text": "Michigan",
              "value": "MI",
            },
            Object {
              "text": "Minnesota",
              "value": "MN",
            },
            Object {
              "text": "Mississippi",
              "value": "MS",
            },
            Object {
              "text": "Missouri",
              "value": "MO",
            },
            Object {
              "text": "Montana",
              "value": "MT",
            },
            Object {
              "text": "Nebraska",
              "value": "NE",
            },
            Object {
              "text": "Nevada",
              "value": "NV",
            },
            Object {
              "text": "New Hampshire",
              "value": "NH",
            },
            Object {
              "text": "New Jersey",
              "value": "NJ",
            },
            Object {
              "text": "New Mexico",
              "value": "NM",
            },
            Object {
              "text": "New York",
              "value": "NY",
            },
            Object {
              "text": "North Carolina",
              "value": "NC",
            },
            Object {
              "text": "North Dakota",
              "value": "ND",
            },
            Object {
              "text": "Ohio",
              "value": "OH",
            },
            Object {
              "text": "Oklahoma",
              "value": "OK",
            },
            Object {
              "text": "Oregon",
              "value": "OR",
            },
            Object {
              "text": "Pennsylvania",
              "value": "PA",
            },
            Object {
              "text": "Rhode Island",
              "value": "RI",
            },
            Object {
              "text": "South Carolina",
              "value": "SC",
            },
            Object {
              "text": "South Dakota",
              "value": "SD",
            },
            Object {
              "text": "Tennessee",
              "value": "TN",
            },
            Object {
              "text": "Texas",
              "value": "TX",
            },
            Object {
              "text": "Utah",
              "value": "UT",
            },
            Object {
              "text": "Vermont",
              "value": "VT",
            },
            Object {
              "text": "Virginia",
              "value": "VA",
            },
            Object {
              "text": "Washington",
              "value": "WA",
            },
            Object {
              "text": "West Virginia",
              "value": "WV",
            },
            Object {
              "text": "Wisconsin",
              "value": "WI",
            },
            Object {
              "text": "Wyoming",
              "value": "WY",
            },
          ]
        }
        id="select-10"
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Choose a state..."
        placement="bottom-start"
        size="large"
      >
        <ThemeProvider>
          <ThemeProvider>
            <Dropdown
              className="emotion-14"
              data={
                Array [
                  Object {
                    "text": "Alabama",
                    "value": "AL",
                  },
                  Object {
                    "text": "Alaska",
                    "value": "AK",
                  },
                  Object {
                    "text": "Arizona",
                    "value": "AZ",
                  },
                  Object {
                    "text": "Arkansas",
                    "value": "AR",
                  },
                  Object {
                    "text": "California",
                    "value": "CA",
                  },
                  Object {
                    "text": "Colorado",
                    "value": "CO",
                  },
                  Object {
                    "text": "Connecticut",
                    "value": "CT",
                  },
                  Object {
                    "text": "Delaware",
                    "value": "DE",
                  },
                  Object {
                    "text": "Florida",
                    "value": "FL",
                  },
                  Object {
                    "text": "Georgia",
                    "value": "GA",
                  },
                  Object {
                    "text": "Hawaii",
                    "value": "HI",
                  },
                  Object {
                    "text": "Idaho",
                    "value": "ID",
                  },
                  Object {
                    "text": "Illinois",
                    "value": "IL",
                  },
                  Object {
                    "text": "Indiana",
                    "value": "IN",
                  },
                  Object {
                    "text": "Iowa",
                    "value": "IA",
                  },
                  Object {
                    "text": "Kansas",
                    "value": "KS",
                  },
                  Object {
                    "text": "Kentucky",
                    "value": "KY",
                  },
                  Object {
                    "text": "Louisiana",
                    "value": "LA",
                  },
                  Object {
                    "text": "Maine",
                    "value": "ME",
                  },
                  Object {
                    "text": "Maryland",
                    "value": "MD",
                  },
                  Object {
                    "text": "Massachusetts",
                    "value": "MA",
                  },
                  Object {
                    "text": "Michigan",
                    "value": "MI",
                  },
                  Object {
                    "text": "Minnesota",
                    "value": "MN",
                  },
                  Object {
                    "text": "Mississippi",
                    "value": "MS",
                  },
                  Object {
                    "text": "Missouri",
                    "value": "MO",
                  },
                  Object {
                    "text": "Montana",
                    "value": "MT",
                  },
                  Object {
                    "text": "Nebraska",
                    "value": "NE",
                  },
                  Object {
                    "text": "Nevada",
                    "value": "NV",
                  },
                  Object {
                    "text": "New Hampshire",
                    "value": "NH",
                  },
                  Object {
                    "text": "New Jersey",
                    "value": "NJ",
                  },
                  Object {
                    "text": "New Mexico",
                    "value": "NM",
                  },
                  Object {
                    "text": "New York",
                    "value": "NY",
                  },
                  Object {
                    "text": "North Carolina",
                    "value": "NC",
                  },
                  Object {
                    "text": "North Dakota",
                    "value": "ND",
                  },
                  Object {
                    "text": "Ohio",
                    "value": "OH",
                  },
                  Object {
                    "text": "Oklahoma",
                    "value": "OK",
                  },
                  Object {
                    "text": "Oregon",
                    "value": "OR",
                  },
                  Object {
                    "text": "Pennsylvania",
                    "value": "PA",
                  },
                  Object {
                    "text": "Rhode Island",
                    "value": "RI",
                  },
                  Object {
                    "text": "South Carolina",
                    "value": "SC",
                  },
                  Object {
                    "text": "South Dakota",
                    "value": "SD",
                  },
                  Object {
                    "text": "Tennessee",
                    "value": "TN",
                  },
                  Object {
                    "text": "Texas",
                    "value": "TX",
                  },
                  Object {
                    "text": "Utah",
                    "value": "UT",
                  },
                  Object {
                    "text": "Vermont",
                    "value": "VT",
                  },
                  Object {
                    "text": "Virginia",
                    "value": "VA",
                  },
                  Object {
                    "text": "Washington",
                    "value": "WA",
                  },
                  Object {
                    "text": "West Virginia",
                    "value": "WV",
                  },
                  Object {
                    "text": "Wisconsin",
                    "value": "WI",
                  },
                  Object {
                    "text": "Wyoming",
                    "value": "WY",
                  },
                ]
              }
              id="select-10"
              isOpen={false}
              itemKey="value"
              menu={[Function]}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placeholder="Choose a state..."
              placement="bottom-start"
              size="large"
            >
              <Popover
                className="emotion-14"
                content={[Function]}
                focusTriggerOnClose={true}
                hasArrow={true}
                id="select-10"
                isOpen={false}
                itemKey="value"
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placeholder="Choose a state..."
                placement="bottom-start"
                size="large"
                triggerRef={[Function]}
              >
                <Manager>
                  <Styled(span)
                    className="emotion-14"
                    content={[Function]}
                    focusTriggerOnClose={true}
                    hasArrow={true}
                    id="select-10"
                    isOpen={false}
                    itemKey="value"
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Choose a state..."
                    placement="bottom-start"
                    size="large"
                    triggerRef={[Function]}
                  >
                    <span
                      className="emotion-13"
                      content={[Function]}
                      id="select-10"
                      onClose={[Function]}
                      onOpen={[Function]}
                      placeholder="Choose a state..."
                      size="large"
                    >
                      <PopoverTrigger
                        aria-describedby="select-10-content"
                        aria-expanded={false}
                        aria-haspopup="listbox"
                        aria-owns="select-10-content"
                        isOpen={false}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        placeholder="Choose a state..."
                        role="button"
                        size="large"
                        tabIndex={0}
                        triggerRef={[Function]}
                      >
                        <Reference>
                          <InnerReference
                            getReferenceRef={[Function]}
                          >
                            <Styled(span)>
                              <span
                                className="emotion-12"
                              >
                                <SelectTrigger
                                  aria-describedby="select-10-content"
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-owns="select-10-content"
                                  isOpen={false}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  placeholder="Choose a state..."
                                  role="button"
                                  size="large"
                                  tabIndex={0}
                                  triggerRef={[Function]}
                                >
                                  <Styled(WithTheme(Themed(FauxControl)))
                                    afterItems={
                                      Array [
                                        <withProps(Styled(IconArrowDropdownDown)) />,
                                        <input
                                          onClick={[Function]}
                                          type="hidden"
                                          value=""
                                        />,
                                      ]
                                    }
                                    aria-describedby="select-10-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-10-content"
                                    control={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "__emotion_base": "div",
                                        "__emotion_forwardProp": undefined,
                                        "__emotion_real": [Circular],
                                        "__emotion_styles": Array [
                                          [Function],
                                        ],
                                        "defaultProps": undefined,
                                        "displayName": "Styled(div)",
                                        "render": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    controlProps={
                                      Object {
                                        "hasPlaceholder": true,
                                        "variant": undefined,
                                      }
                                    }
                                    fauxControlRef={[Function]}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                  >
                                    <WithTheme(Themed(FauxControl))
                                      afterItems={
                                        Array [
                                          <withProps(Styled(IconArrowDropdownDown)) />,
                                          <input
                                            onClick={[Function]}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-10-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-10-content"
                                      className="emotion-8"
                                      control={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "__emotion_base": "div",
                                          "__emotion_forwardProp": undefined,
                                          "__emotion_real": [Circular],
                                          "__emotion_styles": Array [
                                            [Function],
                                          ],
                                          "defaultProps": undefined,
                                          "displayName": "Styled(div)",
                                          "render": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                    >
                                      <Themed(FauxControl)
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-10-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-10-content"
                                        className="emotion-8"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <ThemeProvider>
                                          <ThemeProvider>
                                            <FauxControl
                                              afterItems={
                                                Array [
                                                  <withProps(Styled(IconArrowDropdownDown)) />,
                                                  <input
                                                    onClick={[Function]}
                                                    type="hidden"
                                                    value=""
                                                  />,
                                                ]
                                              }
                                              aria-describedby="select-10-content"
                                              aria-expanded={false}
                                              aria-haspopup="listbox"
                                              aria-owns="select-10-content"
                                              className="emotion-8"
                                              control={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "__emotion_base": "div",
                                                  "__emotion_forwardProp": undefined,
                                                  "__emotion_real": [Circular],
                                                  "__emotion_styles": Array [
                                                    [Function],
                                                  ],
                                                  "defaultProps": undefined,
                                                  "displayName": "Styled(div)",
                                                  "render": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              controlProps={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              fauxControlRef={[Function]}
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              role="button"
                                              size="large"
                                              tabIndex={0}
                                            >
                                              <Styled(div)
                                                aria-describedby="select-10-content"
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-owns="select-10-content"
                                                className="emotion-8"
                                                control={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "__emotion_base": "div",
                                                    "__emotion_forwardProp": undefined,
                                                    "__emotion_real": [Circular],
                                                    "__emotion_styles": Array [
                                                      [Function],
                                                    ],
                                                    "defaultProps": undefined,
                                                    "displayName": "Styled(div)",
                                                    "render": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                tabIndex={0}
                                              >
                                                <div
                                                  aria-describedby="select-10-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-10-content"
                                                  className="emotion-7"
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <Styled(div)
                                                    controlPropsIn={
                                                      Object {
                                                        "hasPlaceholder": true,
                                                        "variant": undefined,
                                                      }
                                                    }
                                                    hasPlaceholder={true}
                                                    key="control"
                                                    size="large"
                                                  >
                                                    <div
                                                      className="emotion-1"
                                                      size="large"
                                                    >
                                                      <Styled(span)>
                                                        <span
                                                          className="emotion-0"
                                                        >
                                                          Choose a state...
                                                        </span>
                                                      </Styled(span)>
                                                    </div>
                                                  </Styled(div)>
                                                  <withProps(Styled(IconArrowDropdownDown))
                                                    key="arrow"
                                                  >
                                                    <Styled(IconArrowDropdownDown)
                                                      size="1.5em"
                                                    >
                                                      <IconArrowDropdownDown
                                                        className="emotion-3"
                                                        size="1.5em"
                                                      >
                                                        <Icon
                                                          className="emotion-3"
                                                          rtl={false}
                                                          size="1.5em"
                                                        >
                                                          <Styled(svg)
                                                            aria-hidden={true}
                                                            className="emotion-3"
                                                            focusable="false"
                                                            role="img"
                                                            rtl={false}
                                                            size="1.5em"
                                                            viewBox="0 0 24 24"
                                                          >
                                                            <svg
                                                              aria-hidden={true}
                                                              className="emotion-2"
                                                              focusable="false"
                                                              role="img"
                                                              size="1.5em"
                                                              viewBox="0 0 24 24"
                                                            >
                                                              <g>
                                                                <path
                                                                  d="M12 17.5l-8-8h16z"
                                                                />
                                                              </g>
                                                            </svg>
                                                          </Styled(svg)>
                                                        </Icon>
                                                      </IconArrowDropdownDown>
                                                    </Styled(IconArrowDropdownDown)>
                                                  </withProps(Styled(IconArrowDropdownDown))>
                                                  <input
                                                    key="input"
                                                    onClick={[Function]}
                                                    type="hidden"
                                                    value=""
                                                  />
                                                  <Styled(div)>
                                                    <div
                                                      className="emotion-6"
                                                    />
                                                  </Styled(div)>
                                                </div>
                                              </Styled(div)>
                                            </FauxControl>
                                          </ThemeProvider>
                                        </ThemeProvider>
                                      </Themed(FauxControl)>
                                    </WithTheme(Themed(FauxControl))>
                                  </Styled(WithTheme(Themed(FauxControl)))>
                                </SelectTrigger>
                              </span>
                            </Styled(span)>
                          </InnerReference>
                        </Reference>
                      </PopoverTrigger>
                    </span>
                  </Styled(span)>
                </Manager>
              </Popover>
            </Dropdown>
          </ThemeProvider>
        </ThemeProvider>
      </Themed(Dropdown)>
    </WithTheme(Themed(Dropdown))>
  </Styled(WithTheme(Themed(Dropdown)))>
</Select>
`;

exports[`Select demo examples Snapshots: placement 1`] = `
.emotion-28 {
  width: 100%;
}

.emotion-28 > span {
  width: 100%;
}

.emotion-27 {
  display: inline-block;
  width: 100%;
}

.emotion-27 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-7:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-3 {
  margin: 0.5em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-6 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-33 {
  height: 175px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: flex-start;
  -webkit-box-align: flex-start;
  -ms-flex-align: flex-start;
  align-items: flex-start;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.emotion-26 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border: 1px solid #ebeff5;
  border-radius: 0.1875em;
  box-shadow: 0 2px 4px 0 rgba(0,0,0,0.2),0 4px 8px 0 rgba(0,0,0,0.2);
  max-height: 30vh;
  overflow-y: auto;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 14em;
  z-index: 100;
}

.emotion-26 *,
.emotion-26 *::before,
.emotion-26 *::after {
  box-sizing: inherit;
}

.emotion-26[data-placement^="top"] {
  margin-bottom: 5px;
}

.emotion-26[data-placement^="bottom"] {
  margin-top: 5px;
}

.emotion-26[data-placement^="left"] {
  margin-right: 5px;
}

.emotion-26[data-placement^="right"] {
  margin-left: 5px;
}

.emotion-26[data-x-out-of-boundaries] {
  visibility: hidden;
}

.emotion-25 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
}

.emotion-25 *,
.emotion-25 *::before,
.emotion-25 *::after {
  box-sizing: inherit;
}

.emotion-16 {
  color: #333840;
  cursor: pointer;
  display: block;
  font-weight: 400;
  padding: 0.5em 1em;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-16:focus {
  background-color: #f5f7fa;
  outline: 0;
}

.emotion-16:hover {
  background-color: #f5f7fa;
}

.emotion-16:active {
  background-color: #ebeff5;
}

.emotion-16[aria-selected="true"] {
  background-color: #f0f5fc;
  font-weight: 700;
}

.emotion-16[aria-selected="true"]:active {
  background-color: #accbfc;
}

.emotion-16 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-16 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-16 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-15 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.emotion-14 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  padding: 0.1875em 0 0.25em;
  white-space: normal;
  word-break: break-all;
}

.emotion-13 {
  font-size: 0.875em;
  margin-right: 0.5714285714285714em;
  word-break: break-word;
}

<Styled(div)>
  <div
    className="emotion-33"
  >
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      isOpen={true}
      itemKey="value"
      placeholder="Select..."
      placement="bottom-start"
      size="large"
    >
      <Styled(WithTheme(Themed(Dropdown)))
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        id="select-49"
        isOpen={true}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Select..."
        placement="bottom-start"
        size="large"
      >
        <WithTheme(Themed(Dropdown))
          className="emotion-28"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          id="select-49"
          isOpen={true}
          itemKey="value"
          menu={[Function]}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placeholder="Select..."
          placement="bottom-start"
          size="large"
        >
          <Themed(Dropdown)
            className="emotion-28"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            id="select-49"
            isOpen={true}
            itemKey="value"
            menu={[Function]}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placeholder="Select..."
            placement="bottom-start"
            size="large"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="emotion-28"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  id="select-49"
                  isOpen={true}
                  itemKey="value"
                  menu={[Function]}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="Select..."
                  placement="bottom-start"
                  size="large"
                >
                  <Popover
                    className="emotion-28"
                    content={[Function]}
                    focusTriggerOnClose={true}
                    hasArrow={true}
                    id="select-49"
                    isOpen={true}
                    itemKey="value"
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Select..."
                    placement="bottom-start"
                    size="large"
                    triggerRef={[Function]}
                  >
                    <Manager>
                      <Styled(span)
                        className="emotion-28"
                        content={[Function]}
                        focusTriggerOnClose={true}
                        hasArrow={true}
                        id="select-49"
                        isOpen={true}
                        itemKey="value"
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Select..."
                        placement="bottom-start"
                        size="large"
                        triggerRef={[Function]}
                      >
                        <span
                          className="emotion-27"
                          content={[Function]}
                          id="select-49"
                          onClose={[Function]}
                          onOpen={[Function]}
                          placeholder="Select..."
                          size="large"
                        >
                          <PopoverTrigger
                            aria-activedescendant="select-49-menu"
                            aria-describedby="select-49-content"
                            aria-expanded={true}
                            aria-haspopup="listbox"
                            aria-owns="select-49-content"
                            isOpen={true}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            placeholder="Select..."
                            role="button"
                            size="large"
                            tabIndex={0}
                            triggerRef={[Function]}
                          >
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <Styled(span)>
                                  <span
                                    className="emotion-12"
                                  >
                                    <SelectTrigger
                                      aria-activedescendant="select-49-menu"
                                      aria-describedby="select-49-content"
                                      aria-expanded={true}
                                      aria-haspopup="listbox"
                                      aria-owns="select-49-content"
                                      isOpen={true}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      placeholder="Select..."
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                      triggerRef={[Function]}
                                    >
                                      <Styled(WithTheme(Themed(FauxControl)))
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownUp)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-activedescendant="select-49-menu"
                                        aria-describedby="select-49-content"
                                        aria-expanded={true}
                                        aria-haspopup="listbox"
                                        aria-owns="select-49-content"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <WithTheme(Themed(FauxControl))
                                          afterItems={
                                            Array [
                                              <withProps(Styled(IconArrowDropdownUp)) />,
                                              <input
                                                onClick={[Function]}
                                                type="hidden"
                                                value=""
                                              />,
                                            ]
                                          }
                                          aria-activedescendant="select-49-menu"
                                          aria-describedby="select-49-content"
                                          aria-expanded={true}
                                          aria-haspopup="listbox"
                                          aria-owns="select-49-content"
                                          className="emotion-8"
                                          control={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "__emotion_base": "div",
                                              "__emotion_forwardProp": undefined,
                                              "__emotion_real": [Circular],
                                              "__emotion_styles": Array [
                                                [Function],
                                              ],
                                              "defaultProps": undefined,
                                              "displayName": "Styled(div)",
                                              "render": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          controlProps={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          fauxControlRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                        >
                                          <Themed(FauxControl)
                                            afterItems={
                                              Array [
                                                <withProps(Styled(IconArrowDropdownUp)) />,
                                                <input
                                                  onClick={[Function]}
                                                  type="hidden"
                                                  value=""
                                                />,
                                              ]
                                            }
                                            aria-activedescendant="select-49-menu"
                                            aria-describedby="select-49-content"
                                            aria-expanded={true}
                                            aria-haspopup="listbox"
                                            aria-owns="select-49-content"
                                            className="emotion-8"
                                            control={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "__emotion_base": "div",
                                                "__emotion_forwardProp": undefined,
                                                "__emotion_real": [Circular],
                                                "__emotion_styles": Array [
                                                  [Function],
                                                ],
                                                "defaultProps": undefined,
                                                "displayName": "Styled(div)",
                                                "render": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            controlProps={
                                              Object {
                                                "hasPlaceholder": true,
                                                "variant": undefined,
                                              }
                                            }
                                            fauxControlRef={[Function]}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            size="large"
                                            tabIndex={0}
                                          >
                                            <ThemeProvider>
                                              <ThemeProvider>
                                                <FauxControl
                                                  afterItems={
                                                    Array [
                                                      <withProps(Styled(IconArrowDropdownUp)) />,
                                                      <input
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />,
                                                    ]
                                                  }
                                                  aria-activedescendant="select-49-menu"
                                                  aria-describedby="select-49-content"
                                                  aria-expanded={true}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-49-content"
                                                  className="emotion-8"
                                                  control={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "__emotion_base": "div",
                                                      "__emotion_forwardProp": undefined,
                                                      "__emotion_real": [Circular],
                                                      "__emotion_styles": Array [
                                                        [Function],
                                                      ],
                                                      "defaultProps": undefined,
                                                      "displayName": "Styled(div)",
                                                      "render": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  controlProps={
                                                    Object {
                                                      "hasPlaceholder": true,
                                                      "variant": undefined,
                                                    }
                                                  }
                                                  fauxControlRef={[Function]}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  size="large"
                                                  tabIndex={0}
                                                >
                                                  <Styled(div)
                                                    aria-activedescendant="select-49-menu"
                                                    aria-describedby="select-49-content"
                                                    aria-expanded={true}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-49-content"
                                                    className="emotion-8"
                                                    control={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "__emotion_base": "div",
                                                        "__emotion_forwardProp": undefined,
                                                        "__emotion_real": [Circular],
                                                        "__emotion_styles": Array [
                                                          [Function],
                                                        ],
                                                        "defaultProps": undefined,
                                                        "displayName": "Styled(div)",
                                                        "render": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    <div
                                                      aria-activedescendant="select-49-menu"
                                                      aria-describedby="select-49-content"
                                                      aria-expanded={true}
                                                      aria-haspopup="listbox"
                                                      aria-owns="select-49-content"
                                                      className="emotion-7"
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      <Styled(div)
                                                        controlPropsIn={
                                                          Object {
                                                            "hasPlaceholder": true,
                                                            "variant": undefined,
                                                          }
                                                        }
                                                        hasPlaceholder={true}
                                                        key="control"
                                                        size="large"
                                                      >
                                                        <div
                                                          className="emotion-1"
                                                          size="large"
                                                        >
                                                          <Styled(span)>
                                                            <span
                                                              className="emotion-0"
                                                            >
                                                              Select...
                                                            </span>
                                                          </Styled(span)>
                                                        </div>
                                                      </Styled(div)>
                                                      <withProps(Styled(IconArrowDropdownUp))
                                                        key="arrow"
                                                      >
                                                        <Styled(IconArrowDropdownUp)
                                                          size="1.5em"
                                                        >
                                                          <IconArrowDropdownUp
                                                            className="emotion-3"
                                                            size="1.5em"
                                                          >
                                                            <Icon
                                                              className="emotion-3"
                                                              rtl={false}
                                                              size="1.5em"
                                                            >
                                                              <Styled(svg)
                                                                aria-hidden={true}
                                                                className="emotion-3"
                                                                focusable="false"
                                                                role="img"
                                                                rtl={false}
                                                                size="1.5em"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="emotion-2"
                                                                  focusable="false"
                                                                  role="img"
                                                                  size="1.5em"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <g>
                                                                    <path
                                                                      d="M12 7.5l8 8H4z"
                                                                    />
                                                                  </g>
                                                                </svg>
                                                              </Styled(svg)>
                                                            </Icon>
                                                          </IconArrowDropdownUp>
                                                        </Styled(IconArrowDropdownUp)>
                                                      </withProps(Styled(IconArrowDropdownUp))>
                                                      <input
                                                        key="input"
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />
                                                      <Styled(div)>
                                                        <div
                                                          className="emotion-6"
                                                        />
                                                      </Styled(div)>
                                                    </div>
                                                  </Styled(div)>
                                                </FauxControl>
                                              </ThemeProvider>
                                            </ThemeProvider>
                                          </Themed(FauxControl)>
                                        </WithTheme(Themed(FauxControl))>
                                      </Styled(WithTheme(Themed(FauxControl)))>
                                    </SelectTrigger>
                                  </span>
                                </Styled(span)>
                              </InnerReference>
                            </Reference>
                          </PopoverTrigger>
                          <DropdownContent
                            hasArrow={true}
                            id="select-49-content"
                            modifiers={
                              Object {
                                "contentWidth": Object {
                                  "enabled": true,
                                  "fn": [Function],
                                },
                              }
                            }
                            onBlur={[Function]}
                            placement="bottom-start"
                          >
                            <WithTheme(RtlPopper)
                              modifiers={
                                Object {
                                  "contentWidth": Object {
                                    "enabled": true,
                                    "fn": [Function],
                                  },
                                }
                              }
                              placement="bottom-start"
                            >
                              <RtlPopper
                                modifiers={
                                  Object {
                                    "contentWidth": Object {
                                      "enabled": true,
                                      "fn": [Function],
                                    },
                                  }
                                }
                                placement="bottom-start"
                              >
                                <Popper
                                  modifiers={
                                    Object {
                                      "contentWidth": Object {
                                        "enabled": true,
                                        "fn": [Function],
                                      },
                                    }
                                  }
                                  placement="bottom-start"
                                >
                                  <InnerPopper
                                    eventsEnabled={true}
                                    modifiers={
                                      Object {
                                        "contentWidth": Object {
                                          "enabled": true,
                                          "fn": [Function],
                                        },
                                      }
                                    }
                                    placement="bottom-start"
                                    positionFixed={false}
                                    referenceElement={
                                      .emotion-5 {
  display: inline-block;
}

.emotion-4 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-4 *,
.emotion-4 *::before,
.emotion-4 *::after {
  box-sizing: inherit;
}

.emotion-4:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-4:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-4:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-4 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-4 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-4 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-4 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-3 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

<span
                                        class="emotion-5"
                                      >
                                        <div
                                          aria-activedescendant="select-49-menu"
                                          aria-describedby="select-49-content"
                                          aria-expanded="true"
                                          aria-haspopup="listbox"
                                          aria-owns="select-49-content"
                                          class="emotion-4"
                                          role="button"
                                          tabindex="0"
                                        >
                                          <div
                                            class="emotion-1"
                                          >
                                            <span
                                              class="emotion-0"
                                            >
                                              Select...
                                            </span>
                                          </div>
                                          <svg
                                            aria-hidden="true"
                                            class="emotion-2"
                                            focusable="false"
                                            role="img"
                                            viewBox="0 0 24 24"
                                          >
                                            <g>
                                              <path
                                                d="M12 7.5l8 8H4z"
                                              />
                                            </g>
                                          </svg>
                                          <input
                                            type="hidden"
                                            value=""
                                          />
                                          <div
                                            class="emotion-3"
                                          />
                                        </div>
                                      </span>
                                    }
                                  >
                                    <Styled(div)
                                      hasArrow={true}
                                      id="select-49-content"
                                      onBlur={[Function]}
                                      style={
                                        Object {
                                          "left": 0,
                                          "opacity": 0,
                                          "pointerEvents": "none",
                                          "position": "absolute",
                                          "top": 0,
                                        }
                                      }
                                    >
                                      <div
                                        className="emotion-26"
                                        id="select-49-content"
                                        onBlur={[Function]}
                                        style={
                                          Object {
                                            "left": 0,
                                            "opacity": 0,
                                            "pointerEvents": "none",
                                            "position": "absolute",
                                            "top": 0,
                                          }
                                        }
                                      >
                                        <Menu
                                          data={
                                            Array [
                                              Object {
                                                "text": "Alpha",
                                                "value": "alpha",
                                              },
                                              Object {
                                                "text": "Beta",
                                                "value": "beta",
                                              },
                                              Object {
                                                "text": "Gamma",
                                                "value": "gamma",
                                              },
                                            ]
                                          }
                                          id="select-49-menu"
                                          item={[Function]}
                                          itemKey="value"
                                          role="listbox"
                                        >
                                          <Styled(div)
                                            id="select-49-menu"
                                            item={[Function]}
                                            itemKey="value"
                                            role="listbox"
                                          >
                                            <div
                                              className="emotion-25"
                                              id="select-49-menu"
                                              role="listbox"
                                            >
                                              <MenuItem
                                                element="div"
                                                index={0}
                                                isHighlighted={false}
                                                item={
                                                  Object {
                                                    "text": "Alpha",
                                                    "value": "alpha",
                                                  }
                                                }
                                                key="alpha"
                                                render={[Function]}
                                                text="Alpha"
                                                value="alpha"
                                              >
                                                <MenuItem
                                                  aria-selected={false}
                                                  element="div"
                                                  id="select-49-item-0"
                                                  index={0}
                                                  isHighlighted={false}
                                                  item={
                                                    Object {
                                                      "text": "Alpha",
                                                      "value": "alpha",
                                                    }
                                                  }
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  role="option"
                                                  tabIndex={null}
                                                  text="Alpha"
                                                  value="alpha"
                                                >
                                                  <Styled(div)
                                                    aria-selected={false}
                                                    element="div"
                                                    id="select-49-item-0"
                                                    index={0}
                                                    isHighlighted={false}
                                                    item={
                                                      Object {
                                                        "text": "Alpha",
                                                        "value": "alpha",
                                                      }
                                                    }
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    role="option"
                                                    tabIndex={null}
                                                    text="Alpha"
                                                    value="alpha"
                                                  >
                                                    <div
                                                      aria-selected={false}
                                                      className="emotion-16"
                                                      id="select-49-item-0"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="option"
                                                      tabIndex={null}
                                                      value="alpha"
                                                    >
                                                      <Styled(span)>
                                                        <span
                                                          className="emotion-15"
                                                        >
                                                          <Styled(span)>
                                                            <span
                                                              className="emotion-14"
                                                            >
                                                              <Styled(span)>
                                                                <span
                                                                  className="emotion-13"
                                                                >
                                                                  Alpha
                                                                </span>
                                                              </Styled(span)>
                                                            </span>
                                                          </Styled(span)>
                                                        </span>
                                                      </Styled(span)>
                                                    </div>
                                                  </Styled(div)>
                                                </MenuItem>
                                              </MenuItem>
                                              <MenuItem
                                                element="div"
                                                index={1}
                                                isHighlighted={false}
                                                item={
                                                  Object {
                                                    "text": "Beta",
                                                    "value": "beta",
                                                  }
                                                }
                                                key="beta"
                                                render={[Function]}
                                                text="Beta"
                                                value="beta"
                                              >
                                                <MenuItem
                                                  aria-selected={false}
                                                  element="div"
                                                  id="select-49-item-1"
                                                  index={1}
                                                  isHighlighted={false}
                                                  item={
                                                    Object {
                                                      "text": "Beta",
                                                      "value": "beta",
                                                    }
                                                  }
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  role="option"
                                                  tabIndex={null}
                                                  text="Beta"
                                                  value="beta"
                                                >
                                                  <Styled(div)
                                                    aria-selected={false}
                                                    element="div"
                                                    id="select-49-item-1"
                                                    index={1}
                                                    isHighlighted={false}
                                                    item={
                                                      Object {
                                                        "text": "Beta",
                                                        "value": "beta",
                                                      }
                                                    }
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    role="option"
                                                    tabIndex={null}
                                                    text="Beta"
                                                    value="beta"
                                                  >
                                                    <div
                                                      aria-selected={false}
                                                      className="emotion-16"
                                                      id="select-49-item-1"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="option"
                                                      tabIndex={null}
                                                      value="beta"
                                                    >
                                                      <Styled(span)>
                                                        <span
                                                          className="emotion-15"
                                                        >
                                                          <Styled(span)>
                                                            <span
                                                              className="emotion-14"
                                                            >
                                                              <Styled(span)>
                                                                <span
                                                                  className="emotion-13"
                                                                >
                                                                  Beta
                                                                </span>
                                                              </Styled(span)>
                                                            </span>
                                                          </Styled(span)>
                                                        </span>
                                                      </Styled(span)>
                                                    </div>
                                                  </Styled(div)>
                                                </MenuItem>
                                              </MenuItem>
                                              <MenuItem
                                                element="div"
                                                index={2}
                                                isHighlighted={false}
                                                item={
                                                  Object {
                                                    "text": "Gamma",
                                                    "value": "gamma",
                                                  }
                                                }
                                                key="gamma"
                                                render={[Function]}
                                                text="Gamma"
                                                value="gamma"
                                              >
                                                <MenuItem
                                                  aria-selected={false}
                                                  element="div"
                                                  id="select-49-item-2"
                                                  index={2}
                                                  isHighlighted={false}
                                                  item={
                                                    Object {
                                                      "text": "Gamma",
                                                      "value": "gamma",
                                                    }
                                                  }
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  role="option"
                                                  tabIndex={null}
                                                  text="Gamma"
                                                  value="gamma"
                                                >
                                                  <Styled(div)
                                                    aria-selected={false}
                                                    element="div"
                                                    id="select-49-item-2"
                                                    index={2}
                                                    isHighlighted={false}
                                                    item={
                                                      Object {
                                                        "text": "Gamma",
                                                        "value": "gamma",
                                                      }
                                                    }
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    role="option"
                                                    tabIndex={null}
                                                    text="Gamma"
                                                    value="gamma"
                                                  >
                                                    <div
                                                      aria-selected={false}
                                                      className="emotion-16"
                                                      id="select-49-item-2"
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      role="option"
                                                      tabIndex={null}
                                                      value="gamma"
                                                    >
                                                      <Styled(span)>
                                                        <span
                                                          className="emotion-15"
                                                        >
                                                          <Styled(span)>
                                                            <span
                                                              className="emotion-14"
                                                            >
                                                              <Styled(span)>
                                                                <span
                                                                  className="emotion-13"
                                                                >
                                                                  Gamma
                                                                </span>
                                                              </Styled(span)>
                                                            </span>
                                                          </Styled(span)>
                                                        </span>
                                                      </Styled(span)>
                                                    </div>
                                                  </Styled(div)>
                                                </MenuItem>
                                              </MenuItem>
                                            </div>
                                          </Styled(div)>
                                        </Menu>
                                      </div>
                                    </Styled(div)>
                                  </InnerPopper>
                                </Popper>
                              </RtlPopper>
                            </WithTheme(RtlPopper)>
                          </DropdownContent>
                          <EventListener
                            listeners={
                              Array [
                                Object {
                                  "event": "click",
                                  "handler": [Function],
                                  "options": true,
                                  "target": "document",
                                },
                                Object {
                                  "event": "keydown",
                                  "handler": [Function],
                                  "options": true,
                                  "target": "document",
                                },
                              ]
                            }
                          />
                        </span>
                      </Styled(span)>
                    </Manager>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </WithTheme(Themed(Dropdown))>
      </Styled(WithTheme(Themed(Dropdown)))>
    </Select>
  </div>
</Styled(div)>
`;

exports[`Select demo examples Snapshots: portal 1`] = `
.emotion-28 {
  width: 100%;
}

.emotion-28 > span {
  width: 100%;
}

.emotion-27 {
  display: inline-block;
  width: 100%;
}

.emotion-27 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-7:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-3 {
  margin: 0.5em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-6 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-26 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border: 1px solid #ebeff5;
  border-radius: 0.1875em;
  box-shadow: 0 2px 4px 0 rgba(0,0,0,0.2),0 4px 8px 0 rgba(0,0,0,0.2);
  max-height: 30vh;
  overflow-y: auto;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 14em;
  z-index: 100;
}

.emotion-26 *,
.emotion-26 *::before,
.emotion-26 *::after {
  box-sizing: inherit;
}

.emotion-26[data-placement^="top"] {
  margin-bottom: 5px;
}

.emotion-26[data-placement^="bottom"] {
  margin-top: 5px;
}

.emotion-26[data-placement^="left"] {
  margin-right: 5px;
}

.emotion-26[data-placement^="right"] {
  margin-left: 5px;
}

.emotion-26[data-x-out-of-boundaries] {
  visibility: hidden;
}

.emotion-25 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
}

.emotion-25 *,
.emotion-25 *::before,
.emotion-25 *::after {
  box-sizing: inherit;
}

.emotion-16 {
  color: #333840;
  cursor: pointer;
  display: block;
  font-weight: 400;
  padding: 0.5em 1em;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-16:focus {
  background-color: #f5f7fa;
  outline: 0;
}

.emotion-16:hover {
  background-color: #f5f7fa;
}

.emotion-16:active {
  background-color: #ebeff5;
}

.emotion-16[aria-selected="true"] {
  background-color: #f0f5fc;
  font-weight: 700;
}

.emotion-16[aria-selected="true"]:active {
  background-color: #accbfc;
}

.emotion-16 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-16 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-16 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-15 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.emotion-14 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  padding: 0.1875em 0 0.25em;
  white-space: normal;
  word-break: break-all;
}

.emotion-13 {
  font-size: 0.875em;
  margin-right: 0.5714285714285714em;
  word-break: break-word;
}

.emotion-41 {
  position: relative;
}

.emotion-34 {
  background-color: aliceblue;
  height: 360px;
  overflow: auto;
  position: relative;
}

.emotion-33 {
  height: 860px;
  width: 300vw;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.emotion-38 {
  left: 0;
  position: absolute;
  top: 0;
}

.emotion-37 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: transparent;
  border-color: transparent;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 1.5em;
  margin: 0;
  min-width: 1.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
  left: 0;
  position: absolute;
  top: 0;
}

.emotion-37 *,
.emotion-37 *::before,
.emotion-37 *::after {
  box-sizing: inherit;
}

.emotion-37:focus {
  border-color: #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-37:hover {
  background-color: #f5f7fa;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-37:focus:active,
.emotion-37:focus:hover {
  border-color: #1d5bbf;
}

.emotion-37:active {
  background-color: #ebeff5;
  color: #3272d9;
}

.emotion-37::-moz-focus-inner {
  border: 0;
}

.emotion-37 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-37 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-37 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-37 [role="img"]:only-child {
  margin: 0;
}

.emotion-36 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  max-height: 100%;
  pointer-events: none;
  width: 100%;
}

.emotion-35 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.75em;
  line-height: 2em;
}

<ScrollBox
  autoCenter={true}
  height={360}
>
  <Styled(div)>
    <div
      className="emotion-41"
    >
      <Styled(div)
        height={360}
      >
        <div
          className="emotion-34"
          height={360}
        >
          <Styled(div)
            scrollAreaHeight={360}
          >
            <div
              className="emotion-33"
            >
              <Select
                data={
                  Array [
                    Object {
                      "text": "Alpha",
                      "value": "alpha",
                    },
                    Object {
                      "text": "Beta",
                      "value": "beta",
                    },
                    Object {
                      "text": "Gamma",
                      "value": "gamma",
                    },
                  ]
                }
                isOpen={true}
                modifiers={
                  Object {
                    "preventOverflow": Object {
                      "escapeWithReference": true,
                    },
                  }
                }
                usePortal={true}
              >
                <div
                  style={
                    Object {
                      "width": "14em",
                    }
                  }
                >
                  <Select
                    data={
                      Array [
                        Object {
                          "text": "Alpha",
                          "value": "alpha",
                        },
                        Object {
                          "text": "Beta",
                          "value": "beta",
                        },
                        Object {
                          "text": "Gamma",
                          "value": "gamma",
                        },
                      ]
                    }
                    isOpen={true}
                    itemKey="value"
                    modifiers={
                      Object {
                        "preventOverflow": Object {
                          "escapeWithReference": true,
                        },
                      }
                    }
                    placeholder="Select..."
                    placement="bottom-start"
                    size="large"
                    usePortal={true}
                  >
                    <Styled(WithTheme(Themed(Dropdown)))
                      data={
                        Array [
                          Object {
                            "text": "Alpha",
                            "value": "alpha",
                          },
                          Object {
                            "text": "Beta",
                            "value": "beta",
                          },
                          Object {
                            "text": "Gamma",
                            "value": "gamma",
                          },
                        ]
                      }
                      id="select-58"
                      isOpen={true}
                      itemKey="value"
                      menu={[Function]}
                      modifiers={
                        Object {
                          "contentWidth": Object {
                            "enabled": true,
                            "fn": [Function],
                          },
                          "preventOverflow": Object {
                            "escapeWithReference": true,
                          },
                        }
                      }
                      onClose={[Function]}
                      onOpen={[Function]}
                      placeholder="Select..."
                      placement="bottom-start"
                      size="large"
                      usePortal={true}
                    >
                      <WithTheme(Themed(Dropdown))
                        className="emotion-28"
                        data={
                          Array [
                            Object {
                              "text": "Alpha",
                              "value": "alpha",
                            },
                            Object {
                              "text": "Beta",
                              "value": "beta",
                            },
                            Object {
                              "text": "Gamma",
                              "value": "gamma",
                            },
                          ]
                        }
                        id="select-58"
                        isOpen={true}
                        itemKey="value"
                        menu={[Function]}
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                            "preventOverflow": Object {
                              "escapeWithReference": true,
                            },
                          }
                        }
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Select..."
                        placement="bottom-start"
                        size="large"
                        usePortal={true}
                      >
                        <Themed(Dropdown)
                          className="emotion-28"
                          data={
                            Array [
                              Object {
                                "text": "Alpha",
                                "value": "alpha",
                              },
                              Object {
                                "text": "Beta",
                                "value": "beta",
                              },
                              Object {
                                "text": "Gamma",
                                "value": "gamma",
                              },
                            ]
                          }
                          id="select-58"
                          isOpen={true}
                          itemKey="value"
                          menu={[Function]}
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                              "preventOverflow": Object {
                                "escapeWithReference": true,
                              },
                            }
                          }
                          onClose={[Function]}
                          onOpen={[Function]}
                          placeholder="Select..."
                          placement="bottom-start"
                          size="large"
                          usePortal={true}
                        >
                          <ThemeProvider>
                            <ThemeProvider>
                              <Dropdown
                                className="emotion-28"
                                data={
                                  Array [
                                    Object {
                                      "text": "Alpha",
                                      "value": "alpha",
                                    },
                                    Object {
                                      "text": "Beta",
                                      "value": "beta",
                                    },
                                    Object {
                                      "text": "Gamma",
                                      "value": "gamma",
                                    },
                                  ]
                                }
                                id="select-58"
                                isOpen={true}
                                itemKey="value"
                                menu={[Function]}
                                modifiers={
                                  Object {
                                    "contentWidth": Object {
                                      "enabled": true,
                                      "fn": [Function],
                                    },
                                    "preventOverflow": Object {
                                      "escapeWithReference": true,
                                    },
                                  }
                                }
                                onClose={[Function]}
                                onOpen={[Function]}
                                placeholder="Select..."
                                placement="bottom-start"
                                size="large"
                                usePortal={true}
                              >
                                <Popover
                                  className="emotion-28"
                                  content={[Function]}
                                  focusTriggerOnClose={true}
                                  hasArrow={true}
                                  id="select-58"
                                  isOpen={true}
                                  itemKey="value"
                                  modifiers={
                                    Object {
                                      "contentWidth": Object {
                                        "enabled": true,
                                        "fn": [Function],
                                      },
                                      "preventOverflow": Object {
                                        "escapeWithReference": true,
                                      },
                                    }
                                  }
                                  onClose={[Function]}
                                  onOpen={[Function]}
                                  placeholder="Select..."
                                  placement="bottom-start"
                                  size="large"
                                  triggerRef={[Function]}
                                  usePortal={true}
                                >
                                  <Manager>
                                    <Styled(span)
                                      className="emotion-28"
                                      content={[Function]}
                                      focusTriggerOnClose={true}
                                      hasArrow={true}
                                      id="select-58"
                                      isOpen={true}
                                      itemKey="value"
                                      onClose={[Function]}
                                      onOpen={[Function]}
                                      placeholder="Select..."
                                      placement="bottom-start"
                                      size="large"
                                      triggerRef={[Function]}
                                      usePortal={true}
                                    >
                                      <span
                                        className="emotion-27"
                                        content={[Function]}
                                        id="select-58"
                                        onClose={[Function]}
                                        onOpen={[Function]}
                                        placeholder="Select..."
                                        size="large"
                                      >
                                        <PopoverTrigger
                                          aria-activedescendant="select-58-menu"
                                          aria-describedby="select-58-content"
                                          aria-expanded={true}
                                          aria-haspopup="listbox"
                                          aria-owns="select-58-content"
                                          isOpen={true}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          placeholder="Select..."
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                          triggerRef={[Function]}
                                        >
                                          <Reference>
                                            <InnerReference
                                              getReferenceRef={[Function]}
                                            >
                                              <Styled(span)>
                                                <span
                                                  className="emotion-12"
                                                >
                                                  <SelectTrigger
                                                    aria-activedescendant="select-58-menu"
                                                    aria-describedby="select-58-content"
                                                    aria-expanded={true}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-58-content"
                                                    isOpen={true}
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    placeholder="Select..."
                                                    role="button"
                                                    size="large"
                                                    tabIndex={0}
                                                    triggerRef={[Function]}
                                                  >
                                                    <Styled(WithTheme(Themed(FauxControl)))
                                                      afterItems={
                                                        Array [
                                                          <withProps(Styled(IconArrowDropdownUp)) />,
                                                          <input
                                                            onClick={[Function]}
                                                            type="hidden"
                                                            value=""
                                                          />,
                                                        ]
                                                      }
                                                      aria-activedescendant="select-58-menu"
                                                      aria-describedby="select-58-content"
                                                      aria-expanded={true}
                                                      aria-haspopup="listbox"
                                                      aria-owns="select-58-content"
                                                      control={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "__emotion_base": "div",
                                                          "__emotion_forwardProp": undefined,
                                                          "__emotion_real": [Circular],
                                                          "__emotion_styles": Array [
                                                            [Function],
                                                          ],
                                                          "defaultProps": undefined,
                                                          "displayName": "Styled(div)",
                                                          "render": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      controlProps={
                                                        Object {
                                                          "hasPlaceholder": true,
                                                          "variant": undefined,
                                                        }
                                                      }
                                                      fauxControlRef={[Function]}
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      role="button"
                                                      size="large"
                                                      tabIndex={0}
                                                    >
                                                      <WithTheme(Themed(FauxControl))
                                                        afterItems={
                                                          Array [
                                                            <withProps(Styled(IconArrowDropdownUp)) />,
                                                            <input
                                                              onClick={[Function]}
                                                              type="hidden"
                                                              value=""
                                                            />,
                                                          ]
                                                        }
                                                        aria-activedescendant="select-58-menu"
                                                        aria-describedby="select-58-content"
                                                        aria-expanded={true}
                                                        aria-haspopup="listbox"
                                                        aria-owns="select-58-content"
                                                        className="emotion-8"
                                                        control={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "__emotion_base": "div",
                                                            "__emotion_forwardProp": undefined,
                                                            "__emotion_real": [Circular],
                                                            "__emotion_styles": Array [
                                                              [Function],
                                                            ],
                                                            "defaultProps": undefined,
                                                            "displayName": "Styled(div)",
                                                            "render": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        controlProps={
                                                          Object {
                                                            "hasPlaceholder": true,
                                                            "variant": undefined,
                                                          }
                                                        }
                                                        fauxControlRef={[Function]}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        role="button"
                                                        size="large"
                                                        tabIndex={0}
                                                      >
                                                        <Themed(FauxControl)
                                                          afterItems={
                                                            Array [
                                                              <withProps(Styled(IconArrowDropdownUp)) />,
                                                              <input
                                                                onClick={[Function]}
                                                                type="hidden"
                                                                value=""
                                                              />,
                                                            ]
                                                          }
                                                          aria-activedescendant="select-58-menu"
                                                          aria-describedby="select-58-content"
                                                          aria-expanded={true}
                                                          aria-haspopup="listbox"
                                                          aria-owns="select-58-content"
                                                          className="emotion-8"
                                                          control={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "__emotion_base": "div",
                                                              "__emotion_forwardProp": undefined,
                                                              "__emotion_real": [Circular],
                                                              "__emotion_styles": Array [
                                                                [Function],
                                                              ],
                                                              "defaultProps": undefined,
                                                              "displayName": "Styled(div)",
                                                              "render": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          controlProps={
                                                            Object {
                                                              "hasPlaceholder": true,
                                                              "variant": undefined,
                                                            }
                                                          }
                                                          fauxControlRef={[Function]}
                                                          onBlur={[Function]}
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          role="button"
                                                          size="large"
                                                          tabIndex={0}
                                                        >
                                                          <ThemeProvider>
                                                            <ThemeProvider>
                                                              <FauxControl
                                                                afterItems={
                                                                  Array [
                                                                    <withProps(Styled(IconArrowDropdownUp)) />,
                                                                    <input
                                                                      onClick={[Function]}
                                                                      type="hidden"
                                                                      value=""
                                                                    />,
                                                                  ]
                                                                }
                                                                aria-activedescendant="select-58-menu"
                                                                aria-describedby="select-58-content"
                                                                aria-expanded={true}
                                                                aria-haspopup="listbox"
                                                                aria-owns="select-58-content"
                                                                className="emotion-8"
                                                                control={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "__emotion_base": "div",
                                                                    "__emotion_forwardProp": undefined,
                                                                    "__emotion_real": [Circular],
                                                                    "__emotion_styles": Array [
                                                                      [Function],
                                                                    ],
                                                                    "defaultProps": undefined,
                                                                    "displayName": "Styled(div)",
                                                                    "render": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                controlProps={
                                                                  Object {
                                                                    "hasPlaceholder": true,
                                                                    "variant": undefined,
                                                                  }
                                                                }
                                                                fauxControlRef={[Function]}
                                                                onBlur={[Function]}
                                                                onClick={[Function]}
                                                                onKeyDown={[Function]}
                                                                onKeyUp={[Function]}
                                                                role="button"
                                                                size="large"
                                                                tabIndex={0}
                                                              >
                                                                <Styled(div)
                                                                  aria-activedescendant="select-58-menu"
                                                                  aria-describedby="select-58-content"
                                                                  aria-expanded={true}
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="select-58-content"
                                                                  className="emotion-8"
                                                                  control={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "__emotion_base": "div",
                                                                      "__emotion_forwardProp": undefined,
                                                                      "__emotion_real": [Circular],
                                                                      "__emotion_styles": Array [
                                                                        [Function],
                                                                      ],
                                                                      "defaultProps": undefined,
                                                                      "displayName": "Styled(div)",
                                                                      "render": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  onBlur={[Function]}
                                                                  onClick={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onKeyUp={[Function]}
                                                                  role="button"
                                                                  tabIndex={0}
                                                                >
                                                                  <div
                                                                    aria-activedescendant="select-58-menu"
                                                                    aria-describedby="select-58-content"
                                                                    aria-expanded={true}
                                                                    aria-haspopup="listbox"
                                                                    aria-owns="select-58-content"
                                                                    className="emotion-7"
                                                                    onBlur={[Function]}
                                                                    onClick={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    onKeyUp={[Function]}
                                                                    role="button"
                                                                    tabIndex={0}
                                                                  >
                                                                    <Styled(div)
                                                                      controlPropsIn={
                                                                        Object {
                                                                          "hasPlaceholder": true,
                                                                          "variant": undefined,
                                                                        }
                                                                      }
                                                                      hasPlaceholder={true}
                                                                      key="control"
                                                                      size="large"
                                                                    >
                                                                      <div
                                                                        className="emotion-1"
                                                                        size="large"
                                                                      >
                                                                        <Styled(span)>
                                                                          <span
                                                                            className="emotion-0"
                                                                          >
                                                                            Select...
                                                                          </span>
                                                                        </Styled(span)>
                                                                      </div>
                                                                    </Styled(div)>
                                                                    <withProps(Styled(IconArrowDropdownUp))
                                                                      key="arrow"
                                                                    >
                                                                      <Styled(IconArrowDropdownUp)
                                                                        size="1.5em"
                                                                      >
                                                                        <IconArrowDropdownUp
                                                                          className="emotion-3"
                                                                          size="1.5em"
                                                                        >
                                                                          <Icon
                                                                            className="emotion-3"
                                                                            rtl={false}
                                                                            size="1.5em"
                                                                          >
                                                                            <Styled(svg)
                                                                              aria-hidden={true}
                                                                              className="emotion-3"
                                                                              focusable="false"
                                                                              role="img"
                                                                              rtl={false}
                                                                              size="1.5em"
                                                                              viewBox="0 0 24 24"
                                                                            >
                                                                              <svg
                                                                                aria-hidden={true}
                                                                                className="emotion-2"
                                                                                focusable="false"
                                                                                role="img"
                                                                                size="1.5em"
                                                                                viewBox="0 0 24 24"
                                                                              >
                                                                                <g>
                                                                                  <path
                                                                                    d="M12 7.5l8 8H4z"
                                                                                  />
                                                                                </g>
                                                                              </svg>
                                                                            </Styled(svg)>
                                                                          </Icon>
                                                                        </IconArrowDropdownUp>
                                                                      </Styled(IconArrowDropdownUp)>
                                                                    </withProps(Styled(IconArrowDropdownUp))>
                                                                    <input
                                                                      key="input"
                                                                      onClick={[Function]}
                                                                      type="hidden"
                                                                      value=""
                                                                    />
                                                                    <Styled(div)>
                                                                      <div
                                                                        className="emotion-6"
                                                                      />
                                                                    </Styled(div)>
                                                                  </div>
                                                                </Styled(div)>
                                                              </FauxControl>
                                                            </ThemeProvider>
                                                          </ThemeProvider>
                                                        </Themed(FauxControl)>
                                                      </WithTheme(Themed(FauxControl))>
                                                    </Styled(WithTheme(Themed(FauxControl)))>
                                                  </SelectTrigger>
                                                </span>
                                              </Styled(span)>
                                            </InnerReference>
                                          </Reference>
                                        </PopoverTrigger>
                                        <Portal>
                                          <Portal
                                            containerInfo={
                                              .emotion-13 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border: 1px solid #ebeff5;
  border-radius: 0.1875em;
  box-shadow: 0 2px 4px 0 rgba(0,0,0,0.2),0 4px 8px 0 rgba(0,0,0,0.2);
  max-height: 30vh;
  overflow-y: auto;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 14em;
  z-index: 100;
}

.emotion-13 *,
.emotion-13 *::before,
.emotion-13 *::after {
  box-sizing: inherit;
}

.emotion-13[data-placement^="top"] {
  margin-bottom: 5px;
}

.emotion-13[data-placement^="bottom"] {
  margin-top: 5px;
}

.emotion-13[data-placement^="left"] {
  margin-right: 5px;
}

.emotion-13[data-placement^="right"] {
  margin-left: 5px;
}

.emotion-13[data-x-out-of-boundaries] {
  visibility: hidden;
}

.emotion-12 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
}

.emotion-12 *,
.emotion-12 *::before,
.emotion-12 *::after {
  box-sizing: inherit;
}

.emotion-3 {
  color: #333840;
  cursor: pointer;
  display: block;
  font-weight: 400;
  padding: 0.5em 1em;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-3:focus {
  background-color: #f5f7fa;
  outline: 0;
}

.emotion-3:hover {
  background-color: #f5f7fa;
}

.emotion-3:active {
  background-color: #ebeff5;
}

.emotion-3[aria-selected="true"] {
  background-color: #f0f5fc;
  font-weight: 700;
}

.emotion-3[aria-selected="true"]:active {
  background-color: #accbfc;
}

.emotion-3 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-3 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-3 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-2 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.emotion-1 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  padding: 0.1875em 0 0.25em;
  white-space: normal;
  word-break: break-all;
}

.emotion-0 {
  font-size: 0.875em;
  margin-right: 0.5714285714285714em;
  word-break: break-word;
}

<div>
                                                <div
                                                  class="emotion-13"
                                                  id="select-58-content"
                                                  style="position: absolute; top: 0px; left: 0px; opacity: 0; pointer-events: none;"
                                                >
                                                  <div
                                                    class="emotion-12"
                                                    id="select-58-menu"
                                                    role="listbox"
                                                  >
                                                    <div
                                                      aria-selected="false"
                                                      class="emotion-3"
                                                      id="select-58-item-0"
                                                      role="option"
                                                      value="alpha"
                                                    >
                                                      <span
                                                        class="emotion-2"
                                                      >
                                                        <span
                                                          class="emotion-1"
                                                        >
                                                          <span
                                                            class="emotion-0"
                                                          >
                                                            Alpha
                                                          </span>
                                                        </span>
                                                      </span>
                                                    </div>
                                                    <div
                                                      aria-selected="false"
                                                      class="emotion-3"
                                                      id="select-58-item-1"
                                                      role="option"
                                                      value="beta"
                                                    >
                                                      <span
                                                        class="emotion-2"
                                                      >
                                                        <span
                                                          class="emotion-1"
                                                        >
                                                          <span
                                                            class="emotion-0"
                                                          >
                                                            Beta
                                                          </span>
                                                        </span>
                                                      </span>
                                                    </div>
                                                    <div
                                                      aria-selected="false"
                                                      class="emotion-3"
                                                      id="select-58-item-2"
                                                      role="option"
                                                      value="gamma"
                                                    >
                                                      <span
                                                        class="emotion-2"
                                                      >
                                                        <span
                                                          class="emotion-1"
                                                        >
                                                          <span
                                                            class="emotion-0"
                                                          >
                                                            Gamma
                                                          </span>
                                                        </span>
                                                      </span>
                                                    </div>
                                                  </div>
                                                </div>
                                              </div>
                                            }
                                          >
                                            <DropdownContent
                                              hasArrow={true}
                                              id="select-58-content"
                                              modifiers={
                                                Object {
                                                  "contentWidth": Object {
                                                    "enabled": true,
                                                    "fn": [Function],
                                                  },
                                                  "preventOverflow": Object {
                                                    "escapeWithReference": true,
                                                  },
                                                }
                                              }
                                              onBlur={[Function]}
                                              placement="bottom-start"
                                            >
                                              <WithTheme(RtlPopper)
                                                modifiers={
                                                  Object {
                                                    "contentWidth": Object {
                                                      "enabled": true,
                                                      "fn": [Function],
                                                    },
                                                    "preventOverflow": Object {
                                                      "escapeWithReference": true,
                                                    },
                                                  }
                                                }
                                                placement="bottom-start"
                                              >
                                                <RtlPopper
                                                  modifiers={
                                                    Object {
                                                      "contentWidth": Object {
                                                        "enabled": true,
                                                        "fn": [Function],
                                                      },
                                                      "preventOverflow": Object {
                                                        "escapeWithReference": true,
                                                      },
                                                    }
                                                  }
                                                  placement="bottom-start"
                                                >
                                                  <Popper
                                                    modifiers={
                                                      Object {
                                                        "contentWidth": Object {
                                                          "enabled": true,
                                                          "fn": [Function],
                                                        },
                                                        "preventOverflow": Object {
                                                          "escapeWithReference": true,
                                                        },
                                                      }
                                                    }
                                                    placement="bottom-start"
                                                  >
                                                    <InnerPopper
                                                      eventsEnabled={true}
                                                      modifiers={
                                                        Object {
                                                          "contentWidth": Object {
                                                            "enabled": true,
                                                            "fn": [Function],
                                                          },
                                                          "preventOverflow": Object {
                                                            "escapeWithReference": true,
                                                          },
                                                        }
                                                      }
                                                      placement="bottom-start"
                                                      positionFixed={false}
                                                      referenceElement={
                                                        .emotion-5 {
  display: inline-block;
}

.emotion-4 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-4 *,
.emotion-4 *::before,
.emotion-4 *::after {
  box-sizing: inherit;
}

.emotion-4:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-4:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-4:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-4 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-4 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-4 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-4 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-3 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

<span
                                                          class="emotion-5"
                                                        >
                                                          <div
                                                            aria-activedescendant="select-58-menu"
                                                            aria-describedby="select-58-content"
                                                            aria-expanded="true"
                                                            aria-haspopup="listbox"
                                                            aria-owns="select-58-content"
                                                            class="emotion-4"
                                                            role="button"
                                                            tabindex="0"
                                                          >
                                                            <div
                                                              class="emotion-1"
                                                            >
                                                              <span
                                                                class="emotion-0"
                                                              >
                                                                Select...
                                                              </span>
                                                            </div>
                                                            <svg
                                                              aria-hidden="true"
                                                              class="emotion-2"
                                                              focusable="false"
                                                              role="img"
                                                              viewBox="0 0 24 24"
                                                            >
                                                              <g>
                                                                <path
                                                                  d="M12 7.5l8 8H4z"
                                                                />
                                                              </g>
                                                            </svg>
                                                            <input
                                                              type="hidden"
                                                              value=""
                                                            />
                                                            <div
                                                              class="emotion-3"
                                                            />
                                                          </div>
                                                        </span>
                                                      }
                                                    >
                                                      <Styled(div)
                                                        hasArrow={true}
                                                        id="select-58-content"
                                                        onBlur={[Function]}
                                                        style={
                                                          Object {
                                                            "left": 0,
                                                            "opacity": 0,
                                                            "pointerEvents": "none",
                                                            "position": "absolute",
                                                            "top": 0,
                                                          }
                                                        }
                                                      >
                                                        <div
                                                          className="emotion-26"
                                                          id="select-58-content"
                                                          onBlur={[Function]}
                                                          style={
                                                            Object {
                                                              "left": 0,
                                                              "opacity": 0,
                                                              "pointerEvents": "none",
                                                              "position": "absolute",
                                                              "top": 0,
                                                            }
                                                          }
                                                        >
                                                          <Menu
                                                            data={
                                                              Array [
                                                                Object {
                                                                  "text": "Alpha",
                                                                  "value": "alpha",
                                                                },
                                                                Object {
                                                                  "text": "Beta",
                                                                  "value": "beta",
                                                                },
                                                                Object {
                                                                  "text": "Gamma",
                                                                  "value": "gamma",
                                                                },
                                                              ]
                                                            }
                                                            id="select-58-menu"
                                                            item={[Function]}
                                                            itemKey="value"
                                                            role="listbox"
                                                          >
                                                            <Styled(div)
                                                              id="select-58-menu"
                                                              item={[Function]}
                                                              itemKey="value"
                                                              role="listbox"
                                                            >
                                                              <div
                                                                className="emotion-25"
                                                                id="select-58-menu"
                                                                role="listbox"
                                                              >
                                                                <MenuItem
                                                                  element="div"
                                                                  index={0}
                                                                  isHighlighted={false}
                                                                  item={
                                                                    Object {
                                                                      "text": "Alpha",
                                                                      "value": "alpha",
                                                                    }
                                                                  }
                                                                  key="alpha"
                                                                  render={[Function]}
                                                                  text="Alpha"
                                                                  value="alpha"
                                                                >
                                                                  <MenuItem
                                                                    aria-selected={false}
                                                                    element="div"
                                                                    id="select-58-item-0"
                                                                    index={0}
                                                                    isHighlighted={false}
                                                                    item={
                                                                      Object {
                                                                        "text": "Alpha",
                                                                        "value": "alpha",
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    role="option"
                                                                    tabIndex={null}
                                                                    text="Alpha"
                                                                    value="alpha"
                                                                  >
                                                                    <Styled(div)
                                                                      aria-selected={false}
                                                                      element="div"
                                                                      id="select-58-item-0"
                                                                      index={0}
                                                                      isHighlighted={false}
                                                                      item={
                                                                        Object {
                                                                          "text": "Alpha",
                                                                          "value": "alpha",
                                                                        }
                                                                      }
                                                                      onClick={[Function]}
                                                                      onKeyDown={[Function]}
                                                                      role="option"
                                                                      tabIndex={null}
                                                                      text="Alpha"
                                                                      value="alpha"
                                                                    >
                                                                      <div
                                                                        aria-selected={false}
                                                                        className="emotion-16"
                                                                        id="select-58-item-0"
                                                                        onClick={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        role="option"
                                                                        tabIndex={null}
                                                                        value="alpha"
                                                                      >
                                                                        <Styled(span)>
                                                                          <span
                                                                            className="emotion-15"
                                                                          >
                                                                            <Styled(span)>
                                                                              <span
                                                                                className="emotion-14"
                                                                              >
                                                                                <Styled(span)>
                                                                                  <span
                                                                                    className="emotion-13"
                                                                                  >
                                                                                    Alpha
                                                                                  </span>
                                                                                </Styled(span)>
                                                                              </span>
                                                                            </Styled(span)>
                                                                          </span>
                                                                        </Styled(span)>
                                                                      </div>
                                                                    </Styled(div)>
                                                                  </MenuItem>
                                                                </MenuItem>
                                                                <MenuItem
                                                                  element="div"
                                                                  index={1}
                                                                  isHighlighted={false}
                                                                  item={
                                                                    Object {
                                                                      "text": "Beta",
                                                                      "value": "beta",
                                                                    }
                                                                  }
                                                                  key="beta"
                                                                  render={[Function]}
                                                                  text="Beta"
                                                                  value="beta"
                                                                >
                                                                  <MenuItem
                                                                    aria-selected={false}
                                                                    element="div"
                                                                    id="select-58-item-1"
                                                                    index={1}
                                                                    isHighlighted={false}
                                                                    item={
                                                                      Object {
                                                                        "text": "Beta",
                                                                        "value": "beta",
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    role="option"
                                                                    tabIndex={null}
                                                                    text="Beta"
                                                                    value="beta"
                                                                  >
                                                                    <Styled(div)
                                                                      aria-selected={false}
                                                                      element="div"
                                                                      id="select-58-item-1"
                                                                      index={1}
                                                                      isHighlighted={false}
                                                                      item={
                                                                        Object {
                                                                          "text": "Beta",
                                                                          "value": "beta",
                                                                        }
                                                                      }
                                                                      onClick={[Function]}
                                                                      onKeyDown={[Function]}
                                                                      role="option"
                                                                      tabIndex={null}
                                                                      text="Beta"
                                                                      value="beta"
                                                                    >
                                                                      <div
                                                                        aria-selected={false}
                                                                        className="emotion-16"
                                                                        id="select-58-item-1"
                                                                        onClick={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        role="option"
                                                                        tabIndex={null}
                                                                        value="beta"
                                                                      >
                                                                        <Styled(span)>
                                                                          <span
                                                                            className="emotion-15"
                                                                          >
                                                                            <Styled(span)>
                                                                              <span
                                                                                className="emotion-14"
                                                                              >
                                                                                <Styled(span)>
                                                                                  <span
                                                                                    className="emotion-13"
                                                                                  >
                                                                                    Beta
                                                                                  </span>
                                                                                </Styled(span)>
                                                                              </span>
                                                                            </Styled(span)>
                                                                          </span>
                                                                        </Styled(span)>
                                                                      </div>
                                                                    </Styled(div)>
                                                                  </MenuItem>
                                                                </MenuItem>
                                                                <MenuItem
                                                                  element="div"
                                                                  index={2}
                                                                  isHighlighted={false}
                                                                  item={
                                                                    Object {
                                                                      "text": "Gamma",
                                                                      "value": "gamma",
                                                                    }
                                                                  }
                                                                  key="gamma"
                                                                  render={[Function]}
                                                                  text="Gamma"
                                                                  value="gamma"
                                                                >
                                                                  <MenuItem
                                                                    aria-selected={false}
                                                                    element="div"
                                                                    id="select-58-item-2"
                                                                    index={2}
                                                                    isHighlighted={false}
                                                                    item={
                                                                      Object {
                                                                        "text": "Gamma",
                                                                        "value": "gamma",
                                                                      }
                                                                    }
                                                                    onClick={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    role="option"
                                                                    tabIndex={null}
                                                                    text="Gamma"
                                                                    value="gamma"
                                                                  >
                                                                    <Styled(div)
                                                                      aria-selected={false}
                                                                      element="div"
                                                                      id="select-58-item-2"
                                                                      index={2}
                                                                      isHighlighted={false}
                                                                      item={
                                                                        Object {
                                                                          "text": "Gamma",
                                                                          "value": "gamma",
                                                                        }
                                                                      }
                                                                      onClick={[Function]}
                                                                      onKeyDown={[Function]}
                                                                      role="option"
                                                                      tabIndex={null}
                                                                      text="Gamma"
                                                                      value="gamma"
                                                                    >
                                                                      <div
                                                                        aria-selected={false}
                                                                        className="emotion-16"
                                                                        id="select-58-item-2"
                                                                        onClick={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        role="option"
                                                                        tabIndex={null}
                                                                        value="gamma"
                                                                      >
                                                                        <Styled(span)>
                                                                          <span
                                                                            className="emotion-15"
                                                                          >
                                                                            <Styled(span)>
                                                                              <span
                                                                                className="emotion-14"
                                                                              >
                                                                                <Styled(span)>
                                                                                  <span
                                                                                    className="emotion-13"
                                                                                  >
                                                                                    Gamma
                                                                                  </span>
                                                                                </Styled(span)>
                                                                              </span>
                                                                            </Styled(span)>
                                                                          </span>
                                                                        </Styled(span)>
                                                                      </div>
                                                                    </Styled(div)>
                                                                  </MenuItem>
                                                                </MenuItem>
                                                              </div>
                                                            </Styled(div)>
                                                          </Menu>
                                                        </div>
                                                      </Styled(div)>
                                                    </InnerPopper>
                                                  </Popper>
                                                </RtlPopper>
                                              </WithTheme(RtlPopper)>
                                            </DropdownContent>
                                          </Portal>
                                        </Portal>
                                        <EventListener
                                          listeners={
                                            Array [
                                              Object {
                                                "event": "click",
                                                "handler": [Function],
                                                "options": true,
                                                "target": "document",
                                              },
                                              Object {
                                                "event": "keydown",
                                                "handler": [Function],
                                                "options": true,
                                                "target": "document",
                                              },
                                            ]
                                          }
                                        />
                                      </span>
                                    </Styled(span)>
                                  </Manager>
                                </Popover>
                              </Dropdown>
                            </ThemeProvider>
                          </ThemeProvider>
                        </Themed(Dropdown)>
                      </WithTheme(Themed(Dropdown))>
                    </Styled(WithTheme(Themed(Dropdown)))>
                  </Select>
                </div>
              </Select>
            </div>
          </Styled(div)>
        </div>
      </Styled(div)>
      <Styled(WithForwardRef(Button))
        minimal={true}
        onClick={[Function]}
        size="small"
      >
        <WithForwardRef(Button)
          className="emotion-38"
          minimal={true}
          onClick={[Function]}
          size="small"
        >
          <Button
            className="emotion-38"
            forwardedRef={null}
            minimal={true}
            onClick={[Function]}
            size="small"
          >
            <Styled(button)
              className="emotion-38"
              minimal={true}
              onClick={[Function]}
              size="small"
              text="Re-center"
            >
              <button
                className="emotion-37"
                onClick={[Function]}
                size="small"
              >
                <Styled(span)>
                  <span
                    className="emotion-36"
                  >
                    <Styled(span)
                      size="small"
                    >
                      <span
                        className="emotion-35"
                        size="small"
                      >
                        Re-center
                      </span>
                    </Styled(span)>
                  </span>
                </Styled(span)>
              </button>
            </Styled(button)>
          </Button>
        </WithForwardRef(Button)>
      </Styled(WithForwardRef(Button))>
    </div>
  </Styled(div)>
</ScrollBox>
`;

exports[`Select demo examples Snapshots: read-only 1`] = `
.emotion-14 {
  width: 100%;
}

.emotion-14 > span {
  width: 100%;
}

.emotion-13 {
  display: inline-block;
  width: 100%;
}

.emotion-13 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-3 {
  margin: 0.5em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #afbacc;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #afbacc;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #afbacc;
  margin-left: 0.5em;
}

.emotion-6 {
  background-color: #ebeff5;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-7:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #afbacc;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #afbacc;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #afbacc;
  margin-left: 0.5em;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #58606e;
  -webkit-text-fill-color: #58606e;
  font-size: 0.875em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

<Select
  data={
    Array [
      Object {
        "text": "Alpha",
        "value": "alpha",
      },
      Object {
        "text": "Beta",
        "value": "beta",
      },
      Object {
        "text": "Gamma",
        "value": "gamma",
      },
    ]
  }
  itemKey="value"
  placeholder="Select..."
  placement="bottom-start"
  readOnly={true}
  selectedItem={
    Object {
      "text": "Alpha",
      "value": "alpha",
    }
  }
  size="large"
>
  <Styled(WithTheme(Themed(Dropdown)))
    data={
      Array [
        Object {
          "text": "Alpha",
          "value": "alpha",
        },
        Object {
          "text": "Beta",
          "value": "beta",
        },
        Object {
          "text": "Gamma",
          "value": "gamma",
        },
      ]
    }
    disabled={true}
    id="select-16"
    isOpen={false}
    itemKey="value"
    menu={[Function]}
    modifiers={
      Object {
        "contentWidth": Object {
          "enabled": true,
          "fn": [Function],
        },
      }
    }
    onClose={[Function]}
    onOpen={[Function]}
    placeholder="Select..."
    placement="bottom-start"
    selectedItem={
      Object {
        "text": "Alpha",
        "value": "alpha",
      }
    }
    size="large"
  >
    <WithTheme(Themed(Dropdown))
      className="emotion-14"
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      disabled={true}
      id="select-16"
      isOpen={false}
      itemKey="value"
      menu={[Function]}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      onClose={[Function]}
      onOpen={[Function]}
      placeholder="Select..."
      placement="bottom-start"
      selectedItem={
        Object {
          "text": "Alpha",
          "value": "alpha",
        }
      }
      size="large"
    >
      <Themed(Dropdown)
        className="emotion-14"
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        disabled={true}
        id="select-16"
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Select..."
        placement="bottom-start"
        selectedItem={
          Object {
            "text": "Alpha",
            "value": "alpha",
          }
        }
        size="large"
      >
        <ThemeProvider>
          <ThemeProvider>
            <Dropdown
              className="emotion-14"
              data={
                Array [
                  Object {
                    "text": "Alpha",
                    "value": "alpha",
                  },
                  Object {
                    "text": "Beta",
                    "value": "beta",
                  },
                  Object {
                    "text": "Gamma",
                    "value": "gamma",
                  },
                ]
              }
              disabled={true}
              id="select-16"
              isOpen={false}
              itemKey="value"
              menu={[Function]}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placeholder="Select..."
              placement="bottom-start"
              selectedItem={
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                }
              }
              size="large"
            >
              <Popover
                className="emotion-14"
                content={[Function]}
                disabled={true}
                focusTriggerOnClose={true}
                hasArrow={true}
                id="select-16"
                isOpen={false}
                itemKey="value"
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placeholder="Select..."
                placement="bottom-start"
                selectedItem={
                  Object {
                    "text": "Alpha",
                    "value": "alpha",
                  }
                }
                size="large"
                triggerRef={[Function]}
              >
                <Manager>
                  <Styled(span)
                    className="emotion-14"
                    content={[Function]}
                    disabled={true}
                    focusTriggerOnClose={true}
                    hasArrow={true}
                    id="select-16"
                    isOpen={false}
                    itemKey="value"
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Select..."
                    placement="bottom-start"
                    selectedItem={
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      }
                    }
                    size="large"
                    triggerRef={[Function]}
                  >
                    <span
                      className="emotion-13"
                      content={[Function]}
                      disabled={true}
                      id="select-16"
                      onClose={[Function]}
                      onOpen={[Function]}
                      placeholder="Select..."
                      size="large"
                    >
                      <PopoverTrigger
                        aria-describedby="select-16-content"
                        aria-disabled={true}
                        aria-expanded={false}
                        aria-haspopup="listbox"
                        aria-owns="select-16-content"
                        aria-readonly={true}
                        isOpen={false}
                        item={
                          Object {
                            "text": "Alpha",
                            "value": "alpha",
                          }
                        }
                        onBlur={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        placeholder="Select..."
                        readOnly={true}
                        role="button"
                        size="large"
                        tabIndex={0}
                        triggerRef={[Function]}
                      >
                        <Reference>
                          <InnerReference
                            getReferenceRef={[Function]}
                          >
                            <Styled(span)>
                              <span
                                className="emotion-12"
                              >
                                <SelectTrigger
                                  aria-describedby="select-16-content"
                                  aria-disabled={true}
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-owns="select-16-content"
                                  aria-readonly={true}
                                  isOpen={false}
                                  item={
                                    Object {
                                      "text": "Alpha",
                                      "value": "alpha",
                                    }
                                  }
                                  onBlur={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  placeholder="Select..."
                                  readOnly={true}
                                  role="button"
                                  size="large"
                                  tabIndex={0}
                                  triggerRef={[Function]}
                                >
                                  <Styled(WithTheme(Themed(FauxControl)))
                                    afterItems={
                                      Array [
                                        <withProps(Styled(IconArrowDropdownDown)) />,
                                        <input
                                          onClick={[Function]}
                                          type="hidden"
                                          value="alpha"
                                        />,
                                      ]
                                    }
                                    aria-describedby="select-16-content"
                                    aria-disabled={true}
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-16-content"
                                    aria-readonly={true}
                                    control={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "__emotion_base": "div",
                                        "__emotion_forwardProp": undefined,
                                        "__emotion_real": [Circular],
                                        "__emotion_styles": Array [
                                          [Function],
                                        ],
                                        "defaultProps": undefined,
                                        "displayName": "Styled(div)",
                                        "render": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    controlProps={
                                      Object {
                                        "hasPlaceholder": false,
                                        "variant": undefined,
                                      }
                                    }
                                    fauxControlRef={[Function]}
                                    item={
                                      Object {
                                        "text": "Alpha",
                                        "value": "alpha",
                                      }
                                    }
                                    onBlur={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    readOnly={true}
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                  >
                                    <WithTheme(Themed(FauxControl))
                                      afterItems={
                                        Array [
                                          <withProps(Styled(IconArrowDropdownDown)) />,
                                          <input
                                            onClick={[Function]}
                                            type="hidden"
                                            value="alpha"
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-16-content"
                                      aria-disabled={true}
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-16-content"
                                      aria-readonly={true}
                                      className="emotion-8"
                                      control={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "__emotion_base": "div",
                                          "__emotion_forwardProp": undefined,
                                          "__emotion_real": [Circular],
                                          "__emotion_styles": Array [
                                            [Function],
                                          ],
                                          "defaultProps": undefined,
                                          "displayName": "Styled(div)",
                                          "render": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": false,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      item={
                                        Object {
                                          "text": "Alpha",
                                          "value": "alpha",
                                        }
                                      }
                                      onBlur={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      readOnly={true}
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                    >
                                      <Themed(FauxControl)
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value="alpha"
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-16-content"
                                        aria-disabled={true}
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-16-content"
                                        aria-readonly={true}
                                        className="emotion-8"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": false,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        item={
                                          Object {
                                            "text": "Alpha",
                                            "value": "alpha",
                                          }
                                        }
                                        onBlur={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        readOnly={true}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <ThemeProvider>
                                          <ThemeProvider>
                                            <FauxControl
                                              afterItems={
                                                Array [
                                                  <withProps(Styled(IconArrowDropdownDown)) />,
                                                  <input
                                                    onClick={[Function]}
                                                    type="hidden"
                                                    value="alpha"
                                                  />,
                                                ]
                                              }
                                              aria-describedby="select-16-content"
                                              aria-disabled={true}
                                              aria-expanded={false}
                                              aria-haspopup="listbox"
                                              aria-owns="select-16-content"
                                              aria-readonly={true}
                                              className="emotion-8"
                                              control={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "__emotion_base": "div",
                                                  "__emotion_forwardProp": undefined,
                                                  "__emotion_real": [Circular],
                                                  "__emotion_styles": Array [
                                                    [Function],
                                                  ],
                                                  "defaultProps": undefined,
                                                  "displayName": "Styled(div)",
                                                  "render": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              controlProps={
                                                Object {
                                                  "hasPlaceholder": false,
                                                  "variant": undefined,
                                                }
                                              }
                                              fauxControlRef={[Function]}
                                              item={
                                                Object {
                                                  "text": "Alpha",
                                                  "value": "alpha",
                                                }
                                              }
                                              onBlur={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              readOnly={true}
                                              role="button"
                                              size="large"
                                              tabIndex={0}
                                            >
                                              <Styled(div)
                                                aria-describedby="select-16-content"
                                                aria-disabled={true}
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-owns="select-16-content"
                                                aria-readonly={true}
                                                className="emotion-8"
                                                control={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "__emotion_base": "div",
                                                    "__emotion_forwardProp": undefined,
                                                    "__emotion_real": [Circular],
                                                    "__emotion_styles": Array [
                                                      [Function],
                                                    ],
                                                    "defaultProps": undefined,
                                                    "displayName": "Styled(div)",
                                                    "render": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                item={
                                                  Object {
                                                    "text": "Alpha",
                                                    "value": "alpha",
                                                  }
                                                }
                                                onBlur={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                tabIndex={0}
                                              >
                                                <div
                                                  aria-describedby="select-16-content"
                                                  aria-disabled={true}
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-16-content"
                                                  aria-readonly={true}
                                                  className="emotion-7"
                                                  onBlur={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <Styled(div)
                                                    controlPropsIn={
                                                      Object {
                                                        "hasPlaceholder": false,
                                                        "variant": undefined,
                                                      }
                                                    }
                                                    hasPlaceholder={false}
                                                    key="control"
                                                    readOnly={true}
                                                    size="large"
                                                  >
                                                    <div
                                                      className="emotion-1"
                                                      readOnly={true}
                                                      size="large"
                                                    >
                                                      <Styled(span)>
                                                        <span
                                                          className="emotion-0"
                                                        >
                                                          Alpha
                                                        </span>
                                                      </Styled(span)>
                                                    </div>
                                                  </Styled(div)>
                                                  <withProps(Styled(IconArrowDropdownDown))
                                                    key="arrow"
                                                  >
                                                    <Styled(IconArrowDropdownDown)
                                                      size="1.5em"
                                                    >
                                                      <IconArrowDropdownDown
                                                        className="emotion-3"
                                                        size="1.5em"
                                                      >
                                                        <Icon
                                                          className="emotion-3"
                                                          rtl={false}
                                                          size="1.5em"
                                                        >
                                                          <Styled(svg)
                                                            aria-hidden={true}
                                                            className="emotion-3"
                                                            focusable="false"
                                                            role="img"
                                                            rtl={false}
                                                            size="1.5em"
                                                            viewBox="0 0 24 24"
                                                          >
                                                            <svg
                                                              aria-hidden={true}
                                                              className="emotion-2"
                                                              focusable="false"
                                                              role="img"
                                                              size="1.5em"
                                                              viewBox="0 0 24 24"
                                                            >
                                                              <g>
                                                                <path
                                                                  d="M12 17.5l-8-8h16z"
                                                                />
                                                              </g>
                                                            </svg>
                                                          </Styled(svg)>
                                                        </Icon>
                                                      </IconArrowDropdownDown>
                                                    </Styled(IconArrowDropdownDown)>
                                                  </withProps(Styled(IconArrowDropdownDown))>
                                                  <input
                                                    key="input"
                                                    onClick={[Function]}
                                                    type="hidden"
                                                    value="alpha"
                                                  />
                                                  <Styled(div)
                                                    readOnly={true}
                                                  >
                                                    <div
                                                      className="emotion-6"
                                                      readOnly={true}
                                                    />
                                                  </Styled(div)>
                                                </div>
                                              </Styled(div)>
                                            </FauxControl>
                                          </ThemeProvider>
                                        </ThemeProvider>
                                      </Themed(FauxControl)>
                                    </WithTheme(Themed(FauxControl))>
                                  </Styled(WithTheme(Themed(FauxControl)))>
                                </SelectTrigger>
                              </span>
                            </Styled(span)>
                          </InnerReference>
                        </Reference>
                      </PopoverTrigger>
                    </span>
                  </Styled(span)>
                </Manager>
              </Popover>
            </Dropdown>
          </ThemeProvider>
        </ThemeProvider>
      </Themed(Dropdown)>
    </WithTheme(Themed(Dropdown))>
  </Styled(WithTheme(Themed(Dropdown)))>
</Select>
`;

exports[`Select demo examples Snapshots: required 1`] = `
.emotion-14 {
  width: 100%;
}

.emotion-14 > span {
  width: 100%;
}

.emotion-13 {
  display: inline-block;
  width: 100%;
}

.emotion-13 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-7:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-3 {
  margin: 0.5em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-6 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

<Select
  data={
    Array [
      Object {
        "text": "Alpha",
        "value": "alpha",
      },
      Object {
        "text": "Beta",
        "value": "beta",
      },
      Object {
        "text": "Gamma",
        "value": "gamma",
      },
    ]
  }
  itemKey="value"
  placeholder="Select..."
  placement="bottom-start"
  required={true}
  size="large"
>
  <Styled(WithTheme(Themed(Dropdown)))
    data={
      Array [
        Object {
          "text": "Alpha",
          "value": "alpha",
        },
        Object {
          "text": "Beta",
          "value": "beta",
        },
        Object {
          "text": "Gamma",
          "value": "gamma",
        },
      ]
    }
    id="select-19"
    isOpen={false}
    itemKey="value"
    menu={[Function]}
    modifiers={
      Object {
        "contentWidth": Object {
          "enabled": true,
          "fn": [Function],
        },
      }
    }
    onClose={[Function]}
    onOpen={[Function]}
    placeholder="Select..."
    placement="bottom-start"
    required={true}
    size="large"
  >
    <WithTheme(Themed(Dropdown))
      className="emotion-14"
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      id="select-19"
      isOpen={false}
      itemKey="value"
      menu={[Function]}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      onClose={[Function]}
      onOpen={[Function]}
      placeholder="Select..."
      placement="bottom-start"
      required={true}
      size="large"
    >
      <Themed(Dropdown)
        className="emotion-14"
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        id="select-19"
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Select..."
        placement="bottom-start"
        required={true}
        size="large"
      >
        <ThemeProvider>
          <ThemeProvider>
            <Dropdown
              className="emotion-14"
              data={
                Array [
                  Object {
                    "text": "Alpha",
                    "value": "alpha",
                  },
                  Object {
                    "text": "Beta",
                    "value": "beta",
                  },
                  Object {
                    "text": "Gamma",
                    "value": "gamma",
                  },
                ]
              }
              id="select-19"
              isOpen={false}
              itemKey="value"
              menu={[Function]}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placeholder="Select..."
              placement="bottom-start"
              required={true}
              size="large"
            >
              <Popover
                className="emotion-14"
                content={[Function]}
                focusTriggerOnClose={true}
                hasArrow={true}
                id="select-19"
                isOpen={false}
                itemKey="value"
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placeholder="Select..."
                placement="bottom-start"
                required={true}
                size="large"
                triggerRef={[Function]}
              >
                <Manager>
                  <Styled(span)
                    className="emotion-14"
                    content={[Function]}
                    focusTriggerOnClose={true}
                    hasArrow={true}
                    id="select-19"
                    isOpen={false}
                    itemKey="value"
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Select..."
                    placement="bottom-start"
                    required={true}
                    size="large"
                    triggerRef={[Function]}
                  >
                    <span
                      className="emotion-13"
                      content={[Function]}
                      id="select-19"
                      onClose={[Function]}
                      onOpen={[Function]}
                      placeholder="Select..."
                      required={true}
                      size="large"
                    >
                      <PopoverTrigger
                        aria-describedby="select-19-content"
                        aria-expanded={false}
                        aria-haspopup="listbox"
                        aria-owns="select-19-content"
                        aria-required={true}
                        isOpen={false}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        placeholder="Select..."
                        role="button"
                        size="large"
                        tabIndex={0}
                        triggerRef={[Function]}
                      >
                        <Reference>
                          <InnerReference
                            getReferenceRef={[Function]}
                          >
                            <Styled(span)>
                              <span
                                className="emotion-12"
                              >
                                <SelectTrigger
                                  aria-describedby="select-19-content"
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-owns="select-19-content"
                                  aria-required={true}
                                  isOpen={false}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  placeholder="Select..."
                                  role="button"
                                  size="large"
                                  tabIndex={0}
                                  triggerRef={[Function]}
                                >
                                  <Styled(WithTheme(Themed(FauxControl)))
                                    afterItems={
                                      Array [
                                        <withProps(Styled(IconArrowDropdownDown)) />,
                                        <input
                                          onClick={[Function]}
                                          type="hidden"
                                          value=""
                                        />,
                                      ]
                                    }
                                    aria-describedby="select-19-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-19-content"
                                    aria-required={true}
                                    control={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "__emotion_base": "div",
                                        "__emotion_forwardProp": undefined,
                                        "__emotion_real": [Circular],
                                        "__emotion_styles": Array [
                                          [Function],
                                        ],
                                        "defaultProps": undefined,
                                        "displayName": "Styled(div)",
                                        "render": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    controlProps={
                                      Object {
                                        "hasPlaceholder": true,
                                        "variant": undefined,
                                      }
                                    }
                                    fauxControlRef={[Function]}
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                  >
                                    <WithTheme(Themed(FauxControl))
                                      afterItems={
                                        Array [
                                          <withProps(Styled(IconArrowDropdownDown)) />,
                                          <input
                                            onClick={[Function]}
                                            type="hidden"
                                            value=""
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-19-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-19-content"
                                      aria-required={true}
                                      className="emotion-8"
                                      control={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "__emotion_base": "div",
                                          "__emotion_forwardProp": undefined,
                                          "__emotion_real": [Circular],
                                          "__emotion_styles": Array [
                                            [Function],
                                          ],
                                          "defaultProps": undefined,
                                          "displayName": "Styled(div)",
                                          "render": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": true,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                    >
                                      <Themed(FauxControl)
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-19-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-19-content"
                                        aria-required={true}
                                        className="emotion-8"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <ThemeProvider>
                                          <ThemeProvider>
                                            <FauxControl
                                              afterItems={
                                                Array [
                                                  <withProps(Styled(IconArrowDropdownDown)) />,
                                                  <input
                                                    onClick={[Function]}
                                                    type="hidden"
                                                    value=""
                                                  />,
                                                ]
                                              }
                                              aria-describedby="select-19-content"
                                              aria-expanded={false}
                                              aria-haspopup="listbox"
                                              aria-owns="select-19-content"
                                              aria-required={true}
                                              className="emotion-8"
                                              control={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "__emotion_base": "div",
                                                  "__emotion_forwardProp": undefined,
                                                  "__emotion_real": [Circular],
                                                  "__emotion_styles": Array [
                                                    [Function],
                                                  ],
                                                  "defaultProps": undefined,
                                                  "displayName": "Styled(div)",
                                                  "render": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              controlProps={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              fauxControlRef={[Function]}
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              role="button"
                                              size="large"
                                              tabIndex={0}
                                            >
                                              <Styled(div)
                                                aria-describedby="select-19-content"
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-owns="select-19-content"
                                                aria-required={true}
                                                className="emotion-8"
                                                control={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "__emotion_base": "div",
                                                    "__emotion_forwardProp": undefined,
                                                    "__emotion_real": [Circular],
                                                    "__emotion_styles": Array [
                                                      [Function],
                                                    ],
                                                    "defaultProps": undefined,
                                                    "displayName": "Styled(div)",
                                                    "render": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                tabIndex={0}
                                              >
                                                <div
                                                  aria-describedby="select-19-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-19-content"
                                                  aria-required={true}
                                                  className="emotion-7"
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <Styled(div)
                                                    controlPropsIn={
                                                      Object {
                                                        "hasPlaceholder": true,
                                                        "variant": undefined,
                                                      }
                                                    }
                                                    hasPlaceholder={true}
                                                    key="control"
                                                    size="large"
                                                  >
                                                    <div
                                                      className="emotion-1"
                                                      size="large"
                                                    >
                                                      <Styled(span)>
                                                        <span
                                                          className="emotion-0"
                                                        >
                                                          Select...
                                                        </span>
                                                      </Styled(span)>
                                                    </div>
                                                  </Styled(div)>
                                                  <withProps(Styled(IconArrowDropdownDown))
                                                    key="arrow"
                                                  >
                                                    <Styled(IconArrowDropdownDown)
                                                      size="1.5em"
                                                    >
                                                      <IconArrowDropdownDown
                                                        className="emotion-3"
                                                        size="1.5em"
                                                      >
                                                        <Icon
                                                          className="emotion-3"
                                                          rtl={false}
                                                          size="1.5em"
                                                        >
                                                          <Styled(svg)
                                                            aria-hidden={true}
                                                            className="emotion-3"
                                                            focusable="false"
                                                            role="img"
                                                            rtl={false}
                                                            size="1.5em"
                                                            viewBox="0 0 24 24"
                                                          >
                                                            <svg
                                                              aria-hidden={true}
                                                              className="emotion-2"
                                                              focusable="false"
                                                              role="img"
                                                              size="1.5em"
                                                              viewBox="0 0 24 24"
                                                            >
                                                              <g>
                                                                <path
                                                                  d="M12 17.5l-8-8h16z"
                                                                />
                                                              </g>
                                                            </svg>
                                                          </Styled(svg)>
                                                        </Icon>
                                                      </IconArrowDropdownDown>
                                                    </Styled(IconArrowDropdownDown)>
                                                  </withProps(Styled(IconArrowDropdownDown))>
                                                  <input
                                                    key="input"
                                                    onClick={[Function]}
                                                    type="hidden"
                                                    value=""
                                                  />
                                                  <Styled(div)>
                                                    <div
                                                      className="emotion-6"
                                                    />
                                                  </Styled(div)>
                                                </div>
                                              </Styled(div)>
                                            </FauxControl>
                                          </ThemeProvider>
                                        </ThemeProvider>
                                      </Themed(FauxControl)>
                                    </WithTheme(Themed(FauxControl))>
                                  </Styled(WithTheme(Themed(FauxControl)))>
                                </SelectTrigger>
                              </span>
                            </Styled(span)>
                          </InnerReference>
                        </Reference>
                      </PopoverTrigger>
                    </span>
                  </Styled(span)>
                </Manager>
              </Popover>
            </Dropdown>
          </ThemeProvider>
        </ThemeProvider>
      </Themed(Dropdown)>
    </WithTheme(Themed(Dropdown))>
  </Styled(WithTheme(Themed(Dropdown)))>
</Select>
`;

exports[`Select demo examples Snapshots: rtl 1`] = `
.emotion-14 {
  width: 100%;
}

.emotion-14 > span {
  width: 100%;
}

.emotion-13 {
  display: inline-block;
  width: 100%;
}

.emotion-13 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-3 {
  margin: 0.5em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-6 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-39[class] > *:not(:last-child) {
  margin-bottom: 1rem;
}

.emotion-21 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
}

.emotion-26 {
  background-color: #ffffff;
  border-color: #2a854e;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-right: 0.5em;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-7:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-right: 0.5em;
}

.emotion-28 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-28 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-28 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-28 :not([role="img"]) ~ [role="img"] {
  color: #2a854e;
}

.emotion-28 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #2a854e;
  margin-right: 0.5em;
}

.emotion-27 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-27 *,
.emotion-27 *::before,
.emotion-27 *::after {
  box-sizing: inherit;
}

.emotion-27:hover > div:last-child {
  border-color: #3ba164;
}

.emotion-27:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #20693d;
}

.emotion-27:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #20693d;
}

.emotion-27 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-27 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-27 :not([role="img"]) ~ [role="img"] {
  color: #2a854e;
}

.emotion-27 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #2a854e;
  margin-right: 0.5em;
}

.emotion-20 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 0;
  padding-right: 1.1428571428571428em;
}

.emotion-20::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-20::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-20:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-20::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-20::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-20:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-20::-ms-clear {
  display: none;
}

.emotion-20:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #20693d;
}

<div
  dir="rtl"
>
  <ThemeProvider>
    <ThemeProvider>
      <Styled(div)>
        <div
          className="emotion-39"
        >
          <Select
            data={
              Array [
                Object {
                  "text": "ألفا",
                  "value": "alpha",
                },
                Object {
                  "text": "بيتا",
                  "value": "beta",
                },
                Object {
                  "text": "غاما",
                  "value": "gamma",
                },
              ]
            }
            itemKey="value"
            placeholder="تحديد..."
            placement="bottom-start"
            size="large"
          >
            <Styled(WithTheme(Themed(Dropdown)))
              data={
                Array [
                  Object {
                    "text": "ألفا",
                    "value": "alpha",
                  },
                  Object {
                    "text": "بيتا",
                    "value": "beta",
                  },
                  Object {
                    "text": "غاما",
                    "value": "gamma",
                  },
                ]
              }
              id="select-64"
              isOpen={false}
              itemKey="value"
              menu={[Function]}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placeholder="تحديد..."
              placement="bottom-start"
              size="large"
            >
              <WithTheme(Themed(Dropdown))
                className="emotion-14"
                data={
                  Array [
                    Object {
                      "text": "ألفا",
                      "value": "alpha",
                    },
                    Object {
                      "text": "بيتا",
                      "value": "beta",
                    },
                    Object {
                      "text": "غاما",
                      "value": "gamma",
                    },
                  ]
                }
                id="select-64"
                isOpen={false}
                itemKey="value"
                menu={[Function]}
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placeholder="تحديد..."
                placement="bottom-start"
                size="large"
              >
                <Themed(Dropdown)
                  className="emotion-14"
                  data={
                    Array [
                      Object {
                        "text": "ألفا",
                        "value": "alpha",
                      },
                      Object {
                        "text": "بيتا",
                        "value": "beta",
                      },
                      Object {
                        "text": "غاما",
                        "value": "gamma",
                      },
                    ]
                  }
                  id="select-64"
                  isOpen={false}
                  itemKey="value"
                  menu={[Function]}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="تحديد..."
                  placement="bottom-start"
                  size="large"
                >
                  <ThemeProvider>
                    <ThemeProvider>
                      <Dropdown
                        className="emotion-14"
                        data={
                          Array [
                            Object {
                              "text": "ألفا",
                              "value": "alpha",
                            },
                            Object {
                              "text": "بيتا",
                              "value": "beta",
                            },
                            Object {
                              "text": "غاما",
                              "value": "gamma",
                            },
                          ]
                        }
                        id="select-64"
                        isOpen={false}
                        itemKey="value"
                        menu={[Function]}
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="تحديد..."
                        placement="bottom-start"
                        size="large"
                      >
                        <Popover
                          className="emotion-14"
                          content={[Function]}
                          focusTriggerOnClose={true}
                          hasArrow={true}
                          id="select-64"
                          isOpen={false}
                          itemKey="value"
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                            }
                          }
                          onClose={[Function]}
                          onOpen={[Function]}
                          placeholder="تحديد..."
                          placement="bottom-start"
                          size="large"
                          triggerRef={[Function]}
                        >
                          <Manager>
                            <Styled(span)
                              className="emotion-14"
                              content={[Function]}
                              focusTriggerOnClose={true}
                              hasArrow={true}
                              id="select-64"
                              isOpen={false}
                              itemKey="value"
                              onClose={[Function]}
                              onOpen={[Function]}
                              placeholder="تحديد..."
                              placement="bottom-start"
                              size="large"
                              triggerRef={[Function]}
                            >
                              <span
                                className="emotion-13"
                                content={[Function]}
                                id="select-64"
                                onClose={[Function]}
                                onOpen={[Function]}
                                placeholder="تحديد..."
                                size="large"
                              >
                                <PopoverTrigger
                                  aria-describedby="select-64-content"
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-owns="select-64-content"
                                  isOpen={false}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  placeholder="تحديد..."
                                  role="button"
                                  size="large"
                                  tabIndex={0}
                                  triggerRef={[Function]}
                                >
                                  <Reference>
                                    <InnerReference
                                      getReferenceRef={[Function]}
                                    >
                                      <Styled(span)>
                                        <span
                                          className="emotion-12"
                                        >
                                          <SelectTrigger
                                            aria-describedby="select-64-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-64-content"
                                            isOpen={false}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            placeholder="تحديد..."
                                            role="button"
                                            size="large"
                                            tabIndex={0}
                                            triggerRef={[Function]}
                                          >
                                            <Styled(WithTheme(Themed(FauxControl)))
                                              afterItems={
                                                Array [
                                                  <withProps(Styled(IconArrowDropdownDown)) />,
                                                  <input
                                                    onClick={[Function]}
                                                    type="hidden"
                                                    value=""
                                                  />,
                                                ]
                                              }
                                              aria-describedby="select-64-content"
                                              aria-expanded={false}
                                              aria-haspopup="listbox"
                                              aria-owns="select-64-content"
                                              control={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "__emotion_base": "div",
                                                  "__emotion_forwardProp": undefined,
                                                  "__emotion_real": [Circular],
                                                  "__emotion_styles": Array [
                                                    [Function],
                                                  ],
                                                  "defaultProps": undefined,
                                                  "displayName": "Styled(div)",
                                                  "render": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              controlProps={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              fauxControlRef={[Function]}
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              role="button"
                                              size="large"
                                              tabIndex={0}
                                            >
                                              <WithTheme(Themed(FauxControl))
                                                afterItems={
                                                  Array [
                                                    <withProps(Styled(IconArrowDropdownDown)) />,
                                                    <input
                                                      onClick={[Function]}
                                                      type="hidden"
                                                      value=""
                                                    />,
                                                  ]
                                                }
                                                aria-describedby="select-64-content"
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-owns="select-64-content"
                                                className="emotion-8"
                                                control={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "__emotion_base": "div",
                                                    "__emotion_forwardProp": undefined,
                                                    "__emotion_real": [Circular],
                                                    "__emotion_styles": Array [
                                                      [Function],
                                                    ],
                                                    "defaultProps": undefined,
                                                    "displayName": "Styled(div)",
                                                    "render": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                controlProps={
                                                  Object {
                                                    "hasPlaceholder": true,
                                                    "variant": undefined,
                                                  }
                                                }
                                                fauxControlRef={[Function]}
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                size="large"
                                                tabIndex={0}
                                              >
                                                <Themed(FauxControl)
                                                  afterItems={
                                                    Array [
                                                      <withProps(Styled(IconArrowDropdownDown)) />,
                                                      <input
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />,
                                                    ]
                                                  }
                                                  aria-describedby="select-64-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-64-content"
                                                  className="emotion-8"
                                                  control={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "__emotion_base": "div",
                                                      "__emotion_forwardProp": undefined,
                                                      "__emotion_real": [Circular],
                                                      "__emotion_styles": Array [
                                                        [Function],
                                                      ],
                                                      "defaultProps": undefined,
                                                      "displayName": "Styled(div)",
                                                      "render": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  controlProps={
                                                    Object {
                                                      "hasPlaceholder": true,
                                                      "variant": undefined,
                                                    }
                                                  }
                                                  fauxControlRef={[Function]}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  size="large"
                                                  tabIndex={0}
                                                >
                                                  <ThemeProvider>
                                                    <ThemeProvider>
                                                      <FauxControl
                                                        afterItems={
                                                          Array [
                                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                                            <input
                                                              onClick={[Function]}
                                                              type="hidden"
                                                              value=""
                                                            />,
                                                          ]
                                                        }
                                                        aria-describedby="select-64-content"
                                                        aria-expanded={false}
                                                        aria-haspopup="listbox"
                                                        aria-owns="select-64-content"
                                                        className="emotion-8"
                                                        control={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "__emotion_base": "div",
                                                            "__emotion_forwardProp": undefined,
                                                            "__emotion_real": [Circular],
                                                            "__emotion_styles": Array [
                                                              [Function],
                                                            ],
                                                            "defaultProps": undefined,
                                                            "displayName": "Styled(div)",
                                                            "render": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        controlProps={
                                                          Object {
                                                            "hasPlaceholder": true,
                                                            "variant": undefined,
                                                          }
                                                        }
                                                        fauxControlRef={[Function]}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        role="button"
                                                        size="large"
                                                        tabIndex={0}
                                                      >
                                                        <Styled(div)
                                                          aria-describedby="select-64-content"
                                                          aria-expanded={false}
                                                          aria-haspopup="listbox"
                                                          aria-owns="select-64-content"
                                                          className="emotion-8"
                                                          control={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "__emotion_base": "div",
                                                              "__emotion_forwardProp": undefined,
                                                              "__emotion_real": [Circular],
                                                              "__emotion_styles": Array [
                                                                [Function],
                                                              ],
                                                              "defaultProps": undefined,
                                                              "displayName": "Styled(div)",
                                                              "render": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          onBlur={[Function]}
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          role="button"
                                                          tabIndex={0}
                                                        >
                                                          <div
                                                            aria-describedby="select-64-content"
                                                            aria-expanded={false}
                                                            aria-haspopup="listbox"
                                                            aria-owns="select-64-content"
                                                            className="emotion-7"
                                                            onBlur={[Function]}
                                                            onClick={[Function]}
                                                            onKeyDown={[Function]}
                                                            onKeyUp={[Function]}
                                                            role="button"
                                                            tabIndex={0}
                                                          >
                                                            <Styled(div)
                                                              controlPropsIn={
                                                                Object {
                                                                  "hasPlaceholder": true,
                                                                  "variant": undefined,
                                                                }
                                                              }
                                                              hasPlaceholder={true}
                                                              key="control"
                                                              size="large"
                                                            >
                                                              <div
                                                                className="emotion-1"
                                                                size="large"
                                                              >
                                                                <Styled(span)>
                                                                  <span
                                                                    className="emotion-0"
                                                                  >
                                                                    تحديد...
                                                                  </span>
                                                                </Styled(span)>
                                                              </div>
                                                            </Styled(div)>
                                                            <withProps(Styled(IconArrowDropdownDown))
                                                              key="arrow"
                                                            >
                                                              <Styled(IconArrowDropdownDown)
                                                                size="1.5em"
                                                              >
                                                                <IconArrowDropdownDown
                                                                  className="emotion-3"
                                                                  size="1.5em"
                                                                >
                                                                  <Icon
                                                                    className="emotion-3"
                                                                    rtl={false}
                                                                    size="1.5em"
                                                                  >
                                                                    <Styled(svg)
                                                                      aria-hidden={true}
                                                                      className="emotion-3"
                                                                      focusable="false"
                                                                      role="img"
                                                                      rtl={false}
                                                                      size="1.5em"
                                                                      viewBox="0 0 24 24"
                                                                    >
                                                                      <svg
                                                                        aria-hidden={true}
                                                                        className="emotion-2"
                                                                        focusable="false"
                                                                        role="img"
                                                                        size="1.5em"
                                                                        viewBox="0 0 24 24"
                                                                      >
                                                                        <g>
                                                                          <path
                                                                            d="M12 17.5l-8-8h16z"
                                                                          />
                                                                        </g>
                                                                      </svg>
                                                                    </Styled(svg)>
                                                                  </Icon>
                                                                </IconArrowDropdownDown>
                                                              </Styled(IconArrowDropdownDown)>
                                                            </withProps(Styled(IconArrowDropdownDown))>
                                                            <input
                                                              key="input"
                                                              onClick={[Function]}
                                                              type="hidden"
                                                              value=""
                                                            />
                                                            <Styled(div)>
                                                              <div
                                                                className="emotion-6"
                                                              />
                                                            </Styled(div)>
                                                          </div>
                                                        </Styled(div)>
                                                      </FauxControl>
                                                    </ThemeProvider>
                                                  </ThemeProvider>
                                                </Themed(FauxControl)>
                                              </WithTheme(Themed(FauxControl))>
                                            </Styled(WithTheme(Themed(FauxControl)))>
                                          </SelectTrigger>
                                        </span>
                                      </Styled(span)>
                                    </InnerReference>
                                  </Reference>
                                </PopoverTrigger>
                              </span>
                            </Styled(span)>
                          </Manager>
                        </Popover>
                      </Dropdown>
                    </ThemeProvider>
                  </ThemeProvider>
                </Themed(Dropdown)>
              </WithTheme(Themed(Dropdown))>
            </Styled(WithTheme(Themed(Dropdown)))>
          </Select>
          <Select
            data={
              Array [
                Object {
                  "text": "ألفا",
                  "value": "alpha",
                },
                Object {
                  "text": "بيتا",
                  "value": "beta",
                },
                Object {
                  "text": "غاما",
                  "value": "gamma",
                },
              ]
            }
            itemKey="value"
            placeholder="تحديد..."
            placement="bottom-start"
            size="large"
            variant="success"
          >
            <Styled(WithTheme(Themed(Dropdown)))
              data={
                Array [
                  Object {
                    "text": "ألفا",
                    "value": "alpha",
                  },
                  Object {
                    "text": "بيتا",
                    "value": "beta",
                  },
                  Object {
                    "text": "غاما",
                    "value": "gamma",
                  },
                ]
              }
              id="select-66"
              isOpen={false}
              itemKey="value"
              menu={[Function]}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placeholder="تحديد..."
              placement="bottom-start"
              size="large"
              variant="success"
            >
              <WithTheme(Themed(Dropdown))
                className="emotion-14"
                data={
                  Array [
                    Object {
                      "text": "ألفا",
                      "value": "alpha",
                    },
                    Object {
                      "text": "بيتا",
                      "value": "beta",
                    },
                    Object {
                      "text": "غاما",
                      "value": "gamma",
                    },
                  ]
                }
                id="select-66"
                isOpen={false}
                itemKey="value"
                menu={[Function]}
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placeholder="تحديد..."
                placement="bottom-start"
                size="large"
                variant="success"
              >
                <Themed(Dropdown)
                  className="emotion-14"
                  data={
                    Array [
                      Object {
                        "text": "ألفا",
                        "value": "alpha",
                      },
                      Object {
                        "text": "بيتا",
                        "value": "beta",
                      },
                      Object {
                        "text": "غاما",
                        "value": "gamma",
                      },
                    ]
                  }
                  id="select-66"
                  isOpen={false}
                  itemKey="value"
                  menu={[Function]}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="تحديد..."
                  placement="bottom-start"
                  size="large"
                  variant="success"
                >
                  <ThemeProvider>
                    <ThemeProvider>
                      <Dropdown
                        className="emotion-14"
                        data={
                          Array [
                            Object {
                              "text": "ألفا",
                              "value": "alpha",
                            },
                            Object {
                              "text": "بيتا",
                              "value": "beta",
                            },
                            Object {
                              "text": "غاما",
                              "value": "gamma",
                            },
                          ]
                        }
                        id="select-66"
                        isOpen={false}
                        itemKey="value"
                        menu={[Function]}
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="تحديد..."
                        placement="bottom-start"
                        size="large"
                        variant="success"
                      >
                        <Popover
                          className="emotion-14"
                          content={[Function]}
                          focusTriggerOnClose={true}
                          hasArrow={true}
                          id="select-66"
                          isOpen={false}
                          itemKey="value"
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                            }
                          }
                          onClose={[Function]}
                          onOpen={[Function]}
                          placeholder="تحديد..."
                          placement="bottom-start"
                          size="large"
                          triggerRef={[Function]}
                          variant="success"
                        >
                          <Manager>
                            <Styled(span)
                              className="emotion-14"
                              content={[Function]}
                              focusTriggerOnClose={true}
                              hasArrow={true}
                              id="select-66"
                              isOpen={false}
                              itemKey="value"
                              onClose={[Function]}
                              onOpen={[Function]}
                              placeholder="تحديد..."
                              placement="bottom-start"
                              size="large"
                              triggerRef={[Function]}
                              variant="success"
                            >
                              <span
                                className="emotion-13"
                                content={[Function]}
                                id="select-66"
                                onClose={[Function]}
                                onOpen={[Function]}
                                placeholder="تحديد..."
                                size="large"
                              >
                                <PopoverTrigger
                                  aria-describedby="select-66-content"
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-owns="select-66-content"
                                  isOpen={false}
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  placeholder="تحديد..."
                                  role="button"
                                  size="large"
                                  tabIndex={0}
                                  triggerRef={[Function]}
                                  variant="success"
                                >
                                  <Reference>
                                    <InnerReference
                                      getReferenceRef={[Function]}
                                    >
                                      <Styled(span)>
                                        <span
                                          className="emotion-12"
                                        >
                                          <SelectTrigger
                                            aria-describedby="select-66-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-66-content"
                                            isOpen={false}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            placeholder="تحديد..."
                                            role="button"
                                            size="large"
                                            tabIndex={0}
                                            triggerRef={[Function]}
                                            variant="success"
                                          >
                                            <Styled(WithTheme(Themed(FauxControl)))
                                              afterItems={
                                                Array [
                                                  <withProps(Styled(IconArrowDropdownDown)) />,
                                                  <input
                                                    onClick={[Function]}
                                                    type="hidden"
                                                    value=""
                                                  />,
                                                ]
                                              }
                                              aria-describedby="select-66-content"
                                              aria-expanded={false}
                                              aria-haspopup="listbox"
                                              aria-owns="select-66-content"
                                              control={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "__emotion_base": "div",
                                                  "__emotion_forwardProp": undefined,
                                                  "__emotion_real": [Circular],
                                                  "__emotion_styles": Array [
                                                    [Function],
                                                  ],
                                                  "defaultProps": undefined,
                                                  "displayName": "Styled(div)",
                                                  "render": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              controlProps={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              fauxControlRef={[Function]}
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              role="button"
                                              size="large"
                                              tabIndex={0}
                                              variant="success"
                                            >
                                              <WithTheme(Themed(FauxControl))
                                                afterItems={
                                                  Array [
                                                    <withProps(Styled(IconArrowDropdownDown)) />,
                                                    <input
                                                      onClick={[Function]}
                                                      type="hidden"
                                                      value=""
                                                    />,
                                                  ]
                                                }
                                                aria-describedby="select-66-content"
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-owns="select-66-content"
                                                className="emotion-28"
                                                control={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "__emotion_base": "div",
                                                    "__emotion_forwardProp": undefined,
                                                    "__emotion_real": [Circular],
                                                    "__emotion_styles": Array [
                                                      [Function],
                                                    ],
                                                    "defaultProps": undefined,
                                                    "displayName": "Styled(div)",
                                                    "render": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                controlProps={
                                                  Object {
                                                    "hasPlaceholder": true,
                                                    "variant": undefined,
                                                  }
                                                }
                                                fauxControlRef={[Function]}
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                size="large"
                                                tabIndex={0}
                                                variant="success"
                                              >
                                                <Themed(FauxControl)
                                                  afterItems={
                                                    Array [
                                                      <withProps(Styled(IconArrowDropdownDown)) />,
                                                      <input
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />,
                                                    ]
                                                  }
                                                  aria-describedby="select-66-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-66-content"
                                                  className="emotion-28"
                                                  control={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "__emotion_base": "div",
                                                      "__emotion_forwardProp": undefined,
                                                      "__emotion_real": [Circular],
                                                      "__emotion_styles": Array [
                                                        [Function],
                                                      ],
                                                      "defaultProps": undefined,
                                                      "displayName": "Styled(div)",
                                                      "render": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  controlProps={
                                                    Object {
                                                      "hasPlaceholder": true,
                                                      "variant": undefined,
                                                    }
                                                  }
                                                  fauxControlRef={[Function]}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  size="large"
                                                  tabIndex={0}
                                                  variant="success"
                                                >
                                                  <ThemeProvider>
                                                    <ThemeProvider>
                                                      <FauxControl
                                                        afterItems={
                                                          Array [
                                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                                            <input
                                                              onClick={[Function]}
                                                              type="hidden"
                                                              value=""
                                                            />,
                                                          ]
                                                        }
                                                        aria-describedby="select-66-content"
                                                        aria-expanded={false}
                                                        aria-haspopup="listbox"
                                                        aria-owns="select-66-content"
                                                        className="emotion-28"
                                                        control={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "__emotion_base": "div",
                                                            "__emotion_forwardProp": undefined,
                                                            "__emotion_real": [Circular],
                                                            "__emotion_styles": Array [
                                                              [Function],
                                                            ],
                                                            "defaultProps": undefined,
                                                            "displayName": "Styled(div)",
                                                            "render": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        controlProps={
                                                          Object {
                                                            "hasPlaceholder": true,
                                                            "variant": undefined,
                                                          }
                                                        }
                                                        fauxControlRef={[Function]}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        role="button"
                                                        size="large"
                                                        tabIndex={0}
                                                        variant="success"
                                                      >
                                                        <Styled(div)
                                                          aria-describedby="select-66-content"
                                                          aria-expanded={false}
                                                          aria-haspopup="listbox"
                                                          aria-owns="select-66-content"
                                                          className="emotion-28"
                                                          control={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "__emotion_base": "div",
                                                              "__emotion_forwardProp": undefined,
                                                              "__emotion_real": [Circular],
                                                              "__emotion_styles": Array [
                                                                [Function],
                                                              ],
                                                              "defaultProps": undefined,
                                                              "displayName": "Styled(div)",
                                                              "render": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          onBlur={[Function]}
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          role="button"
                                                          tabIndex={0}
                                                          variant="success"
                                                        >
                                                          <div
                                                            aria-describedby="select-66-content"
                                                            aria-expanded={false}
                                                            aria-haspopup="listbox"
                                                            aria-owns="select-66-content"
                                                            className="emotion-27"
                                                            onBlur={[Function]}
                                                            onClick={[Function]}
                                                            onKeyDown={[Function]}
                                                            onKeyUp={[Function]}
                                                            role="button"
                                                            tabIndex={0}
                                                          >
                                                            <Styled(div)
                                                              controlPropsIn={
                                                                Object {
                                                                  "hasPlaceholder": true,
                                                                  "variant": undefined,
                                                                }
                                                              }
                                                              hasPlaceholder={true}
                                                              key="control"
                                                              size="large"
                                                              variant="success"
                                                            >
                                                              <div
                                                                className="emotion-20"
                                                                size="large"
                                                              >
                                                                <Styled(span)>
                                                                  <span
                                                                    className="emotion-0"
                                                                  >
                                                                    تحديد...
                                                                  </span>
                                                                </Styled(span)>
                                                              </div>
                                                            </Styled(div)>
                                                            <IconSuccess
                                                              key="iconEnd"
                                                              size="1.5em"
                                                            >
                                                              <Icon
                                                                rtl={false}
                                                                size="1.5em"
                                                              >
                                                                <Styled(svg)
                                                                  aria-hidden={true}
                                                                  focusable="false"
                                                                  role="img"
                                                                  rtl={false}
                                                                  size="1.5em"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <svg
                                                                    aria-hidden={true}
                                                                    className="emotion-21"
                                                                    focusable="false"
                                                                    role="img"
                                                                    size="1.5em"
                                                                    viewBox="0 0 24 24"
                                                                  >
                                                                    <g>
                                                                      <path
                                                                        d="M12 3c4.968 0 9 4.032 9 9s-4.032 9-9 9-9-4.032-9-9 4.032-9 9-9zm-4.247 8.445L6.5 12.698l3.838 3.838 7.198-7.198-1.253-1.254-5.945 5.945-2.585-2.585z"
                                                                      />
                                                                    </g>
                                                                  </svg>
                                                                </Styled(svg)>
                                                              </Icon>
                                                            </IconSuccess>
                                                            <withProps(Styled(IconArrowDropdownDown))
                                                              key="arrow"
                                                            >
                                                              <Styled(IconArrowDropdownDown)
                                                                size="1.5em"
                                                              >
                                                                <IconArrowDropdownDown
                                                                  className="emotion-3"
                                                                  size="1.5em"
                                                                >
                                                                  <Icon
                                                                    className="emotion-3"
                                                                    rtl={false}
                                                                    size="1.5em"
                                                                  >
                                                                    <Styled(svg)
                                                                      aria-hidden={true}
                                                                      className="emotion-3"
                                                                      focusable="false"
                                                                      role="img"
                                                                      rtl={false}
                                                                      size="1.5em"
                                                                      viewBox="0 0 24 24"
                                                                    >
                                                                      <svg
                                                                        aria-hidden={true}
                                                                        className="emotion-2"
                                                                        focusable="false"
                                                                        role="img"
                                                                        size="1.5em"
                                                                        viewBox="0 0 24 24"
                                                                      >
                                                                        <g>
                                                                          <path
                                                                            d="M12 17.5l-8-8h16z"
                                                                          />
                                                                        </g>
                                                                      </svg>
                                                                    </Styled(svg)>
                                                                  </Icon>
                                                                </IconArrowDropdownDown>
                                                              </Styled(IconArrowDropdownDown)>
                                                            </withProps(Styled(IconArrowDropdownDown))>
                                                            <input
                                                              key="input"
                                                              onClick={[Function]}
                                                              type="hidden"
                                                              value=""
                                                            />
                                                            <Styled(div)
                                                              variant="success"
                                                            >
                                                              <div
                                                                className="emotion-26"
                                                              />
                                                            </Styled(div)>
                                                          </div>
                                                        </Styled(div)>
                                                      </FauxControl>
                                                    </ThemeProvider>
                                                  </ThemeProvider>
                                                </Themed(FauxControl)>
                                              </WithTheme(Themed(FauxControl))>
                                            </Styled(WithTheme(Themed(FauxControl)))>
                                          </SelectTrigger>
                                        </span>
                                      </Styled(span)>
                                    </InnerReference>
                                  </Reference>
                                </PopoverTrigger>
                              </span>
                            </Styled(span)>
                          </Manager>
                        </Popover>
                      </Dropdown>
                    </ThemeProvider>
                  </ThemeProvider>
                </Themed(Dropdown)>
              </WithTheme(Themed(Dropdown))>
            </Styled(WithTheme(Themed(Dropdown)))>
          </Select>
        </div>
      </Styled(div)>
    </ThemeProvider>
  </ThemeProvider>
</div>
`;

exports[`Select demo examples Snapshots: scrolling-container 1`] = `
.emotion-28 {
  width: 100%;
}

.emotion-28 > span {
  width: 100%;
}

.emotion-27 {
  display: inline-block;
  width: 100%;
}

.emotion-27 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-7:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-3 {
  margin: 0.5em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-6 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-26 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border: 1px solid #ebeff5;
  border-radius: 0.1875em;
  box-shadow: 0 2px 4px 0 rgba(0,0,0,0.2),0 4px 8px 0 rgba(0,0,0,0.2);
  max-height: 30vh;
  overflow-y: auto;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 14em;
  z-index: 100;
}

.emotion-26 *,
.emotion-26 *::before,
.emotion-26 *::after {
  box-sizing: inherit;
}

.emotion-26[data-placement^="top"] {
  margin-bottom: 5px;
}

.emotion-26[data-placement^="bottom"] {
  margin-top: 5px;
}

.emotion-26[data-placement^="left"] {
  margin-right: 5px;
}

.emotion-26[data-placement^="right"] {
  margin-left: 5px;
}

.emotion-26[data-x-out-of-boundaries] {
  visibility: hidden;
}

.emotion-25 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
}

.emotion-25 *,
.emotion-25 *::before,
.emotion-25 *::after {
  box-sizing: inherit;
}

.emotion-16 {
  color: #333840;
  cursor: pointer;
  display: block;
  font-weight: 400;
  padding: 0.5em 1em;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-16:focus {
  background-color: #f5f7fa;
  outline: 0;
}

.emotion-16:hover {
  background-color: #f5f7fa;
}

.emotion-16:active {
  background-color: #ebeff5;
}

.emotion-16[aria-selected="true"] {
  background-color: #f0f5fc;
  font-weight: 700;
}

.emotion-16[aria-selected="true"]:active {
  background-color: #accbfc;
}

.emotion-16 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-16 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-16 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-15 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
}

.emotion-14 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  justify-content: space-between;
  padding: 0.1875em 0 0.25em;
  white-space: normal;
  word-break: break-all;
}

.emotion-13 {
  font-size: 0.875em;
  margin-right: 0.5714285714285714em;
  word-break: break-word;
}

.emotion-41 {
  position: relative;
}

.emotion-34 {
  background-color: aliceblue;
  height: 360px;
  overflow: auto;
  position: relative;
}

.emotion-33 {
  height: 860px;
  width: 300vw;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
}

.emotion-38 {
  left: 0;
  position: absolute;
  top: 0;
}

.emotion-37 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: transparent;
  border-color: transparent;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 1.5em;
  margin: 0;
  min-width: 1.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
  left: 0;
  position: absolute;
  top: 0;
}

.emotion-37 *,
.emotion-37 *::before,
.emotion-37 *::after {
  box-sizing: inherit;
}

.emotion-37:focus {
  border-color: #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-37:hover {
  background-color: #f5f7fa;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-37:focus:active,
.emotion-37:focus:hover {
  border-color: #1d5bbf;
}

.emotion-37:active {
  background-color: #ebeff5;
  color: #3272d9;
}

.emotion-37::-moz-focus-inner {
  border: 0;
}

.emotion-37 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-37 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-37 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-37 [role="img"]:only-child {
  margin: 0;
}

.emotion-36 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  max-height: 100%;
  pointer-events: none;
  width: 100%;
}

.emotion-35 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.75em;
  line-height: 2em;
}

<ScrollBox
  autoCenter={true}
  height={360}
>
  <Styled(div)>
    <div
      className="emotion-41"
    >
      <Styled(div)
        height={360}
      >
        <div
          className="emotion-34"
          height={360}
        >
          <Styled(div)
            scrollAreaHeight={360}
          >
            <div
              className="emotion-33"
            >
              <Select
                data={
                  Array [
                    Object {
                      "text": "Alpha",
                      "value": "alpha",
                    },
                    Object {
                      "text": "Beta",
                      "value": "beta",
                    },
                    Object {
                      "text": "Gamma",
                      "value": "gamma",
                    },
                  ]
                }
                isOpen={true}
              >
                <div
                  style={
                    Object {
                      "width": "14em",
                    }
                  }
                >
                  <Select
                    data={
                      Array [
                        Object {
                          "text": "Alpha",
                          "value": "alpha",
                        },
                        Object {
                          "text": "Beta",
                          "value": "beta",
                        },
                        Object {
                          "text": "Gamma",
                          "value": "gamma",
                        },
                      ]
                    }
                    isOpen={true}
                    itemKey="value"
                    placeholder="Select..."
                    placement="bottom-start"
                    size="large"
                  >
                    <Styled(WithTheme(Themed(Dropdown)))
                      data={
                        Array [
                          Object {
                            "text": "Alpha",
                            "value": "alpha",
                          },
                          Object {
                            "text": "Beta",
                            "value": "beta",
                          },
                          Object {
                            "text": "Gamma",
                            "value": "gamma",
                          },
                        ]
                      }
                      id="select-55"
                      isOpen={true}
                      itemKey="value"
                      menu={[Function]}
                      modifiers={
                        Object {
                          "contentWidth": Object {
                            "enabled": true,
                            "fn": [Function],
                          },
                        }
                      }
                      onClose={[Function]}
                      onOpen={[Function]}
                      placeholder="Select..."
                      placement="bottom-start"
                      size="large"
                    >
                      <WithTheme(Themed(Dropdown))
                        className="emotion-28"
                        data={
                          Array [
                            Object {
                              "text": "Alpha",
                              "value": "alpha",
                            },
                            Object {
                              "text": "Beta",
                              "value": "beta",
                            },
                            Object {
                              "text": "Gamma",
                              "value": "gamma",
                            },
                          ]
                        }
                        id="select-55"
                        isOpen={true}
                        itemKey="value"
                        menu={[Function]}
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Select..."
                        placement="bottom-start"
                        size="large"
                      >
                        <Themed(Dropdown)
                          className="emotion-28"
                          data={
                            Array [
                              Object {
                                "text": "Alpha",
                                "value": "alpha",
                              },
                              Object {
                                "text": "Beta",
                                "value": "beta",
                              },
                              Object {
                                "text": "Gamma",
                                "value": "gamma",
                              },
                            ]
                          }
                          id="select-55"
                          isOpen={true}
                          itemKey="value"
                          menu={[Function]}
                          modifiers={
                            Object {
                              "contentWidth": Object {
                                "enabled": true,
                                "fn": [Function],
                              },
                            }
                          }
                          onClose={[Function]}
                          onOpen={[Function]}
                          placeholder="Select..."
                          placement="bottom-start"
                          size="large"
                        >
                          <ThemeProvider>
                            <ThemeProvider>
                              <Dropdown
                                className="emotion-28"
                                data={
                                  Array [
                                    Object {
                                      "text": "Alpha",
                                      "value": "alpha",
                                    },
                                    Object {
                                      "text": "Beta",
                                      "value": "beta",
                                    },
                                    Object {
                                      "text": "Gamma",
                                      "value": "gamma",
                                    },
                                  ]
                                }
                                id="select-55"
                                isOpen={true}
                                itemKey="value"
                                menu={[Function]}
                                modifiers={
                                  Object {
                                    "contentWidth": Object {
                                      "enabled": true,
                                      "fn": [Function],
                                    },
                                  }
                                }
                                onClose={[Function]}
                                onOpen={[Function]}
                                placeholder="Select..."
                                placement="bottom-start"
                                size="large"
                              >
                                <Popover
                                  className="emotion-28"
                                  content={[Function]}
                                  focusTriggerOnClose={true}
                                  hasArrow={true}
                                  id="select-55"
                                  isOpen={true}
                                  itemKey="value"
                                  modifiers={
                                    Object {
                                      "contentWidth": Object {
                                        "enabled": true,
                                        "fn": [Function],
                                      },
                                    }
                                  }
                                  onClose={[Function]}
                                  onOpen={[Function]}
                                  placeholder="Select..."
                                  placement="bottom-start"
                                  size="large"
                                  triggerRef={[Function]}
                                >
                                  <Manager>
                                    <Styled(span)
                                      className="emotion-28"
                                      content={[Function]}
                                      focusTriggerOnClose={true}
                                      hasArrow={true}
                                      id="select-55"
                                      isOpen={true}
                                      itemKey="value"
                                      onClose={[Function]}
                                      onOpen={[Function]}
                                      placeholder="Select..."
                                      placement="bottom-start"
                                      size="large"
                                      triggerRef={[Function]}
                                    >
                                      <span
                                        className="emotion-27"
                                        content={[Function]}
                                        id="select-55"
                                        onClose={[Function]}
                                        onOpen={[Function]}
                                        placeholder="Select..."
                                        size="large"
                                      >
                                        <PopoverTrigger
                                          aria-activedescendant="select-55-menu"
                                          aria-describedby="select-55-content"
                                          aria-expanded={true}
                                          aria-haspopup="listbox"
                                          aria-owns="select-55-content"
                                          isOpen={true}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          placeholder="Select..."
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                          triggerRef={[Function]}
                                        >
                                          <Reference>
                                            <InnerReference
                                              getReferenceRef={[Function]}
                                            >
                                              <Styled(span)>
                                                <span
                                                  className="emotion-12"
                                                >
                                                  <SelectTrigger
                                                    aria-activedescendant="select-55-menu"
                                                    aria-describedby="select-55-content"
                                                    aria-expanded={true}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-55-content"
                                                    isOpen={true}
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    placeholder="Select..."
                                                    role="button"
                                                    size="large"
                                                    tabIndex={0}
                                                    triggerRef={[Function]}
                                                  >
                                                    <Styled(WithTheme(Themed(FauxControl)))
                                                      afterItems={
                                                        Array [
                                                          <withProps(Styled(IconArrowDropdownUp)) />,
                                                          <input
                                                            onClick={[Function]}
                                                            type="hidden"
                                                            value=""
                                                          />,
                                                        ]
                                                      }
                                                      aria-activedescendant="select-55-menu"
                                                      aria-describedby="select-55-content"
                                                      aria-expanded={true}
                                                      aria-haspopup="listbox"
                                                      aria-owns="select-55-content"
                                                      control={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "__emotion_base": "div",
                                                          "__emotion_forwardProp": undefined,
                                                          "__emotion_real": [Circular],
                                                          "__emotion_styles": Array [
                                                            [Function],
                                                          ],
                                                          "defaultProps": undefined,
                                                          "displayName": "Styled(div)",
                                                          "render": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      controlProps={
                                                        Object {
                                                          "hasPlaceholder": true,
                                                          "variant": undefined,
                                                        }
                                                      }
                                                      fauxControlRef={[Function]}
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      role="button"
                                                      size="large"
                                                      tabIndex={0}
                                                    >
                                                      <WithTheme(Themed(FauxControl))
                                                        afterItems={
                                                          Array [
                                                            <withProps(Styled(IconArrowDropdownUp)) />,
                                                            <input
                                                              onClick={[Function]}
                                                              type="hidden"
                                                              value=""
                                                            />,
                                                          ]
                                                        }
                                                        aria-activedescendant="select-55-menu"
                                                        aria-describedby="select-55-content"
                                                        aria-expanded={true}
                                                        aria-haspopup="listbox"
                                                        aria-owns="select-55-content"
                                                        className="emotion-8"
                                                        control={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "__emotion_base": "div",
                                                            "__emotion_forwardProp": undefined,
                                                            "__emotion_real": [Circular],
                                                            "__emotion_styles": Array [
                                                              [Function],
                                                            ],
                                                            "defaultProps": undefined,
                                                            "displayName": "Styled(div)",
                                                            "render": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        controlProps={
                                                          Object {
                                                            "hasPlaceholder": true,
                                                            "variant": undefined,
                                                          }
                                                        }
                                                        fauxControlRef={[Function]}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        role="button"
                                                        size="large"
                                                        tabIndex={0}
                                                      >
                                                        <Themed(FauxControl)
                                                          afterItems={
                                                            Array [
                                                              <withProps(Styled(IconArrowDropdownUp)) />,
                                                              <input
                                                                onClick={[Function]}
                                                                type="hidden"
                                                                value=""
                                                              />,
                                                            ]
                                                          }
                                                          aria-activedescendant="select-55-menu"
                                                          aria-describedby="select-55-content"
                                                          aria-expanded={true}
                                                          aria-haspopup="listbox"
                                                          aria-owns="select-55-content"
                                                          className="emotion-8"
                                                          control={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "__emotion_base": "div",
                                                              "__emotion_forwardProp": undefined,
                                                              "__emotion_real": [Circular],
                                                              "__emotion_styles": Array [
                                                                [Function],
                                                              ],
                                                              "defaultProps": undefined,
                                                              "displayName": "Styled(div)",
                                                              "render": [Function],
                                                              "withComponent": [Function],
                                                            }
                                                          }
                                                          controlProps={
                                                            Object {
                                                              "hasPlaceholder": true,
                                                              "variant": undefined,
                                                            }
                                                          }
                                                          fauxControlRef={[Function]}
                                                          onBlur={[Function]}
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          role="button"
                                                          size="large"
                                                          tabIndex={0}
                                                        >
                                                          <ThemeProvider>
                                                            <ThemeProvider>
                                                              <FauxControl
                                                                afterItems={
                                                                  Array [
                                                                    <withProps(Styled(IconArrowDropdownUp)) />,
                                                                    <input
                                                                      onClick={[Function]}
                                                                      type="hidden"
                                                                      value=""
                                                                    />,
                                                                  ]
                                                                }
                                                                aria-activedescendant="select-55-menu"
                                                                aria-describedby="select-55-content"
                                                                aria-expanded={true}
                                                                aria-haspopup="listbox"
                                                                aria-owns="select-55-content"
                                                                className="emotion-8"
                                                                control={
                                                                  Object {
                                                                    "$$typeof": Symbol(react.forward_ref),
                                                                    "__emotion_base": "div",
                                                                    "__emotion_forwardProp": undefined,
                                                                    "__emotion_real": [Circular],
                                                                    "__emotion_styles": Array [
                                                                      [Function],
                                                                    ],
                                                                    "defaultProps": undefined,
                                                                    "displayName": "Styled(div)",
                                                                    "render": [Function],
                                                                    "withComponent": [Function],
                                                                  }
                                                                }
                                                                controlProps={
                                                                  Object {
                                                                    "hasPlaceholder": true,
                                                                    "variant": undefined,
                                                                  }
                                                                }
                                                                fauxControlRef={[Function]}
                                                                onBlur={[Function]}
                                                                onClick={[Function]}
                                                                onKeyDown={[Function]}
                                                                onKeyUp={[Function]}
                                                                role="button"
                                                                size="large"
                                                                tabIndex={0}
                                                              >
                                                                <Styled(div)
                                                                  aria-activedescendant="select-55-menu"
                                                                  aria-describedby="select-55-content"
                                                                  aria-expanded={true}
                                                                  aria-haspopup="listbox"
                                                                  aria-owns="select-55-content"
                                                                  className="emotion-8"
                                                                  control={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "__emotion_base": "div",
                                                                      "__emotion_forwardProp": undefined,
                                                                      "__emotion_real": [Circular],
                                                                      "__emotion_styles": Array [
                                                                        [Function],
                                                                      ],
                                                                      "defaultProps": undefined,
                                                                      "displayName": "Styled(div)",
                                                                      "render": [Function],
                                                                      "withComponent": [Function],
                                                                    }
                                                                  }
                                                                  onBlur={[Function]}
                                                                  onClick={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onKeyUp={[Function]}
                                                                  role="button"
                                                                  tabIndex={0}
                                                                >
                                                                  <div
                                                                    aria-activedescendant="select-55-menu"
                                                                    aria-describedby="select-55-content"
                                                                    aria-expanded={true}
                                                                    aria-haspopup="listbox"
                                                                    aria-owns="select-55-content"
                                                                    className="emotion-7"
                                                                    onBlur={[Function]}
                                                                    onClick={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    onKeyUp={[Function]}
                                                                    role="button"
                                                                    tabIndex={0}
                                                                  >
                                                                    <Styled(div)
                                                                      controlPropsIn={
                                                                        Object {
                                                                          "hasPlaceholder": true,
                                                                          "variant": undefined,
                                                                        }
                                                                      }
                                                                      hasPlaceholder={true}
                                                                      key="control"
                                                                      size="large"
                                                                    >
                                                                      <div
                                                                        className="emotion-1"
                                                                        size="large"
                                                                      >
                                                                        <Styled(span)>
                                                                          <span
                                                                            className="emotion-0"
                                                                          >
                                                                            Select...
                                                                          </span>
                                                                        </Styled(span)>
                                                                      </div>
                                                                    </Styled(div)>
                                                                    <withProps(Styled(IconArrowDropdownUp))
                                                                      key="arrow"
                                                                    >
                                                                      <Styled(IconArrowDropdownUp)
                                                                        size="1.5em"
                                                                      >
                                                                        <IconArrowDropdownUp
                                                                          className="emotion-3"
                                                                          size="1.5em"
                                                                        >
                                                                          <Icon
                                                                            className="emotion-3"
                                                                            rtl={false}
                                                                            size="1.5em"
                                                                          >
                                                                            <Styled(svg)
                                                                              aria-hidden={true}
                                                                              className="emotion-3"
                                                                              focusable="false"
                                                                              role="img"
                                                                              rtl={false}
                                                                              size="1.5em"
                                                                              viewBox="0 0 24 24"
                                                                            >
                                                                              <svg
                                                                                aria-hidden={true}
                                                                                className="emotion-2"
                                                                                focusable="false"
                                                                                role="img"
                                                                                size="1.5em"
                                                                                viewBox="0 0 24 24"
                                                                              >
                                                                                <g>
                                                                                  <path
                                                                                    d="M12 7.5l8 8H4z"
                                                                                  />
                                                                                </g>
                                                                              </svg>
                                                                            </Styled(svg)>
                                                                          </Icon>
                                                                        </IconArrowDropdownUp>
                                                                      </Styled(IconArrowDropdownUp)>
                                                                    </withProps(Styled(IconArrowDropdownUp))>
                                                                    <input
                                                                      key="input"
                                                                      onClick={[Function]}
                                                                      type="hidden"
                                                                      value=""
                                                                    />
                                                                    <Styled(div)>
                                                                      <div
                                                                        className="emotion-6"
                                                                      />
                                                                    </Styled(div)>
                                                                  </div>
                                                                </Styled(div)>
                                                              </FauxControl>
                                                            </ThemeProvider>
                                                          </ThemeProvider>
                                                        </Themed(FauxControl)>
                                                      </WithTheme(Themed(FauxControl))>
                                                    </Styled(WithTheme(Themed(FauxControl)))>
                                                  </SelectTrigger>
                                                </span>
                                              </Styled(span)>
                                            </InnerReference>
                                          </Reference>
                                        </PopoverTrigger>
                                        <DropdownContent
                                          hasArrow={true}
                                          id="select-55-content"
                                          modifiers={
                                            Object {
                                              "contentWidth": Object {
                                                "enabled": true,
                                                "fn": [Function],
                                              },
                                            }
                                          }
                                          onBlur={[Function]}
                                          placement="bottom-start"
                                        >
                                          <WithTheme(RtlPopper)
                                            modifiers={
                                              Object {
                                                "contentWidth": Object {
                                                  "enabled": true,
                                                  "fn": [Function],
                                                },
                                              }
                                            }
                                            placement="bottom-start"
                                          >
                                            <RtlPopper
                                              modifiers={
                                                Object {
                                                  "contentWidth": Object {
                                                    "enabled": true,
                                                    "fn": [Function],
                                                  },
                                                }
                                              }
                                              placement="bottom-start"
                                            >
                                              <Popper
                                                modifiers={
                                                  Object {
                                                    "contentWidth": Object {
                                                      "enabled": true,
                                                      "fn": [Function],
                                                    },
                                                  }
                                                }
                                                placement="bottom-start"
                                              >
                                                <InnerPopper
                                                  eventsEnabled={true}
                                                  modifiers={
                                                    Object {
                                                      "contentWidth": Object {
                                                        "enabled": true,
                                                        "fn": [Function],
                                                      },
                                                    }
                                                  }
                                                  placement="bottom-start"
                                                  positionFixed={false}
                                                  referenceElement={
                                                    .emotion-5 {
  display: inline-block;
}

.emotion-4 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-4 *,
.emotion-4 *::before,
.emotion-4 *::after {
  box-sizing: inherit;
}

.emotion-4:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-4:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-4:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-4 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-4 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-4 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-4 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-3 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

<span
                                                      class="emotion-5"
                                                    >
                                                      <div
                                                        aria-activedescendant="select-55-menu"
                                                        aria-describedby="select-55-content"
                                                        aria-expanded="true"
                                                        aria-haspopup="listbox"
                                                        aria-owns="select-55-content"
                                                        class="emotion-4"
                                                        role="button"
                                                        tabindex="0"
                                                      >
                                                        <div
                                                          class="emotion-1"
                                                        >
                                                          <span
                                                            class="emotion-0"
                                                          >
                                                            Select...
                                                          </span>
                                                        </div>
                                                        <svg
                                                          aria-hidden="true"
                                                          class="emotion-2"
                                                          focusable="false"
                                                          role="img"
                                                          viewBox="0 0 24 24"
                                                        >
                                                          <g>
                                                            <path
                                                              d="M12 7.5l8 8H4z"
                                                            />
                                                          </g>
                                                        </svg>
                                                        <input
                                                          type="hidden"
                                                          value=""
                                                        />
                                                        <div
                                                          class="emotion-3"
                                                        />
                                                      </div>
                                                    </span>
                                                  }
                                                >
                                                  <Styled(div)
                                                    hasArrow={true}
                                                    id="select-55-content"
                                                    onBlur={[Function]}
                                                    style={
                                                      Object {
                                                        "left": 0,
                                                        "opacity": 0,
                                                        "pointerEvents": "none",
                                                        "position": "absolute",
                                                        "top": 0,
                                                      }
                                                    }
                                                  >
                                                    <div
                                                      className="emotion-26"
                                                      id="select-55-content"
                                                      onBlur={[Function]}
                                                      style={
                                                        Object {
                                                          "left": 0,
                                                          "opacity": 0,
                                                          "pointerEvents": "none",
                                                          "position": "absolute",
                                                          "top": 0,
                                                        }
                                                      }
                                                    >
                                                      <Menu
                                                        data={
                                                          Array [
                                                            Object {
                                                              "text": "Alpha",
                                                              "value": "alpha",
                                                            },
                                                            Object {
                                                              "text": "Beta",
                                                              "value": "beta",
                                                            },
                                                            Object {
                                                              "text": "Gamma",
                                                              "value": "gamma",
                                                            },
                                                          ]
                                                        }
                                                        id="select-55-menu"
                                                        item={[Function]}
                                                        itemKey="value"
                                                        role="listbox"
                                                      >
                                                        <Styled(div)
                                                          id="select-55-menu"
                                                          item={[Function]}
                                                          itemKey="value"
                                                          role="listbox"
                                                        >
                                                          <div
                                                            className="emotion-25"
                                                            id="select-55-menu"
                                                            role="listbox"
                                                          >
                                                            <MenuItem
                                                              element="div"
                                                              index={0}
                                                              isHighlighted={false}
                                                              item={
                                                                Object {
                                                                  "text": "Alpha",
                                                                  "value": "alpha",
                                                                }
                                                              }
                                                              key="alpha"
                                                              render={[Function]}
                                                              text="Alpha"
                                                              value="alpha"
                                                            >
                                                              <MenuItem
                                                                aria-selected={false}
                                                                element="div"
                                                                id="select-55-item-0"
                                                                index={0}
                                                                isHighlighted={false}
                                                                item={
                                                                  Object {
                                                                    "text": "Alpha",
                                                                    "value": "alpha",
                                                                  }
                                                                }
                                                                onClick={[Function]}
                                                                onKeyDown={[Function]}
                                                                role="option"
                                                                tabIndex={null}
                                                                text="Alpha"
                                                                value="alpha"
                                                              >
                                                                <Styled(div)
                                                                  aria-selected={false}
                                                                  element="div"
                                                                  id="select-55-item-0"
                                                                  index={0}
                                                                  isHighlighted={false}
                                                                  item={
                                                                    Object {
                                                                      "text": "Alpha",
                                                                      "value": "alpha",
                                                                    }
                                                                  }
                                                                  onClick={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  role="option"
                                                                  tabIndex={null}
                                                                  text="Alpha"
                                                                  value="alpha"
                                                                >
                                                                  <div
                                                                    aria-selected={false}
                                                                    className="emotion-16"
                                                                    id="select-55-item-0"
                                                                    onClick={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    role="option"
                                                                    tabIndex={null}
                                                                    value="alpha"
                                                                  >
                                                                    <Styled(span)>
                                                                      <span
                                                                        className="emotion-15"
                                                                      >
                                                                        <Styled(span)>
                                                                          <span
                                                                            className="emotion-14"
                                                                          >
                                                                            <Styled(span)>
                                                                              <span
                                                                                className="emotion-13"
                                                                              >
                                                                                Alpha
                                                                              </span>
                                                                            </Styled(span)>
                                                                          </span>
                                                                        </Styled(span)>
                                                                      </span>
                                                                    </Styled(span)>
                                                                  </div>
                                                                </Styled(div)>
                                                              </MenuItem>
                                                            </MenuItem>
                                                            <MenuItem
                                                              element="div"
                                                              index={1}
                                                              isHighlighted={false}
                                                              item={
                                                                Object {
                                                                  "text": "Beta",
                                                                  "value": "beta",
                                                                }
                                                              }
                                                              key="beta"
                                                              render={[Function]}
                                                              text="Beta"
                                                              value="beta"
                                                            >
                                                              <MenuItem
                                                                aria-selected={false}
                                                                element="div"
                                                                id="select-55-item-1"
                                                                index={1}
                                                                isHighlighted={false}
                                                                item={
                                                                  Object {
                                                                    "text": "Beta",
                                                                    "value": "beta",
                                                                  }
                                                                }
                                                                onClick={[Function]}
                                                                onKeyDown={[Function]}
                                                                role="option"
                                                                tabIndex={null}
                                                                text="Beta"
                                                                value="beta"
                                                              >
                                                                <Styled(div)
                                                                  aria-selected={false}
                                                                  element="div"
                                                                  id="select-55-item-1"
                                                                  index={1}
                                                                  isHighlighted={false}
                                                                  item={
                                                                    Object {
                                                                      "text": "Beta",
                                                                      "value": "beta",
                                                                    }
                                                                  }
                                                                  onClick={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  role="option"
                                                                  tabIndex={null}
                                                                  text="Beta"
                                                                  value="beta"
                                                                >
                                                                  <div
                                                                    aria-selected={false}
                                                                    className="emotion-16"
                                                                    id="select-55-item-1"
                                                                    onClick={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    role="option"
                                                                    tabIndex={null}
                                                                    value="beta"
                                                                  >
                                                                    <Styled(span)>
                                                                      <span
                                                                        className="emotion-15"
                                                                      >
                                                                        <Styled(span)>
                                                                          <span
                                                                            className="emotion-14"
                                                                          >
                                                                            <Styled(span)>
                                                                              <span
                                                                                className="emotion-13"
                                                                              >
                                                                                Beta
                                                                              </span>
                                                                            </Styled(span)>
                                                                          </span>
                                                                        </Styled(span)>
                                                                      </span>
                                                                    </Styled(span)>
                                                                  </div>
                                                                </Styled(div)>
                                                              </MenuItem>
                                                            </MenuItem>
                                                            <MenuItem
                                                              element="div"
                                                              index={2}
                                                              isHighlighted={false}
                                                              item={
                                                                Object {
                                                                  "text": "Gamma",
                                                                  "value": "gamma",
                                                                }
                                                              }
                                                              key="gamma"
                                                              render={[Function]}
                                                              text="Gamma"
                                                              value="gamma"
                                                            >
                                                              <MenuItem
                                                                aria-selected={false}
                                                                element="div"
                                                                id="select-55-item-2"
                                                                index={2}
                                                                isHighlighted={false}
                                                                item={
                                                                  Object {
                                                                    "text": "Gamma",
                                                                    "value": "gamma",
                                                                  }
                                                                }
                                                                onClick={[Function]}
                                                                onKeyDown={[Function]}
                                                                role="option"
                                                                tabIndex={null}
                                                                text="Gamma"
                                                                value="gamma"
                                                              >
                                                                <Styled(div)
                                                                  aria-selected={false}
                                                                  element="div"
                                                                  id="select-55-item-2"
                                                                  index={2}
                                                                  isHighlighted={false}
                                                                  item={
                                                                    Object {
                                                                      "text": "Gamma",
                                                                      "value": "gamma",
                                                                    }
                                                                  }
                                                                  onClick={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  role="option"
                                                                  tabIndex={null}
                                                                  text="Gamma"
                                                                  value="gamma"
                                                                >
                                                                  <div
                                                                    aria-selected={false}
                                                                    className="emotion-16"
                                                                    id="select-55-item-2"
                                                                    onClick={[Function]}
                                                                    onKeyDown={[Function]}
                                                                    role="option"
                                                                    tabIndex={null}
                                                                    value="gamma"
                                                                  >
                                                                    <Styled(span)>
                                                                      <span
                                                                        className="emotion-15"
                                                                      >
                                                                        <Styled(span)>
                                                                          <span
                                                                            className="emotion-14"
                                                                          >
                                                                            <Styled(span)>
                                                                              <span
                                                                                className="emotion-13"
                                                                              >
                                                                                Gamma
                                                                              </span>
                                                                            </Styled(span)>
                                                                          </span>
                                                                        </Styled(span)>
                                                                      </span>
                                                                    </Styled(span)>
                                                                  </div>
                                                                </Styled(div)>
                                                              </MenuItem>
                                                            </MenuItem>
                                                          </div>
                                                        </Styled(div)>
                                                      </Menu>
                                                    </div>
                                                  </Styled(div)>
                                                </InnerPopper>
                                              </Popper>
                                            </RtlPopper>
                                          </WithTheme(RtlPopper)>
                                        </DropdownContent>
                                        <EventListener
                                          listeners={
                                            Array [
                                              Object {
                                                "event": "click",
                                                "handler": [Function],
                                                "options": true,
                                                "target": "document",
                                              },
                                              Object {
                                                "event": "keydown",
                                                "handler": [Function],
                                                "options": true,
                                                "target": "document",
                                              },
                                            ]
                                          }
                                        />
                                      </span>
                                    </Styled(span)>
                                  </Manager>
                                </Popover>
                              </Dropdown>
                            </ThemeProvider>
                          </ThemeProvider>
                        </Themed(Dropdown)>
                      </WithTheme(Themed(Dropdown))>
                    </Styled(WithTheme(Themed(Dropdown)))>
                  </Select>
                </div>
              </Select>
            </div>
          </Styled(div)>
        </div>
      </Styled(div)>
      <Styled(WithForwardRef(Button))
        minimal={true}
        onClick={[Function]}
        size="small"
      >
        <WithForwardRef(Button)
          className="emotion-38"
          minimal={true}
          onClick={[Function]}
          size="small"
        >
          <Button
            className="emotion-38"
            forwardedRef={null}
            minimal={true}
            onClick={[Function]}
            size="small"
          >
            <Styled(button)
              className="emotion-38"
              minimal={true}
              onClick={[Function]}
              size="small"
              text="Re-center"
            >
              <button
                className="emotion-37"
                onClick={[Function]}
                size="small"
              >
                <Styled(span)>
                  <span
                    className="emotion-36"
                  >
                    <Styled(span)
                      size="small"
                    >
                      <span
                        className="emotion-35"
                        size="small"
                      >
                        Re-center
                      </span>
                    </Styled(span)>
                  </span>
                </Styled(span)>
              </button>
            </Styled(button)>
          </Button>
        </WithForwardRef(Button)>
      </Styled(WithForwardRef(Button))>
    </div>
  </Styled(div)>
</ScrollBox>
`;

exports[`Select demo examples Snapshots: size 1`] = `
.emotion-14 {
  width: 100%;
}

.emotion-14 > span {
  width: 100%;
}

.emotion-13 {
  display: inline-block;
  width: 100%;
}

.emotion-13 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-7:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-22 {
  margin: 0.5em;
}

.emotion-40 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-6 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-39 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-39::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-39::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-39:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-39::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-39::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-39:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-39::-ms-clear {
  display: none;
}

.emotion-39:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-76[class] > *:not(:last-child) {
  margin-bottom: 1rem;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.75em;
  font-style: italic;
  outline: 0;
  padding-left: 0.6666666666666666em;
  padding-right: 0.6666666666666666em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-3 {
  margin: 0.25em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1em;
  width: 1em;
  margin: 0.25em;
}

.emotion-20 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.2857142857142856em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 0.5714285714285714em;
  padding-right: 0.5714285714285714em;
}

.emotion-20::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-20::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-20:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-20::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-20::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-20:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-20::-ms-clear {
  display: none;
}

.emotion-20:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-21 {
  fill: currentcolor;
  font-size: 16px;
  height: 1em;
  width: 1em;
  margin: 0.5em;
}

.emotion-58 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 3.7142857142857144em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-58::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-58::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-58:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-58::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-58::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-58:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-58::-ms-clear {
  display: none;
}

.emotion-58:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-60 {
  margin: 0.875em;
}

.emotion-59 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.875em;
}

<Styled(div)>
  <div
    className="emotion-76"
  >
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      itemKey="value"
      placeholder="Small"
      placement="bottom-start"
      size="small"
    >
      <Styled(WithTheme(Themed(Dropdown)))
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        id="select-25"
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Small"
        placement="bottom-start"
        size="small"
      >
        <WithTheme(Themed(Dropdown))
          className="emotion-14"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          id="select-25"
          isOpen={false}
          itemKey="value"
          menu={[Function]}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placeholder="Small"
          placement="bottom-start"
          size="small"
        >
          <Themed(Dropdown)
            className="emotion-14"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            id="select-25"
            isOpen={false}
            itemKey="value"
            menu={[Function]}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placeholder="Small"
            placement="bottom-start"
            size="small"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="emotion-14"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  id="select-25"
                  isOpen={false}
                  itemKey="value"
                  menu={[Function]}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="Small"
                  placement="bottom-start"
                  size="small"
                >
                  <Popover
                    className="emotion-14"
                    content={[Function]}
                    focusTriggerOnClose={true}
                    hasArrow={true}
                    id="select-25"
                    isOpen={false}
                    itemKey="value"
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Small"
                    placement="bottom-start"
                    size="small"
                    triggerRef={[Function]}
                  >
                    <Manager>
                      <Styled(span)
                        className="emotion-14"
                        content={[Function]}
                        focusTriggerOnClose={true}
                        hasArrow={true}
                        id="select-25"
                        isOpen={false}
                        itemKey="value"
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Small"
                        placement="bottom-start"
                        size="small"
                        triggerRef={[Function]}
                      >
                        <span
                          className="emotion-13"
                          content={[Function]}
                          id="select-25"
                          onClose={[Function]}
                          onOpen={[Function]}
                          placeholder="Small"
                          size="small"
                        >
                          <PopoverTrigger
                            aria-describedby="select-25-content"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-owns="select-25-content"
                            isOpen={false}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            placeholder="Small"
                            role="button"
                            size="small"
                            tabIndex={0}
                            triggerRef={[Function]}
                          >
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <Styled(span)>
                                  <span
                                    className="emotion-12"
                                  >
                                    <SelectTrigger
                                      aria-describedby="select-25-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-25-content"
                                      isOpen={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      placeholder="Small"
                                      role="button"
                                      size="small"
                                      tabIndex={0}
                                      triggerRef={[Function]}
                                    >
                                      <Styled(WithTheme(Themed(FauxControl)))
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-25-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-25-content"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="small"
                                        tabIndex={0}
                                      >
                                        <WithTheme(Themed(FauxControl))
                                          afterItems={
                                            Array [
                                              <withProps(Styled(IconArrowDropdownDown)) />,
                                              <input
                                                onClick={[Function]}
                                                type="hidden"
                                                value=""
                                              />,
                                            ]
                                          }
                                          aria-describedby="select-25-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-25-content"
                                          className="emotion-8"
                                          control={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "__emotion_base": "div",
                                              "__emotion_forwardProp": undefined,
                                              "__emotion_real": [Circular],
                                              "__emotion_styles": Array [
                                                [Function],
                                              ],
                                              "defaultProps": undefined,
                                              "displayName": "Styled(div)",
                                              "render": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          controlProps={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          fauxControlRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          size="small"
                                          tabIndex={0}
                                        >
                                          <Themed(FauxControl)
                                            afterItems={
                                              Array [
                                                <withProps(Styled(IconArrowDropdownDown)) />,
                                                <input
                                                  onClick={[Function]}
                                                  type="hidden"
                                                  value=""
                                                />,
                                              ]
                                            }
                                            aria-describedby="select-25-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-25-content"
                                            className="emotion-8"
                                            control={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "__emotion_base": "div",
                                                "__emotion_forwardProp": undefined,
                                                "__emotion_real": [Circular],
                                                "__emotion_styles": Array [
                                                  [Function],
                                                ],
                                                "defaultProps": undefined,
                                                "displayName": "Styled(div)",
                                                "render": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            controlProps={
                                              Object {
                                                "hasPlaceholder": true,
                                                "variant": undefined,
                                              }
                                            }
                                            fauxControlRef={[Function]}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            size="small"
                                            tabIndex={0}
                                          >
                                            <ThemeProvider>
                                              <ThemeProvider>
                                                <FauxControl
                                                  afterItems={
                                                    Array [
                                                      <withProps(Styled(IconArrowDropdownDown)) />,
                                                      <input
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />,
                                                    ]
                                                  }
                                                  aria-describedby="select-25-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-25-content"
                                                  className="emotion-8"
                                                  control={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "__emotion_base": "div",
                                                      "__emotion_forwardProp": undefined,
                                                      "__emotion_real": [Circular],
                                                      "__emotion_styles": Array [
                                                        [Function],
                                                      ],
                                                      "defaultProps": undefined,
                                                      "displayName": "Styled(div)",
                                                      "render": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  controlProps={
                                                    Object {
                                                      "hasPlaceholder": true,
                                                      "variant": undefined,
                                                    }
                                                  }
                                                  fauxControlRef={[Function]}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  size="small"
                                                  tabIndex={0}
                                                >
                                                  <Styled(div)
                                                    aria-describedby="select-25-content"
                                                    aria-expanded={false}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-25-content"
                                                    className="emotion-8"
                                                    control={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "__emotion_base": "div",
                                                        "__emotion_forwardProp": undefined,
                                                        "__emotion_real": [Circular],
                                                        "__emotion_styles": Array [
                                                          [Function],
                                                        ],
                                                        "defaultProps": undefined,
                                                        "displayName": "Styled(div)",
                                                        "render": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    <div
                                                      aria-describedby="select-25-content"
                                                      aria-expanded={false}
                                                      aria-haspopup="listbox"
                                                      aria-owns="select-25-content"
                                                      className="emotion-7"
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      <Styled(div)
                                                        controlPropsIn={
                                                          Object {
                                                            "hasPlaceholder": true,
                                                            "variant": undefined,
                                                          }
                                                        }
                                                        hasPlaceholder={true}
                                                        key="control"
                                                        size="small"
                                                      >
                                                        <div
                                                          className="emotion-1"
                                                          size="small"
                                                        >
                                                          <Styled(span)>
                                                            <span
                                                              className="emotion-0"
                                                            >
                                                              Small
                                                            </span>
                                                          </Styled(span)>
                                                        </div>
                                                      </Styled(div)>
                                                      <withProps(Styled(IconArrowDropdownDown))
                                                        key="arrow"
                                                      >
                                                        <Styled(IconArrowDropdownDown)
                                                          size="medium"
                                                        >
                                                          <IconArrowDropdownDown
                                                            className="emotion-3"
                                                            size="medium"
                                                          >
                                                            <Icon
                                                              className="emotion-3"
                                                              rtl={false}
                                                              size="medium"
                                                            >
                                                              <Styled(svg)
                                                                aria-hidden={true}
                                                                className="emotion-3"
                                                                focusable="false"
                                                                role="img"
                                                                rtl={false}
                                                                size="medium"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="emotion-2"
                                                                  focusable="false"
                                                                  role="img"
                                                                  size="medium"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <g>
                                                                    <path
                                                                      d="M12 17.5l-8-8h16z"
                                                                    />
                                                                  </g>
                                                                </svg>
                                                              </Styled(svg)>
                                                            </Icon>
                                                          </IconArrowDropdownDown>
                                                        </Styled(IconArrowDropdownDown)>
                                                      </withProps(Styled(IconArrowDropdownDown))>
                                                      <input
                                                        key="input"
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />
                                                      <Styled(div)>
                                                        <div
                                                          className="emotion-6"
                                                        />
                                                      </Styled(div)>
                                                    </div>
                                                  </Styled(div)>
                                                </FauxControl>
                                              </ThemeProvider>
                                            </ThemeProvider>
                                          </Themed(FauxControl)>
                                        </WithTheme(Themed(FauxControl))>
                                      </Styled(WithTheme(Themed(FauxControl)))>
                                    </SelectTrigger>
                                  </span>
                                </Styled(span)>
                              </InnerReference>
                            </Reference>
                          </PopoverTrigger>
                        </span>
                      </Styled(span)>
                    </Manager>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </WithTheme(Themed(Dropdown))>
      </Styled(WithTheme(Themed(Dropdown)))>
    </Select>
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      itemKey="value"
      placeholder="Medium"
      placement="bottom-start"
      size="medium"
    >
      <Styled(WithTheme(Themed(Dropdown)))
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        id="select-27"
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Medium"
        placement="bottom-start"
        size="medium"
      >
        <WithTheme(Themed(Dropdown))
          className="emotion-14"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          id="select-27"
          isOpen={false}
          itemKey="value"
          menu={[Function]}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placeholder="Medium"
          placement="bottom-start"
          size="medium"
        >
          <Themed(Dropdown)
            className="emotion-14"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            id="select-27"
            isOpen={false}
            itemKey="value"
            menu={[Function]}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placeholder="Medium"
            placement="bottom-start"
            size="medium"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="emotion-14"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  id="select-27"
                  isOpen={false}
                  itemKey="value"
                  menu={[Function]}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="Medium"
                  placement="bottom-start"
                  size="medium"
                >
                  <Popover
                    className="emotion-14"
                    content={[Function]}
                    focusTriggerOnClose={true}
                    hasArrow={true}
                    id="select-27"
                    isOpen={false}
                    itemKey="value"
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Medium"
                    placement="bottom-start"
                    size="medium"
                    triggerRef={[Function]}
                  >
                    <Manager>
                      <Styled(span)
                        className="emotion-14"
                        content={[Function]}
                        focusTriggerOnClose={true}
                        hasArrow={true}
                        id="select-27"
                        isOpen={false}
                        itemKey="value"
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Medium"
                        placement="bottom-start"
                        size="medium"
                        triggerRef={[Function]}
                      >
                        <span
                          className="emotion-13"
                          content={[Function]}
                          id="select-27"
                          onClose={[Function]}
                          onOpen={[Function]}
                          placeholder="Medium"
                          size="medium"
                        >
                          <PopoverTrigger
                            aria-describedby="select-27-content"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-owns="select-27-content"
                            isOpen={false}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            placeholder="Medium"
                            role="button"
                            size="medium"
                            tabIndex={0}
                            triggerRef={[Function]}
                          >
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <Styled(span)>
                                  <span
                                    className="emotion-12"
                                  >
                                    <SelectTrigger
                                      aria-describedby="select-27-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-27-content"
                                      isOpen={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      placeholder="Medium"
                                      role="button"
                                      size="medium"
                                      tabIndex={0}
                                      triggerRef={[Function]}
                                    >
                                      <Styled(WithTheme(Themed(FauxControl)))
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-27-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-27-content"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="medium"
                                        tabIndex={0}
                                      >
                                        <WithTheme(Themed(FauxControl))
                                          afterItems={
                                            Array [
                                              <withProps(Styled(IconArrowDropdownDown)) />,
                                              <input
                                                onClick={[Function]}
                                                type="hidden"
                                                value=""
                                              />,
                                            ]
                                          }
                                          aria-describedby="select-27-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-27-content"
                                          className="emotion-8"
                                          control={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "__emotion_base": "div",
                                              "__emotion_forwardProp": undefined,
                                              "__emotion_real": [Circular],
                                              "__emotion_styles": Array [
                                                [Function],
                                              ],
                                              "defaultProps": undefined,
                                              "displayName": "Styled(div)",
                                              "render": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          controlProps={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          fauxControlRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          size="medium"
                                          tabIndex={0}
                                        >
                                          <Themed(FauxControl)
                                            afterItems={
                                              Array [
                                                <withProps(Styled(IconArrowDropdownDown)) />,
                                                <input
                                                  onClick={[Function]}
                                                  type="hidden"
                                                  value=""
                                                />,
                                              ]
                                            }
                                            aria-describedby="select-27-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-27-content"
                                            className="emotion-8"
                                            control={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "__emotion_base": "div",
                                                "__emotion_forwardProp": undefined,
                                                "__emotion_real": [Circular],
                                                "__emotion_styles": Array [
                                                  [Function],
                                                ],
                                                "defaultProps": undefined,
                                                "displayName": "Styled(div)",
                                                "render": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            controlProps={
                                              Object {
                                                "hasPlaceholder": true,
                                                "variant": undefined,
                                              }
                                            }
                                            fauxControlRef={[Function]}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            size="medium"
                                            tabIndex={0}
                                          >
                                            <ThemeProvider>
                                              <ThemeProvider>
                                                <FauxControl
                                                  afterItems={
                                                    Array [
                                                      <withProps(Styled(IconArrowDropdownDown)) />,
                                                      <input
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />,
                                                    ]
                                                  }
                                                  aria-describedby="select-27-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-27-content"
                                                  className="emotion-8"
                                                  control={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "__emotion_base": "div",
                                                      "__emotion_forwardProp": undefined,
                                                      "__emotion_real": [Circular],
                                                      "__emotion_styles": Array [
                                                        [Function],
                                                      ],
                                                      "defaultProps": undefined,
                                                      "displayName": "Styled(div)",
                                                      "render": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  controlProps={
                                                    Object {
                                                      "hasPlaceholder": true,
                                                      "variant": undefined,
                                                    }
                                                  }
                                                  fauxControlRef={[Function]}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  size="medium"
                                                  tabIndex={0}
                                                >
                                                  <Styled(div)
                                                    aria-describedby="select-27-content"
                                                    aria-expanded={false}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-27-content"
                                                    className="emotion-8"
                                                    control={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "__emotion_base": "div",
                                                        "__emotion_forwardProp": undefined,
                                                        "__emotion_real": [Circular],
                                                        "__emotion_styles": Array [
                                                          [Function],
                                                        ],
                                                        "defaultProps": undefined,
                                                        "displayName": "Styled(div)",
                                                        "render": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    <div
                                                      aria-describedby="select-27-content"
                                                      aria-expanded={false}
                                                      aria-haspopup="listbox"
                                                      aria-owns="select-27-content"
                                                      className="emotion-7"
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      <Styled(div)
                                                        controlPropsIn={
                                                          Object {
                                                            "hasPlaceholder": true,
                                                            "variant": undefined,
                                                          }
                                                        }
                                                        hasPlaceholder={true}
                                                        key="control"
                                                        size="medium"
                                                      >
                                                        <div
                                                          className="emotion-20"
                                                          size="medium"
                                                        >
                                                          <Styled(span)>
                                                            <span
                                                              className="emotion-0"
                                                            >
                                                              Medium
                                                            </span>
                                                          </Styled(span)>
                                                        </div>
                                                      </Styled(div)>
                                                      <withProps(Styled(IconArrowDropdownDown))
                                                        key="arrow"
                                                      >
                                                        <Styled(IconArrowDropdownDown)
                                                          size="medium"
                                                        >
                                                          <IconArrowDropdownDown
                                                            className="emotion-22"
                                                            size="medium"
                                                          >
                                                            <Icon
                                                              className="emotion-22"
                                                              rtl={false}
                                                              size="medium"
                                                            >
                                                              <Styled(svg)
                                                                aria-hidden={true}
                                                                className="emotion-22"
                                                                focusable="false"
                                                                role="img"
                                                                rtl={false}
                                                                size="medium"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="emotion-21"
                                                                  focusable="false"
                                                                  role="img"
                                                                  size="medium"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <g>
                                                                    <path
                                                                      d="M12 17.5l-8-8h16z"
                                                                    />
                                                                  </g>
                                                                </svg>
                                                              </Styled(svg)>
                                                            </Icon>
                                                          </IconArrowDropdownDown>
                                                        </Styled(IconArrowDropdownDown)>
                                                      </withProps(Styled(IconArrowDropdownDown))>
                                                      <input
                                                        key="input"
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />
                                                      <Styled(div)>
                                                        <div
                                                          className="emotion-6"
                                                        />
                                                      </Styled(div)>
                                                    </div>
                                                  </Styled(div)>
                                                </FauxControl>
                                              </ThemeProvider>
                                            </ThemeProvider>
                                          </Themed(FauxControl)>
                                        </WithTheme(Themed(FauxControl))>
                                      </Styled(WithTheme(Themed(FauxControl)))>
                                    </SelectTrigger>
                                  </span>
                                </Styled(span)>
                              </InnerReference>
                            </Reference>
                          </PopoverTrigger>
                        </span>
                      </Styled(span)>
                    </Manager>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </WithTheme(Themed(Dropdown))>
      </Styled(WithTheme(Themed(Dropdown)))>
    </Select>
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      itemKey="value"
      placeholder="Large"
      placement="bottom-start"
      size="large"
    >
      <Styled(WithTheme(Themed(Dropdown)))
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        id="select-29"
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Large"
        placement="bottom-start"
        size="large"
      >
        <WithTheme(Themed(Dropdown))
          className="emotion-14"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          id="select-29"
          isOpen={false}
          itemKey="value"
          menu={[Function]}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placeholder="Large"
          placement="bottom-start"
          size="large"
        >
          <Themed(Dropdown)
            className="emotion-14"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            id="select-29"
            isOpen={false}
            itemKey="value"
            menu={[Function]}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placeholder="Large"
            placement="bottom-start"
            size="large"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="emotion-14"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  id="select-29"
                  isOpen={false}
                  itemKey="value"
                  menu={[Function]}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="Large"
                  placement="bottom-start"
                  size="large"
                >
                  <Popover
                    className="emotion-14"
                    content={[Function]}
                    focusTriggerOnClose={true}
                    hasArrow={true}
                    id="select-29"
                    isOpen={false}
                    itemKey="value"
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Large"
                    placement="bottom-start"
                    size="large"
                    triggerRef={[Function]}
                  >
                    <Manager>
                      <Styled(span)
                        className="emotion-14"
                        content={[Function]}
                        focusTriggerOnClose={true}
                        hasArrow={true}
                        id="select-29"
                        isOpen={false}
                        itemKey="value"
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Large"
                        placement="bottom-start"
                        size="large"
                        triggerRef={[Function]}
                      >
                        <span
                          className="emotion-13"
                          content={[Function]}
                          id="select-29"
                          onClose={[Function]}
                          onOpen={[Function]}
                          placeholder="Large"
                          size="large"
                        >
                          <PopoverTrigger
                            aria-describedby="select-29-content"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-owns="select-29-content"
                            isOpen={false}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            placeholder="Large"
                            role="button"
                            size="large"
                            tabIndex={0}
                            triggerRef={[Function]}
                          >
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <Styled(span)>
                                  <span
                                    className="emotion-12"
                                  >
                                    <SelectTrigger
                                      aria-describedby="select-29-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-29-content"
                                      isOpen={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      placeholder="Large"
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                      triggerRef={[Function]}
                                    >
                                      <Styled(WithTheme(Themed(FauxControl)))
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-29-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-29-content"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <WithTheme(Themed(FauxControl))
                                          afterItems={
                                            Array [
                                              <withProps(Styled(IconArrowDropdownDown)) />,
                                              <input
                                                onClick={[Function]}
                                                type="hidden"
                                                value=""
                                              />,
                                            ]
                                          }
                                          aria-describedby="select-29-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-29-content"
                                          className="emotion-8"
                                          control={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "__emotion_base": "div",
                                              "__emotion_forwardProp": undefined,
                                              "__emotion_real": [Circular],
                                              "__emotion_styles": Array [
                                                [Function],
                                              ],
                                              "defaultProps": undefined,
                                              "displayName": "Styled(div)",
                                              "render": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          controlProps={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          fauxControlRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                        >
                                          <Themed(FauxControl)
                                            afterItems={
                                              Array [
                                                <withProps(Styled(IconArrowDropdownDown)) />,
                                                <input
                                                  onClick={[Function]}
                                                  type="hidden"
                                                  value=""
                                                />,
                                              ]
                                            }
                                            aria-describedby="select-29-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-29-content"
                                            className="emotion-8"
                                            control={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "__emotion_base": "div",
                                                "__emotion_forwardProp": undefined,
                                                "__emotion_real": [Circular],
                                                "__emotion_styles": Array [
                                                  [Function],
                                                ],
                                                "defaultProps": undefined,
                                                "displayName": "Styled(div)",
                                                "render": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            controlProps={
                                              Object {
                                                "hasPlaceholder": true,
                                                "variant": undefined,
                                              }
                                            }
                                            fauxControlRef={[Function]}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            size="large"
                                            tabIndex={0}
                                          >
                                            <ThemeProvider>
                                              <ThemeProvider>
                                                <FauxControl
                                                  afterItems={
                                                    Array [
                                                      <withProps(Styled(IconArrowDropdownDown)) />,
                                                      <input
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />,
                                                    ]
                                                  }
                                                  aria-describedby="select-29-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-29-content"
                                                  className="emotion-8"
                                                  control={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "__emotion_base": "div",
                                                      "__emotion_forwardProp": undefined,
                                                      "__emotion_real": [Circular],
                                                      "__emotion_styles": Array [
                                                        [Function],
                                                      ],
                                                      "defaultProps": undefined,
                                                      "displayName": "Styled(div)",
                                                      "render": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  controlProps={
                                                    Object {
                                                      "hasPlaceholder": true,
                                                      "variant": undefined,
                                                    }
                                                  }
                                                  fauxControlRef={[Function]}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  size="large"
                                                  tabIndex={0}
                                                >
                                                  <Styled(div)
                                                    aria-describedby="select-29-content"
                                                    aria-expanded={false}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-29-content"
                                                    className="emotion-8"
                                                    control={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "__emotion_base": "div",
                                                        "__emotion_forwardProp": undefined,
                                                        "__emotion_real": [Circular],
                                                        "__emotion_styles": Array [
                                                          [Function],
                                                        ],
                                                        "defaultProps": undefined,
                                                        "displayName": "Styled(div)",
                                                        "render": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    <div
                                                      aria-describedby="select-29-content"
                                                      aria-expanded={false}
                                                      aria-haspopup="listbox"
                                                      aria-owns="select-29-content"
                                                      className="emotion-7"
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      <Styled(div)
                                                        controlPropsIn={
                                                          Object {
                                                            "hasPlaceholder": true,
                                                            "variant": undefined,
                                                          }
                                                        }
                                                        hasPlaceholder={true}
                                                        key="control"
                                                        size="large"
                                                      >
                                                        <div
                                                          className="emotion-39"
                                                          size="large"
                                                        >
                                                          <Styled(span)>
                                                            <span
                                                              className="emotion-0"
                                                            >
                                                              Large
                                                            </span>
                                                          </Styled(span)>
                                                        </div>
                                                      </Styled(div)>
                                                      <withProps(Styled(IconArrowDropdownDown))
                                                        key="arrow"
                                                      >
                                                        <Styled(IconArrowDropdownDown)
                                                          size="1.5em"
                                                        >
                                                          <IconArrowDropdownDown
                                                            className="emotion-22"
                                                            size="1.5em"
                                                          >
                                                            <Icon
                                                              className="emotion-22"
                                                              rtl={false}
                                                              size="1.5em"
                                                            >
                                                              <Styled(svg)
                                                                aria-hidden={true}
                                                                className="emotion-22"
                                                                focusable="false"
                                                                role="img"
                                                                rtl={false}
                                                                size="1.5em"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="emotion-40"
                                                                  focusable="false"
                                                                  role="img"
                                                                  size="1.5em"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <g>
                                                                    <path
                                                                      d="M12 17.5l-8-8h16z"
                                                                    />
                                                                  </g>
                                                                </svg>
                                                              </Styled(svg)>
                                                            </Icon>
                                                          </IconArrowDropdownDown>
                                                        </Styled(IconArrowDropdownDown)>
                                                      </withProps(Styled(IconArrowDropdownDown))>
                                                      <input
                                                        key="input"
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />
                                                      <Styled(div)>
                                                        <div
                                                          className="emotion-6"
                                                        />
                                                      </Styled(div)>
                                                    </div>
                                                  </Styled(div)>
                                                </FauxControl>
                                              </ThemeProvider>
                                            </ThemeProvider>
                                          </Themed(FauxControl)>
                                        </WithTheme(Themed(FauxControl))>
                                      </Styled(WithTheme(Themed(FauxControl)))>
                                    </SelectTrigger>
                                  </span>
                                </Styled(span)>
                              </InnerReference>
                            </Reference>
                          </PopoverTrigger>
                        </span>
                      </Styled(span)>
                    </Manager>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </WithTheme(Themed(Dropdown))>
      </Styled(WithTheme(Themed(Dropdown)))>
    </Select>
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      itemKey="value"
      placeholder="Jumbo"
      placement="bottom-start"
      size="jumbo"
    >
      <Styled(WithTheme(Themed(Dropdown)))
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        id="select-31"
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Jumbo"
        placement="bottom-start"
        size="jumbo"
      >
        <WithTheme(Themed(Dropdown))
          className="emotion-14"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          id="select-31"
          isOpen={false}
          itemKey="value"
          menu={[Function]}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placeholder="Jumbo"
          placement="bottom-start"
          size="jumbo"
        >
          <Themed(Dropdown)
            className="emotion-14"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            id="select-31"
            isOpen={false}
            itemKey="value"
            menu={[Function]}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placeholder="Jumbo"
            placement="bottom-start"
            size="jumbo"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="emotion-14"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  id="select-31"
                  isOpen={false}
                  itemKey="value"
                  menu={[Function]}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="Jumbo"
                  placement="bottom-start"
                  size="jumbo"
                >
                  <Popover
                    className="emotion-14"
                    content={[Function]}
                    focusTriggerOnClose={true}
                    hasArrow={true}
                    id="select-31"
                    isOpen={false}
                    itemKey="value"
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Jumbo"
                    placement="bottom-start"
                    size="jumbo"
                    triggerRef={[Function]}
                  >
                    <Manager>
                      <Styled(span)
                        className="emotion-14"
                        content={[Function]}
                        focusTriggerOnClose={true}
                        hasArrow={true}
                        id="select-31"
                        isOpen={false}
                        itemKey="value"
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Jumbo"
                        placement="bottom-start"
                        size="jumbo"
                        triggerRef={[Function]}
                      >
                        <span
                          className="emotion-13"
                          content={[Function]}
                          id="select-31"
                          onClose={[Function]}
                          onOpen={[Function]}
                          placeholder="Jumbo"
                          size="jumbo"
                        >
                          <PopoverTrigger
                            aria-describedby="select-31-content"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-owns="select-31-content"
                            isOpen={false}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            placeholder="Jumbo"
                            role="button"
                            size="jumbo"
                            tabIndex={0}
                            triggerRef={[Function]}
                          >
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <Styled(span)>
                                  <span
                                    className="emotion-12"
                                  >
                                    <SelectTrigger
                                      aria-describedby="select-31-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-31-content"
                                      isOpen={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      placeholder="Jumbo"
                                      role="button"
                                      size="jumbo"
                                      tabIndex={0}
                                      triggerRef={[Function]}
                                    >
                                      <Styled(WithTheme(Themed(FauxControl)))
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-31-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-31-content"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="jumbo"
                                        tabIndex={0}
                                      >
                                        <WithTheme(Themed(FauxControl))
                                          afterItems={
                                            Array [
                                              <withProps(Styled(IconArrowDropdownDown)) />,
                                              <input
                                                onClick={[Function]}
                                                type="hidden"
                                                value=""
                                              />,
                                            ]
                                          }
                                          aria-describedby="select-31-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-31-content"
                                          className="emotion-8"
                                          control={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "__emotion_base": "div",
                                              "__emotion_forwardProp": undefined,
                                              "__emotion_real": [Circular],
                                              "__emotion_styles": Array [
                                                [Function],
                                              ],
                                              "defaultProps": undefined,
                                              "displayName": "Styled(div)",
                                              "render": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          controlProps={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          fauxControlRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          size="jumbo"
                                          tabIndex={0}
                                        >
                                          <Themed(FauxControl)
                                            afterItems={
                                              Array [
                                                <withProps(Styled(IconArrowDropdownDown)) />,
                                                <input
                                                  onClick={[Function]}
                                                  type="hidden"
                                                  value=""
                                                />,
                                              ]
                                            }
                                            aria-describedby="select-31-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-31-content"
                                            className="emotion-8"
                                            control={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "__emotion_base": "div",
                                                "__emotion_forwardProp": undefined,
                                                "__emotion_real": [Circular],
                                                "__emotion_styles": Array [
                                                  [Function],
                                                ],
                                                "defaultProps": undefined,
                                                "displayName": "Styled(div)",
                                                "render": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            controlProps={
                                              Object {
                                                "hasPlaceholder": true,
                                                "variant": undefined,
                                              }
                                            }
                                            fauxControlRef={[Function]}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            size="jumbo"
                                            tabIndex={0}
                                          >
                                            <ThemeProvider>
                                              <ThemeProvider>
                                                <FauxControl
                                                  afterItems={
                                                    Array [
                                                      <withProps(Styled(IconArrowDropdownDown)) />,
                                                      <input
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />,
                                                    ]
                                                  }
                                                  aria-describedby="select-31-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-31-content"
                                                  className="emotion-8"
                                                  control={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "__emotion_base": "div",
                                                      "__emotion_forwardProp": undefined,
                                                      "__emotion_real": [Circular],
                                                      "__emotion_styles": Array [
                                                        [Function],
                                                      ],
                                                      "defaultProps": undefined,
                                                      "displayName": "Styled(div)",
                                                      "render": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  controlProps={
                                                    Object {
                                                      "hasPlaceholder": true,
                                                      "variant": undefined,
                                                    }
                                                  }
                                                  fauxControlRef={[Function]}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  size="jumbo"
                                                  tabIndex={0}
                                                >
                                                  <Styled(div)
                                                    aria-describedby="select-31-content"
                                                    aria-expanded={false}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-31-content"
                                                    className="emotion-8"
                                                    control={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "__emotion_base": "div",
                                                        "__emotion_forwardProp": undefined,
                                                        "__emotion_real": [Circular],
                                                        "__emotion_styles": Array [
                                                          [Function],
                                                        ],
                                                        "defaultProps": undefined,
                                                        "displayName": "Styled(div)",
                                                        "render": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                  >
                                                    <div
                                                      aria-describedby="select-31-content"
                                                      aria-expanded={false}
                                                      aria-haspopup="listbox"
                                                      aria-owns="select-31-content"
                                                      className="emotion-7"
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      <Styled(div)
                                                        controlPropsIn={
                                                          Object {
                                                            "hasPlaceholder": true,
                                                            "variant": undefined,
                                                          }
                                                        }
                                                        hasPlaceholder={true}
                                                        key="control"
                                                        size="jumbo"
                                                      >
                                                        <div
                                                          className="emotion-58"
                                                          size="jumbo"
                                                        >
                                                          <Styled(span)>
                                                            <span
                                                              className="emotion-0"
                                                            >
                                                              Jumbo
                                                            </span>
                                                          </Styled(span)>
                                                        </div>
                                                      </Styled(div)>
                                                      <withProps(Styled(IconArrowDropdownDown))
                                                        key="arrow"
                                                      >
                                                        <Styled(IconArrowDropdownDown)
                                                          size="1.5em"
                                                        >
                                                          <IconArrowDropdownDown
                                                            className="emotion-60"
                                                            size="1.5em"
                                                          >
                                                            <Icon
                                                              className="emotion-60"
                                                              rtl={false}
                                                              size="1.5em"
                                                            >
                                                              <Styled(svg)
                                                                aria-hidden={true}
                                                                className="emotion-60"
                                                                focusable="false"
                                                                role="img"
                                                                rtl={false}
                                                                size="1.5em"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="emotion-59"
                                                                  focusable="false"
                                                                  role="img"
                                                                  size="1.5em"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <g>
                                                                    <path
                                                                      d="M12 17.5l-8-8h16z"
                                                                    />
                                                                  </g>
                                                                </svg>
                                                              </Styled(svg)>
                                                            </Icon>
                                                          </IconArrowDropdownDown>
                                                        </Styled(IconArrowDropdownDown)>
                                                      </withProps(Styled(IconArrowDropdownDown))>
                                                      <input
                                                        key="input"
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />
                                                      <Styled(div)>
                                                        <div
                                                          className="emotion-6"
                                                        />
                                                      </Styled(div)>
                                                    </div>
                                                  </Styled(div)>
                                                </FauxControl>
                                              </ThemeProvider>
                                            </ThemeProvider>
                                          </Themed(FauxControl)>
                                        </WithTheme(Themed(FauxControl))>
                                      </Styled(WithTheme(Themed(FauxControl)))>
                                    </SelectTrigger>
                                  </span>
                                </Styled(span)>
                              </InnerReference>
                            </Reference>
                          </PopoverTrigger>
                        </span>
                      </Styled(span)>
                    </Manager>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </WithTheme(Themed(Dropdown))>
      </Styled(WithTheme(Themed(Dropdown)))>
    </Select>
  </div>
</Styled(div)>
`;

exports[`Select demo examples Snapshots: trigger-ref 1`] = `
.emotion-14 {
  width: 100%;
}

.emotion-14 > span {
  width: 100%;
}

.emotion-13 {
  display: inline-block;
  width: 100%;
}

.emotion-13 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-7:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-3 {
  margin: 0.5em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-6 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-22[class] > *:not(:last-child) {
  margin-bottom: 1rem;
}

.emotion-20 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  max-height: 100%;
  pointer-events: none;
  width: 100%;
}

.emotion-21 {
  box-sizing: border-box;
  color: #3272d9;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  cursor: pointer;
  display: inline-block;
  font-weight: 600;
  height: 2.5em;
  margin: 0;
  min-width: 2.5em;
  padding: 0 0.5em;
  -webkit-text-decoration: none;
  text-decoration: none;
  vertical-align: middle;
}

.emotion-21 *,
.emotion-21 *::before,
.emotion-21 *::after {
  box-sizing: inherit;
}

.emotion-21:focus {
  background-color: #ffffff;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-21:hover {
  background-color: #f5f7fa;
  border-color: #5691f0;
  color: #3272d9;
  -webkit-text-decoration: none;
  text-decoration: none;
}

.emotion-21:focus:active,
.emotion-21:focus:hover {
  border-color: #c8d1e0;
}

.emotion-21:active {
  background-color: #ebeff5;
  border-color: #1d5bbf;
  color: #3272d9;
}

.emotion-21::-moz-focus-inner {
  border: 0;
}

.emotion-21 [role="img"] {
  box-sizing: content-box;
  color: #3272d9;
  display: block;
  -webkit-flex-shrink: 0;
  -ms-flex-negative: 0;
  flex-shrink: 0;
}

.emotion-21 [role="img"]:first-child {
  margin-right: 0.5em;
}

.emotion-21 [role="img"]:last-child {
  margin-left: 0.5em;
}

.emotion-21 [role="img"]:only-child {
  margin: 0;
}

.emotion-19 {
  display: block;
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  font-size: 0.875em;
  line-height: 2.857142857142857em;
}

.emotion-19:first-child {
  padding-left: 0.5714285714285714em;
}

.emotion-19:last-child {
  padding-right: 0.5714285714285714em;
}

<Component>
  <MyForm>
    <Styled(div)>
      <div
        className="emotion-22"
      >
        <Select
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          itemKey="value"
          placeholder="Select..."
          placement="bottom-start"
          size="large"
          triggerRef={[Function]}
        >
          <Styled(WithTheme(Themed(Dropdown)))
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            id="select-61"
            isOpen={false}
            itemKey="value"
            menu={[Function]}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placeholder="Select..."
            placement="bottom-start"
            size="large"
            triggerRef={[Function]}
          >
            <WithTheme(Themed(Dropdown))
              className="emotion-14"
              data={
                Array [
                  Object {
                    "text": "Alpha",
                    "value": "alpha",
                  },
                  Object {
                    "text": "Beta",
                    "value": "beta",
                  },
                  Object {
                    "text": "Gamma",
                    "value": "gamma",
                  },
                ]
              }
              id="select-61"
              isOpen={false}
              itemKey="value"
              menu={[Function]}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              onClose={[Function]}
              onOpen={[Function]}
              placeholder="Select..."
              placement="bottom-start"
              size="large"
              triggerRef={[Function]}
            >
              <Themed(Dropdown)
                className="emotion-14"
                data={
                  Array [
                    Object {
                      "text": "Alpha",
                      "value": "alpha",
                    },
                    Object {
                      "text": "Beta",
                      "value": "beta",
                    },
                    Object {
                      "text": "Gamma",
                      "value": "gamma",
                    },
                  ]
                }
                id="select-61"
                isOpen={false}
                itemKey="value"
                menu={[Function]}
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                onClose={[Function]}
                onOpen={[Function]}
                placeholder="Select..."
                placement="bottom-start"
                size="large"
                triggerRef={[Function]}
              >
                <ThemeProvider>
                  <ThemeProvider>
                    <Dropdown
                      className="emotion-14"
                      data={
                        Array [
                          Object {
                            "text": "Alpha",
                            "value": "alpha",
                          },
                          Object {
                            "text": "Beta",
                            "value": "beta",
                          },
                          Object {
                            "text": "Gamma",
                            "value": "gamma",
                          },
                        ]
                      }
                      id="select-61"
                      isOpen={false}
                      itemKey="value"
                      menu={[Function]}
                      modifiers={
                        Object {
                          "contentWidth": Object {
                            "enabled": true,
                            "fn": [Function],
                          },
                        }
                      }
                      onClose={[Function]}
                      onOpen={[Function]}
                      placeholder="Select..."
                      placement="bottom-start"
                      size="large"
                      triggerRef={[Function]}
                    >
                      <Popover
                        className="emotion-14"
                        content={[Function]}
                        focusTriggerOnClose={true}
                        hasArrow={true}
                        id="select-61"
                        isOpen={false}
                        itemKey="value"
                        modifiers={
                          Object {
                            "contentWidth": Object {
                              "enabled": true,
                              "fn": [Function],
                            },
                          }
                        }
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Select..."
                        placement="bottom-start"
                        size="large"
                        triggerRef={[Function]}
                      >
                        <Manager>
                          <Styled(span)
                            className="emotion-14"
                            content={[Function]}
                            focusTriggerOnClose={true}
                            hasArrow={true}
                            id="select-61"
                            isOpen={false}
                            itemKey="value"
                            onClose={[Function]}
                            onOpen={[Function]}
                            placeholder="Select..."
                            placement="bottom-start"
                            size="large"
                            triggerRef={[Function]}
                          >
                            <span
                              className="emotion-13"
                              content={[Function]}
                              id="select-61"
                              onClose={[Function]}
                              onOpen={[Function]}
                              placeholder="Select..."
                              size="large"
                            >
                              <PopoverTrigger
                                aria-describedby="select-61-content"
                                aria-expanded={false}
                                aria-haspopup="listbox"
                                aria-owns="select-61-content"
                                isOpen={false}
                                onBlur={[Function]}
                                onClick={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                placeholder="Select..."
                                role="button"
                                size="large"
                                tabIndex={0}
                                triggerRef={[Function]}
                              >
                                <Reference>
                                  <InnerReference
                                    getReferenceRef={[Function]}
                                  >
                                    <Styled(span)>
                                      <span
                                        className="emotion-12"
                                      >
                                        <SelectTrigger
                                          aria-describedby="select-61-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-61-content"
                                          isOpen={false}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          placeholder="Select..."
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                          triggerRef={[Function]}
                                        >
                                          <Styled(WithTheme(Themed(FauxControl)))
                                            afterItems={
                                              Array [
                                                <withProps(Styled(IconArrowDropdownDown)) />,
                                                <input
                                                  onClick={[Function]}
                                                  type="hidden"
                                                  value=""
                                                />,
                                              ]
                                            }
                                            aria-describedby="select-61-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-61-content"
                                            control={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "__emotion_base": "div",
                                                "__emotion_forwardProp": undefined,
                                                "__emotion_real": [Circular],
                                                "__emotion_styles": Array [
                                                  [Function],
                                                ],
                                                "defaultProps": undefined,
                                                "displayName": "Styled(div)",
                                                "render": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            controlProps={
                                              Object {
                                                "hasPlaceholder": true,
                                                "variant": undefined,
                                              }
                                            }
                                            fauxControlRef={[Function]}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            size="large"
                                            tabIndex={0}
                                          >
                                            <WithTheme(Themed(FauxControl))
                                              afterItems={
                                                Array [
                                                  <withProps(Styled(IconArrowDropdownDown)) />,
                                                  <input
                                                    onClick={[Function]}
                                                    type="hidden"
                                                    value=""
                                                  />,
                                                ]
                                              }
                                              aria-describedby="select-61-content"
                                              aria-expanded={false}
                                              aria-haspopup="listbox"
                                              aria-owns="select-61-content"
                                              className="emotion-8"
                                              control={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "__emotion_base": "div",
                                                  "__emotion_forwardProp": undefined,
                                                  "__emotion_real": [Circular],
                                                  "__emotion_styles": Array [
                                                    [Function],
                                                  ],
                                                  "defaultProps": undefined,
                                                  "displayName": "Styled(div)",
                                                  "render": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              controlProps={
                                                Object {
                                                  "hasPlaceholder": true,
                                                  "variant": undefined,
                                                }
                                              }
                                              fauxControlRef={[Function]}
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              role="button"
                                              size="large"
                                              tabIndex={0}
                                            >
                                              <Themed(FauxControl)
                                                afterItems={
                                                  Array [
                                                    <withProps(Styled(IconArrowDropdownDown)) />,
                                                    <input
                                                      onClick={[Function]}
                                                      type="hidden"
                                                      value=""
                                                    />,
                                                  ]
                                                }
                                                aria-describedby="select-61-content"
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-owns="select-61-content"
                                                className="emotion-8"
                                                control={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "__emotion_base": "div",
                                                    "__emotion_forwardProp": undefined,
                                                    "__emotion_real": [Circular],
                                                    "__emotion_styles": Array [
                                                      [Function],
                                                    ],
                                                    "defaultProps": undefined,
                                                    "displayName": "Styled(div)",
                                                    "render": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                controlProps={
                                                  Object {
                                                    "hasPlaceholder": true,
                                                    "variant": undefined,
                                                  }
                                                }
                                                fauxControlRef={[Function]}
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                size="large"
                                                tabIndex={0}
                                              >
                                                <ThemeProvider>
                                                  <ThemeProvider>
                                                    <FauxControl
                                                      afterItems={
                                                        Array [
                                                          <withProps(Styled(IconArrowDropdownDown)) />,
                                                          <input
                                                            onClick={[Function]}
                                                            type="hidden"
                                                            value=""
                                                          />,
                                                        ]
                                                      }
                                                      aria-describedby="select-61-content"
                                                      aria-expanded={false}
                                                      aria-haspopup="listbox"
                                                      aria-owns="select-61-content"
                                                      className="emotion-8"
                                                      control={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "__emotion_base": "div",
                                                          "__emotion_forwardProp": undefined,
                                                          "__emotion_real": [Circular],
                                                          "__emotion_styles": Array [
                                                            [Function],
                                                          ],
                                                          "defaultProps": undefined,
                                                          "displayName": "Styled(div)",
                                                          "render": [Function],
                                                          "withComponent": [Function],
                                                        }
                                                      }
                                                      controlProps={
                                                        Object {
                                                          "hasPlaceholder": true,
                                                          "variant": undefined,
                                                        }
                                                      }
                                                      fauxControlRef={[Function]}
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      role="button"
                                                      size="large"
                                                      tabIndex={0}
                                                    >
                                                      <Styled(div)
                                                        aria-describedby="select-61-content"
                                                        aria-expanded={false}
                                                        aria-haspopup="listbox"
                                                        aria-owns="select-61-content"
                                                        className="emotion-8"
                                                        control={
                                                          Object {
                                                            "$$typeof": Symbol(react.forward_ref),
                                                            "__emotion_base": "div",
                                                            "__emotion_forwardProp": undefined,
                                                            "__emotion_real": [Circular],
                                                            "__emotion_styles": Array [
                                                              [Function],
                                                            ],
                                                            "defaultProps": undefined,
                                                            "displayName": "Styled(div)",
                                                            "render": [Function],
                                                            "withComponent": [Function],
                                                          }
                                                        }
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        role="button"
                                                        tabIndex={0}
                                                      >
                                                        <div
                                                          aria-describedby="select-61-content"
                                                          aria-expanded={false}
                                                          aria-haspopup="listbox"
                                                          aria-owns="select-61-content"
                                                          className="emotion-7"
                                                          onBlur={[Function]}
                                                          onClick={[Function]}
                                                          onKeyDown={[Function]}
                                                          onKeyUp={[Function]}
                                                          role="button"
                                                          tabIndex={0}
                                                        >
                                                          <Styled(div)
                                                            controlPropsIn={
                                                              Object {
                                                                "hasPlaceholder": true,
                                                                "variant": undefined,
                                                              }
                                                            }
                                                            hasPlaceholder={true}
                                                            key="control"
                                                            size="large"
                                                          >
                                                            <div
                                                              className="emotion-1"
                                                              size="large"
                                                            >
                                                              <Styled(span)>
                                                                <span
                                                                  className="emotion-0"
                                                                >
                                                                  Select...
                                                                </span>
                                                              </Styled(span)>
                                                            </div>
                                                          </Styled(div)>
                                                          <withProps(Styled(IconArrowDropdownDown))
                                                            key="arrow"
                                                          >
                                                            <Styled(IconArrowDropdownDown)
                                                              size="1.5em"
                                                            >
                                                              <IconArrowDropdownDown
                                                                className="emotion-3"
                                                                size="1.5em"
                                                              >
                                                                <Icon
                                                                  className="emotion-3"
                                                                  rtl={false}
                                                                  size="1.5em"
                                                                >
                                                                  <Styled(svg)
                                                                    aria-hidden={true}
                                                                    className="emotion-3"
                                                                    focusable="false"
                                                                    role="img"
                                                                    rtl={false}
                                                                    size="1.5em"
                                                                    viewBox="0 0 24 24"
                                                                  >
                                                                    <svg
                                                                      aria-hidden={true}
                                                                      className="emotion-2"
                                                                      focusable="false"
                                                                      role="img"
                                                                      size="1.5em"
                                                                      viewBox="0 0 24 24"
                                                                    >
                                                                      <g>
                                                                        <path
                                                                          d="M12 17.5l-8-8h16z"
                                                                        />
                                                                      </g>
                                                                    </svg>
                                                                  </Styled(svg)>
                                                                </Icon>
                                                              </IconArrowDropdownDown>
                                                            </Styled(IconArrowDropdownDown)>
                                                          </withProps(Styled(IconArrowDropdownDown))>
                                                          <input
                                                            key="input"
                                                            onClick={[Function]}
                                                            type="hidden"
                                                            value=""
                                                          />
                                                          <Styled(div)>
                                                            <div
                                                              className="emotion-6"
                                                            />
                                                          </Styled(div)>
                                                        </div>
                                                      </Styled(div)>
                                                    </FauxControl>
                                                  </ThemeProvider>
                                                </ThemeProvider>
                                              </Themed(FauxControl)>
                                            </WithTheme(Themed(FauxControl))>
                                          </Styled(WithTheme(Themed(FauxControl)))>
                                        </SelectTrigger>
                                      </span>
                                    </Styled(span)>
                                  </InnerReference>
                                </Reference>
                              </PopoverTrigger>
                            </span>
                          </Styled(span)>
                        </Manager>
                      </Popover>
                    </Dropdown>
                  </ThemeProvider>
                </ThemeProvider>
              </Themed(Dropdown)>
            </WithTheme(Themed(Dropdown))>
          </Styled(WithTheme(Themed(Dropdown)))>
        </Select>
        <WithForwardRef(Button)
          onClick={[Function]}
          size="large"
        >
          <Button
            forwardedRef={null}
            onClick={[Function]}
            size="large"
          >
            <Styled(button)
              onClick={[Function]}
              size="large"
              text="Focus the control"
            >
              <button
                className="emotion-21"
                onClick={[Function]}
                size="large"
              >
                <Styled(span)>
                  <span
                    className="emotion-20"
                  >
                    <Styled(span)
                      size="large"
                    >
                      <span
                        className="emotion-19"
                        size="large"
                      >
                        Focus the control
                      </span>
                    </Styled(span)>
                  </span>
                </Styled(span)>
              </button>
            </Styled(button)>
          </Button>
        </WithForwardRef(Button)>
      </div>
    </Styled(div)>
  </MyForm>
</Component>
`;

exports[`Select demo examples Snapshots: uncontrolled 1`] = `
.emotion-14 {
  width: 100%;
}

.emotion-14 > span {
  width: 100%;
}

.emotion-13 {
  display: inline-block;
  width: 100%;
}

.emotion-13 > span {
  width: 100%;
}

.emotion-12 {
  display: inline-block;
}

.emotion-8 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-7 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-7 *,
.emotion-7 *::before,
.emotion-7 *::after {
  box-sizing: inherit;
}

.emotion-7:hover > div:last-child {
  border-color: #5691f0;
}

.emotion-7:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-7 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-7 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-7 :not([role="img"]) ~ [role="img"] {
  color: #3272d9;
}

.emotion-7 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #3272d9;
  margin-left: 0.5em;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #333840;
  -webkit-text-fill-color: #333840;
  font-size: 0.875em;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 1.1428571428571428em;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #1d5bbf;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-3 {
  margin: 0.5em;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-6 {
  background-color: #ffffff;
  border-color: #c8d1e0;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

<Select
  data={
    Array [
      Object {
        "text": "Alabama",
        "value": "AL",
      },
      Object {
        "text": "Alaska",
        "value": "AK",
      },
      Object {
        "text": "Arizona",
        "value": "AZ",
      },
      Object {
        "text": "Arkansas",
        "value": "AR",
      },
      Object {
        "text": "California",
        "value": "CA",
      },
      Object {
        "text": "Colorado",
        "value": "CO",
      },
      Object {
        "text": "Connecticut",
        "value": "CT",
      },
      Object {
        "text": "Delaware",
        "value": "DE",
      },
      Object {
        "text": "Florida",
        "value": "FL",
      },
      Object {
        "text": "Georgia",
        "value": "GA",
      },
      Object {
        "text": "Hawaii",
        "value": "HI",
      },
      Object {
        "text": "Idaho",
        "value": "ID",
      },
      Object {
        "text": "Illinois",
        "value": "IL",
      },
      Object {
        "text": "Indiana",
        "value": "IN",
      },
      Object {
        "text": "Iowa",
        "value": "IA",
      },
      Object {
        "text": "Kansas",
        "value": "KS",
      },
      Object {
        "text": "Kentucky",
        "value": "KY",
      },
      Object {
        "text": "Louisiana",
        "value": "LA",
      },
      Object {
        "text": "Maine",
        "value": "ME",
      },
      Object {
        "text": "Maryland",
        "value": "MD",
      },
      Object {
        "text": "Massachusetts",
        "value": "MA",
      },
      Object {
        "text": "Michigan",
        "value": "MI",
      },
      Object {
        "text": "Minnesota",
        "value": "MN",
      },
      Object {
        "text": "Mississippi",
        "value": "MS",
      },
      Object {
        "text": "Missouri",
        "value": "MO",
      },
      Object {
        "text": "Montana",
        "value": "MT",
      },
      Object {
        "text": "Nebraska",
        "value": "NE",
      },
      Object {
        "text": "Nevada",
        "value": "NV",
      },
      Object {
        "text": "New Hampshire",
        "value": "NH",
      },
      Object {
        "text": "New Jersey",
        "value": "NJ",
      },
      Object {
        "text": "New Mexico",
        "value": "NM",
      },
      Object {
        "text": "New York",
        "value": "NY",
      },
      Object {
        "text": "North Carolina",
        "value": "NC",
      },
      Object {
        "text": "North Dakota",
        "value": "ND",
      },
      Object {
        "text": "Ohio",
        "value": "OH",
      },
      Object {
        "text": "Oklahoma",
        "value": "OK",
      },
      Object {
        "text": "Oregon",
        "value": "OR",
      },
      Object {
        "text": "Pennsylvania",
        "value": "PA",
      },
      Object {
        "text": "Rhode Island",
        "value": "RI",
      },
      Object {
        "text": "South Carolina",
        "value": "SC",
      },
      Object {
        "text": "South Dakota",
        "value": "SD",
      },
      Object {
        "text": "Tennessee",
        "value": "TN",
      },
      Object {
        "text": "Texas",
        "value": "TX",
      },
      Object {
        "text": "Utah",
        "value": "UT",
      },
      Object {
        "text": "Vermont",
        "value": "VT",
      },
      Object {
        "text": "Virginia",
        "value": "VA",
      },
      Object {
        "text": "Washington",
        "value": "WA",
      },
      Object {
        "text": "West Virginia",
        "value": "WV",
      },
      Object {
        "text": "Wisconsin",
        "value": "WI",
      },
      Object {
        "text": "Wyoming",
        "value": "WY",
      },
    ]
  }
  defaultSelectedItem={
    Object {
      "text": "Colorado",
      "value": "CO",
    }
  }
  itemKey="value"
  name="state"
  placeholder="Select..."
  placement="bottom-start"
  size="large"
>
  <Styled(WithTheme(Themed(Dropdown)))
    data={
      Array [
        Object {
          "text": "Alabama",
          "value": "AL",
        },
        Object {
          "text": "Alaska",
          "value": "AK",
        },
        Object {
          "text": "Arizona",
          "value": "AZ",
        },
        Object {
          "text": "Arkansas",
          "value": "AR",
        },
        Object {
          "text": "California",
          "value": "CA",
        },
        Object {
          "text": "Colorado",
          "value": "CO",
        },
        Object {
          "text": "Connecticut",
          "value": "CT",
        },
        Object {
          "text": "Delaware",
          "value": "DE",
        },
        Object {
          "text": "Florida",
          "value": "FL",
        },
        Object {
          "text": "Georgia",
          "value": "GA",
        },
        Object {
          "text": "Hawaii",
          "value": "HI",
        },
        Object {
          "text": "Idaho",
          "value": "ID",
        },
        Object {
          "text": "Illinois",
          "value": "IL",
        },
        Object {
          "text": "Indiana",
          "value": "IN",
        },
        Object {
          "text": "Iowa",
          "value": "IA",
        },
        Object {
          "text": "Kansas",
          "value": "KS",
        },
        Object {
          "text": "Kentucky",
          "value": "KY",
        },
        Object {
          "text": "Louisiana",
          "value": "LA",
        },
        Object {
          "text": "Maine",
          "value": "ME",
        },
        Object {
          "text": "Maryland",
          "value": "MD",
        },
        Object {
          "text": "Massachusetts",
          "value": "MA",
        },
        Object {
          "text": "Michigan",
          "value": "MI",
        },
        Object {
          "text": "Minnesota",
          "value": "MN",
        },
        Object {
          "text": "Mississippi",
          "value": "MS",
        },
        Object {
          "text": "Missouri",
          "value": "MO",
        },
        Object {
          "text": "Montana",
          "value": "MT",
        },
        Object {
          "text": "Nebraska",
          "value": "NE",
        },
        Object {
          "text": "Nevada",
          "value": "NV",
        },
        Object {
          "text": "New Hampshire",
          "value": "NH",
        },
        Object {
          "text": "New Jersey",
          "value": "NJ",
        },
        Object {
          "text": "New Mexico",
          "value": "NM",
        },
        Object {
          "text": "New York",
          "value": "NY",
        },
        Object {
          "text": "North Carolina",
          "value": "NC",
        },
        Object {
          "text": "North Dakota",
          "value": "ND",
        },
        Object {
          "text": "Ohio",
          "value": "OH",
        },
        Object {
          "text": "Oklahoma",
          "value": "OK",
        },
        Object {
          "text": "Oregon",
          "value": "OR",
        },
        Object {
          "text": "Pennsylvania",
          "value": "PA",
        },
        Object {
          "text": "Rhode Island",
          "value": "RI",
        },
        Object {
          "text": "South Carolina",
          "value": "SC",
        },
        Object {
          "text": "South Dakota",
          "value": "SD",
        },
        Object {
          "text": "Tennessee",
          "value": "TN",
        },
        Object {
          "text": "Texas",
          "value": "TX",
        },
        Object {
          "text": "Utah",
          "value": "UT",
        },
        Object {
          "text": "Vermont",
          "value": "VT",
        },
        Object {
          "text": "Virginia",
          "value": "VA",
        },
        Object {
          "text": "Washington",
          "value": "WA",
        },
        Object {
          "text": "West Virginia",
          "value": "WV",
        },
        Object {
          "text": "Wisconsin",
          "value": "WI",
        },
        Object {
          "text": "Wyoming",
          "value": "WY",
        },
      ]
    }
    defaultSelectedItem={
      Object {
        "text": "Colorado",
        "value": "CO",
      }
    }
    id="select-1"
    isOpen={false}
    itemKey="value"
    menu={[Function]}
    modifiers={
      Object {
        "contentWidth": Object {
          "enabled": true,
          "fn": [Function],
        },
      }
    }
    name="state"
    onClose={[Function]}
    onOpen={[Function]}
    placeholder="Select..."
    placement="bottom-start"
    size="large"
  >
    <WithTheme(Themed(Dropdown))
      className="emotion-14"
      data={
        Array [
          Object {
            "text": "Alabama",
            "value": "AL",
          },
          Object {
            "text": "Alaska",
            "value": "AK",
          },
          Object {
            "text": "Arizona",
            "value": "AZ",
          },
          Object {
            "text": "Arkansas",
            "value": "AR",
          },
          Object {
            "text": "California",
            "value": "CA",
          },
          Object {
            "text": "Colorado",
            "value": "CO",
          },
          Object {
            "text": "Connecticut",
            "value": "CT",
          },
          Object {
            "text": "Delaware",
            "value": "DE",
          },
          Object {
            "text": "Florida",
            "value": "FL",
          },
          Object {
            "text": "Georgia",
            "value": "GA",
          },
          Object {
            "text": "Hawaii",
            "value": "HI",
          },
          Object {
            "text": "Idaho",
            "value": "ID",
          },
          Object {
            "text": "Illinois",
            "value": "IL",
          },
          Object {
            "text": "Indiana",
            "value": "IN",
          },
          Object {
            "text": "Iowa",
            "value": "IA",
          },
          Object {
            "text": "Kansas",
            "value": "KS",
          },
          Object {
            "text": "Kentucky",
            "value": "KY",
          },
          Object {
            "text": "Louisiana",
            "value": "LA",
          },
          Object {
            "text": "Maine",
            "value": "ME",
          },
          Object {
            "text": "Maryland",
            "value": "MD",
          },
          Object {
            "text": "Massachusetts",
            "value": "MA",
          },
          Object {
            "text": "Michigan",
            "value": "MI",
          },
          Object {
            "text": "Minnesota",
            "value": "MN",
          },
          Object {
            "text": "Mississippi",
            "value": "MS",
          },
          Object {
            "text": "Missouri",
            "value": "MO",
          },
          Object {
            "text": "Montana",
            "value": "MT",
          },
          Object {
            "text": "Nebraska",
            "value": "NE",
          },
          Object {
            "text": "Nevada",
            "value": "NV",
          },
          Object {
            "text": "New Hampshire",
            "value": "NH",
          },
          Object {
            "text": "New Jersey",
            "value": "NJ",
          },
          Object {
            "text": "New Mexico",
            "value": "NM",
          },
          Object {
            "text": "New York",
            "value": "NY",
          },
          Object {
            "text": "North Carolina",
            "value": "NC",
          },
          Object {
            "text": "North Dakota",
            "value": "ND",
          },
          Object {
            "text": "Ohio",
            "value": "OH",
          },
          Object {
            "text": "Oklahoma",
            "value": "OK",
          },
          Object {
            "text": "Oregon",
            "value": "OR",
          },
          Object {
            "text": "Pennsylvania",
            "value": "PA",
          },
          Object {
            "text": "Rhode Island",
            "value": "RI",
          },
          Object {
            "text": "South Carolina",
            "value": "SC",
          },
          Object {
            "text": "South Dakota",
            "value": "SD",
          },
          Object {
            "text": "Tennessee",
            "value": "TN",
          },
          Object {
            "text": "Texas",
            "value": "TX",
          },
          Object {
            "text": "Utah",
            "value": "UT",
          },
          Object {
            "text": "Vermont",
            "value": "VT",
          },
          Object {
            "text": "Virginia",
            "value": "VA",
          },
          Object {
            "text": "Washington",
            "value": "WA",
          },
          Object {
            "text": "West Virginia",
            "value": "WV",
          },
          Object {
            "text": "Wisconsin",
            "value": "WI",
          },
          Object {
            "text": "Wyoming",
            "value": "WY",
          },
        ]
      }
      defaultSelectedItem={
        Object {
          "text": "Colorado",
          "value": "CO",
        }
      }
      id="select-1"
      isOpen={false}
      itemKey="value"
      menu={[Function]}
      modifiers={
        Object {
          "contentWidth": Object {
            "enabled": true,
            "fn": [Function],
          },
        }
      }
      name="state"
      onClose={[Function]}
      onOpen={[Function]}
      placeholder="Select..."
      placement="bottom-start"
      size="large"
    >
      <Themed(Dropdown)
        className="emotion-14"
        data={
          Array [
            Object {
              "text": "Alabama",
              "value": "AL",
            },
            Object {
              "text": "Alaska",
              "value": "AK",
            },
            Object {
              "text": "Arizona",
              "value": "AZ",
            },
            Object {
              "text": "Arkansas",
              "value": "AR",
            },
            Object {
              "text": "California",
              "value": "CA",
            },
            Object {
              "text": "Colorado",
              "value": "CO",
            },
            Object {
              "text": "Connecticut",
              "value": "CT",
            },
            Object {
              "text": "Delaware",
              "value": "DE",
            },
            Object {
              "text": "Florida",
              "value": "FL",
            },
            Object {
              "text": "Georgia",
              "value": "GA",
            },
            Object {
              "text": "Hawaii",
              "value": "HI",
            },
            Object {
              "text": "Idaho",
              "value": "ID",
            },
            Object {
              "text": "Illinois",
              "value": "IL",
            },
            Object {
              "text": "Indiana",
              "value": "IN",
            },
            Object {
              "text": "Iowa",
              "value": "IA",
            },
            Object {
              "text": "Kansas",
              "value": "KS",
            },
            Object {
              "text": "Kentucky",
              "value": "KY",
            },
            Object {
              "text": "Louisiana",
              "value": "LA",
            },
            Object {
              "text": "Maine",
              "value": "ME",
            },
            Object {
              "text": "Maryland",
              "value": "MD",
            },
            Object {
              "text": "Massachusetts",
              "value": "MA",
            },
            Object {
              "text": "Michigan",
              "value": "MI",
            },
            Object {
              "text": "Minnesota",
              "value": "MN",
            },
            Object {
              "text": "Mississippi",
              "value": "MS",
            },
            Object {
              "text": "Missouri",
              "value": "MO",
            },
            Object {
              "text": "Montana",
              "value": "MT",
            },
            Object {
              "text": "Nebraska",
              "value": "NE",
            },
            Object {
              "text": "Nevada",
              "value": "NV",
            },
            Object {
              "text": "New Hampshire",
              "value": "NH",
            },
            Object {
              "text": "New Jersey",
              "value": "NJ",
            },
            Object {
              "text": "New Mexico",
              "value": "NM",
            },
            Object {
              "text": "New York",
              "value": "NY",
            },
            Object {
              "text": "North Carolina",
              "value": "NC",
            },
            Object {
              "text": "North Dakota",
              "value": "ND",
            },
            Object {
              "text": "Ohio",
              "value": "OH",
            },
            Object {
              "text": "Oklahoma",
              "value": "OK",
            },
            Object {
              "text": "Oregon",
              "value": "OR",
            },
            Object {
              "text": "Pennsylvania",
              "value": "PA",
            },
            Object {
              "text": "Rhode Island",
              "value": "RI",
            },
            Object {
              "text": "South Carolina",
              "value": "SC",
            },
            Object {
              "text": "South Dakota",
              "value": "SD",
            },
            Object {
              "text": "Tennessee",
              "value": "TN",
            },
            Object {
              "text": "Texas",
              "value": "TX",
            },
            Object {
              "text": "Utah",
              "value": "UT",
            },
            Object {
              "text": "Vermont",
              "value": "VT",
            },
            Object {
              "text": "Virginia",
              "value": "VA",
            },
            Object {
              "text": "Washington",
              "value": "WA",
            },
            Object {
              "text": "West Virginia",
              "value": "WV",
            },
            Object {
              "text": "Wisconsin",
              "value": "WI",
            },
            Object {
              "text": "Wyoming",
              "value": "WY",
            },
          ]
        }
        defaultSelectedItem={
          Object {
            "text": "Colorado",
            "value": "CO",
          }
        }
        id="select-1"
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        name="state"
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Select..."
        placement="bottom-start"
        size="large"
      >
        <ThemeProvider>
          <ThemeProvider>
            <Dropdown
              className="emotion-14"
              data={
                Array [
                  Object {
                    "text": "Alabama",
                    "value": "AL",
                  },
                  Object {
                    "text": "Alaska",
                    "value": "AK",
                  },
                  Object {
                    "text": "Arizona",
                    "value": "AZ",
                  },
                  Object {
                    "text": "Arkansas",
                    "value": "AR",
                  },
                  Object {
                    "text": "California",
                    "value": "CA",
                  },
                  Object {
                    "text": "Colorado",
                    "value": "CO",
                  },
                  Object {
                    "text": "Connecticut",
                    "value": "CT",
                  },
                  Object {
                    "text": "Delaware",
                    "value": "DE",
                  },
                  Object {
                    "text": "Florida",
                    "value": "FL",
                  },
                  Object {
                    "text": "Georgia",
                    "value": "GA",
                  },
                  Object {
                    "text": "Hawaii",
                    "value": "HI",
                  },
                  Object {
                    "text": "Idaho",
                    "value": "ID",
                  },
                  Object {
                    "text": "Illinois",
                    "value": "IL",
                  },
                  Object {
                    "text": "Indiana",
                    "value": "IN",
                  },
                  Object {
                    "text": "Iowa",
                    "value": "IA",
                  },
                  Object {
                    "text": "Kansas",
                    "value": "KS",
                  },
                  Object {
                    "text": "Kentucky",
                    "value": "KY",
                  },
                  Object {
                    "text": "Louisiana",
                    "value": "LA",
                  },
                  Object {
                    "text": "Maine",
                    "value": "ME",
                  },
                  Object {
                    "text": "Maryland",
                    "value": "MD",
                  },
                  Object {
                    "text": "Massachusetts",
                    "value": "MA",
                  },
                  Object {
                    "text": "Michigan",
                    "value": "MI",
                  },
                  Object {
                    "text": "Minnesota",
                    "value": "MN",
                  },
                  Object {
                    "text": "Mississippi",
                    "value": "MS",
                  },
                  Object {
                    "text": "Missouri",
                    "value": "MO",
                  },
                  Object {
                    "text": "Montana",
                    "value": "MT",
                  },
                  Object {
                    "text": "Nebraska",
                    "value": "NE",
                  },
                  Object {
                    "text": "Nevada",
                    "value": "NV",
                  },
                  Object {
                    "text": "New Hampshire",
                    "value": "NH",
                  },
                  Object {
                    "text": "New Jersey",
                    "value": "NJ",
                  },
                  Object {
                    "text": "New Mexico",
                    "value": "NM",
                  },
                  Object {
                    "text": "New York",
                    "value": "NY",
                  },
                  Object {
                    "text": "North Carolina",
                    "value": "NC",
                  },
                  Object {
                    "text": "North Dakota",
                    "value": "ND",
                  },
                  Object {
                    "text": "Ohio",
                    "value": "OH",
                  },
                  Object {
                    "text": "Oklahoma",
                    "value": "OK",
                  },
                  Object {
                    "text": "Oregon",
                    "value": "OR",
                  },
                  Object {
                    "text": "Pennsylvania",
                    "value": "PA",
                  },
                  Object {
                    "text": "Rhode Island",
                    "value": "RI",
                  },
                  Object {
                    "text": "South Carolina",
                    "value": "SC",
                  },
                  Object {
                    "text": "South Dakota",
                    "value": "SD",
                  },
                  Object {
                    "text": "Tennessee",
                    "value": "TN",
                  },
                  Object {
                    "text": "Texas",
                    "value": "TX",
                  },
                  Object {
                    "text": "Utah",
                    "value": "UT",
                  },
                  Object {
                    "text": "Vermont",
                    "value": "VT",
                  },
                  Object {
                    "text": "Virginia",
                    "value": "VA",
                  },
                  Object {
                    "text": "Washington",
                    "value": "WA",
                  },
                  Object {
                    "text": "West Virginia",
                    "value": "WV",
                  },
                  Object {
                    "text": "Wisconsin",
                    "value": "WI",
                  },
                  Object {
                    "text": "Wyoming",
                    "value": "WY",
                  },
                ]
              }
              defaultSelectedItem={
                Object {
                  "text": "Colorado",
                  "value": "CO",
                }
              }
              id="select-1"
              isOpen={false}
              itemKey="value"
              menu={[Function]}
              modifiers={
                Object {
                  "contentWidth": Object {
                    "enabled": true,
                    "fn": [Function],
                  },
                }
              }
              name="state"
              onClose={[Function]}
              onOpen={[Function]}
              placeholder="Select..."
              placement="bottom-start"
              size="large"
            >
              <Popover
                className="emotion-14"
                content={[Function]}
                defaultSelectedItem={
                  Object {
                    "text": "Colorado",
                    "value": "CO",
                  }
                }
                focusTriggerOnClose={true}
                hasArrow={true}
                id="select-1"
                isOpen={false}
                itemKey="value"
                modifiers={
                  Object {
                    "contentWidth": Object {
                      "enabled": true,
                      "fn": [Function],
                    },
                  }
                }
                name="state"
                onClose={[Function]}
                onOpen={[Function]}
                placeholder="Select..."
                placement="bottom-start"
                size="large"
                triggerRef={[Function]}
              >
                <Manager>
                  <Styled(span)
                    className="emotion-14"
                    content={[Function]}
                    defaultSelectedItem={
                      Object {
                        "text": "Colorado",
                        "value": "CO",
                      }
                    }
                    focusTriggerOnClose={true}
                    hasArrow={true}
                    id="select-1"
                    isOpen={false}
                    itemKey="value"
                    name="state"
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Select..."
                    placement="bottom-start"
                    size="large"
                    triggerRef={[Function]}
                  >
                    <span
                      className="emotion-13"
                      content={[Function]}
                      id="select-1"
                      name="state"
                      onClose={[Function]}
                      onOpen={[Function]}
                      placeholder="Select..."
                      size="large"
                    >
                      <PopoverTrigger
                        aria-describedby="select-1-content"
                        aria-expanded={false}
                        aria-haspopup="listbox"
                        aria-owns="select-1-content"
                        isOpen={false}
                        item={
                          Object {
                            "text": "Colorado",
                            "value": "CO",
                          }
                        }
                        name="state"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        placeholder="Select..."
                        role="button"
                        size="large"
                        tabIndex={0}
                        triggerRef={[Function]}
                      >
                        <Reference>
                          <InnerReference
                            getReferenceRef={[Function]}
                          >
                            <Styled(span)>
                              <span
                                className="emotion-12"
                              >
                                <SelectTrigger
                                  aria-describedby="select-1-content"
                                  aria-expanded={false}
                                  aria-haspopup="listbox"
                                  aria-owns="select-1-content"
                                  isOpen={false}
                                  item={
                                    Object {
                                      "text": "Colorado",
                                      "value": "CO",
                                    }
                                  }
                                  name="state"
                                  onBlur={[Function]}
                                  onClick={[Function]}
                                  onKeyDown={[Function]}
                                  onKeyUp={[Function]}
                                  placeholder="Select..."
                                  role="button"
                                  size="large"
                                  tabIndex={0}
                                  triggerRef={[Function]}
                                >
                                  <Styled(WithTheme(Themed(FauxControl)))
                                    afterItems={
                                      Array [
                                        <withProps(Styled(IconArrowDropdownDown)) />,
                                        <input
                                          name="state"
                                          onClick={[Function]}
                                          type="hidden"
                                          value="CO"
                                        />,
                                      ]
                                    }
                                    aria-describedby="select-1-content"
                                    aria-expanded={false}
                                    aria-haspopup="listbox"
                                    aria-owns="select-1-content"
                                    control={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "__emotion_base": "div",
                                        "__emotion_forwardProp": undefined,
                                        "__emotion_real": [Circular],
                                        "__emotion_styles": Array [
                                          [Function],
                                        ],
                                        "defaultProps": undefined,
                                        "displayName": "Styled(div)",
                                        "render": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    controlProps={
                                      Object {
                                        "hasPlaceholder": false,
                                        "variant": undefined,
                                      }
                                    }
                                    fauxControlRef={[Function]}
                                    item={
                                      Object {
                                        "text": "Colorado",
                                        "value": "CO",
                                      }
                                    }
                                    onBlur={[Function]}
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    role="button"
                                    size="large"
                                    tabIndex={0}
                                  >
                                    <WithTheme(Themed(FauxControl))
                                      afterItems={
                                        Array [
                                          <withProps(Styled(IconArrowDropdownDown)) />,
                                          <input
                                            name="state"
                                            onClick={[Function]}
                                            type="hidden"
                                            value="CO"
                                          />,
                                        ]
                                      }
                                      aria-describedby="select-1-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-1-content"
                                      className="emotion-8"
                                      control={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "__emotion_base": "div",
                                          "__emotion_forwardProp": undefined,
                                          "__emotion_real": [Circular],
                                          "__emotion_styles": Array [
                                            [Function],
                                          ],
                                          "defaultProps": undefined,
                                          "displayName": "Styled(div)",
                                          "render": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      controlProps={
                                        Object {
                                          "hasPlaceholder": false,
                                          "variant": undefined,
                                        }
                                      }
                                      fauxControlRef={[Function]}
                                      item={
                                        Object {
                                          "text": "Colorado",
                                          "value": "CO",
                                        }
                                      }
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                    >
                                      <Themed(FauxControl)
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              name="state"
                                              onClick={[Function]}
                                              type="hidden"
                                              value="CO"
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-1-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-1-content"
                                        className="emotion-8"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": false,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        item={
                                          Object {
                                            "text": "Colorado",
                                            "value": "CO",
                                          }
                                        }
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                      >
                                        <ThemeProvider>
                                          <ThemeProvider>
                                            <FauxControl
                                              afterItems={
                                                Array [
                                                  <withProps(Styled(IconArrowDropdownDown)) />,
                                                  <input
                                                    name="state"
                                                    onClick={[Function]}
                                                    type="hidden"
                                                    value="CO"
                                                  />,
                                                ]
                                              }
                                              aria-describedby="select-1-content"
                                              aria-expanded={false}
                                              aria-haspopup="listbox"
                                              aria-owns="select-1-content"
                                              className="emotion-8"
                                              control={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "__emotion_base": "div",
                                                  "__emotion_forwardProp": undefined,
                                                  "__emotion_real": [Circular],
                                                  "__emotion_styles": Array [
                                                    [Function],
                                                  ],
                                                  "defaultProps": undefined,
                                                  "displayName": "Styled(div)",
                                                  "render": [Function],
                                                  "withComponent": [Function],
                                                }
                                              }
                                              controlProps={
                                                Object {
                                                  "hasPlaceholder": false,
                                                  "variant": undefined,
                                                }
                                              }
                                              fauxControlRef={[Function]}
                                              item={
                                                Object {
                                                  "text": "Colorado",
                                                  "value": "CO",
                                                }
                                              }
                                              onBlur={[Function]}
                                              onClick={[Function]}
                                              onKeyDown={[Function]}
                                              onKeyUp={[Function]}
                                              role="button"
                                              size="large"
                                              tabIndex={0}
                                            >
                                              <Styled(div)
                                                aria-describedby="select-1-content"
                                                aria-expanded={false}
                                                aria-haspopup="listbox"
                                                aria-owns="select-1-content"
                                                className="emotion-8"
                                                control={
                                                  Object {
                                                    "$$typeof": Symbol(react.forward_ref),
                                                    "__emotion_base": "div",
                                                    "__emotion_forwardProp": undefined,
                                                    "__emotion_real": [Circular],
                                                    "__emotion_styles": Array [
                                                      [Function],
                                                    ],
                                                    "defaultProps": undefined,
                                                    "displayName": "Styled(div)",
                                                    "render": [Function],
                                                    "withComponent": [Function],
                                                  }
                                                }
                                                item={
                                                  Object {
                                                    "text": "Colorado",
                                                    "value": "CO",
                                                  }
                                                }
                                                onBlur={[Function]}
                                                onClick={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                role="button"
                                                tabIndex={0}
                                              >
                                                <div
                                                  aria-describedby="select-1-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-1-content"
                                                  className="emotion-7"
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  tabIndex={0}
                                                >
                                                  <Styled(div)
                                                    controlPropsIn={
                                                      Object {
                                                        "hasPlaceholder": false,
                                                        "variant": undefined,
                                                      }
                                                    }
                                                    hasPlaceholder={false}
                                                    key="control"
                                                    size="large"
                                                  >
                                                    <div
                                                      className="emotion-1"
                                                      size="large"
                                                    >
                                                      <Styled(span)>
                                                        <span
                                                          className="emotion-0"
                                                        >
                                                          Colorado
                                                        </span>
                                                      </Styled(span)>
                                                    </div>
                                                  </Styled(div)>
                                                  <withProps(Styled(IconArrowDropdownDown))
                                                    key="arrow"
                                                  >
                                                    <Styled(IconArrowDropdownDown)
                                                      size="1.5em"
                                                    >
                                                      <IconArrowDropdownDown
                                                        className="emotion-3"
                                                        size="1.5em"
                                                      >
                                                        <Icon
                                                          className="emotion-3"
                                                          rtl={false}
                                                          size="1.5em"
                                                        >
                                                          <Styled(svg)
                                                            aria-hidden={true}
                                                            className="emotion-3"
                                                            focusable="false"
                                                            role="img"
                                                            rtl={false}
                                                            size="1.5em"
                                                            viewBox="0 0 24 24"
                                                          >
                                                            <svg
                                                              aria-hidden={true}
                                                              className="emotion-2"
                                                              focusable="false"
                                                              role="img"
                                                              size="1.5em"
                                                              viewBox="0 0 24 24"
                                                            >
                                                              <g>
                                                                <path
                                                                  d="M12 17.5l-8-8h16z"
                                                                />
                                                              </g>
                                                            </svg>
                                                          </Styled(svg)>
                                                        </Icon>
                                                      </IconArrowDropdownDown>
                                                    </Styled(IconArrowDropdownDown)>
                                                  </withProps(Styled(IconArrowDropdownDown))>
                                                  <input
                                                    key="input"
                                                    name="state"
                                                    onClick={[Function]}
                                                    type="hidden"
                                                    value="CO"
                                                  />
                                                  <Styled(div)>
                                                    <div
                                                      className="emotion-6"
                                                    />
                                                  </Styled(div)>
                                                </div>
                                              </Styled(div)>
                                            </FauxControl>
                                          </ThemeProvider>
                                        </ThemeProvider>
                                      </Themed(FauxControl)>
                                    </WithTheme(Themed(FauxControl))>
                                  </Styled(WithTheme(Themed(FauxControl)))>
                                </SelectTrigger>
                              </span>
                            </Styled(span)>
                          </InnerReference>
                        </Reference>
                      </PopoverTrigger>
                    </span>
                  </Styled(span)>
                </Manager>
              </Popover>
            </Dropdown>
          </ThemeProvider>
        </ThemeProvider>
      </Themed(Dropdown)>
    </WithTheme(Themed(Dropdown))>
  </Styled(WithTheme(Themed(Dropdown)))>
</Select>
`;

exports[`Select demo examples Snapshots: variants 1`] = `
.emotion-15 {
  width: 100%;
}

.emotion-15 > span {
  width: 100%;
}

.emotion-14 {
  display: inline-block;
  width: 100%;
}

.emotion-14 > span {
  width: 100%;
}

.emotion-13 {
  display: inline-block;
}

.emotion-0 {
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  word-wrap: normal;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  width: 100%;
}

.emotion-4 {
  margin: 0.5em;
}

.emotion-3 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
  margin: 0.5em;
}

.emotion-60[class] > *:not(:last-child) {
  margin-bottom: 1rem;
}

.emotion-9 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-9 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-9 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-9 :not([role="img"]) ~ [role="img"] {
  color: #de1b1b;
}

.emotion-9 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #de1b1b;
  margin-left: 0.5em;
}

.emotion-8 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-8 *,
.emotion-8 *::before,
.emotion-8 *::after {
  box-sizing: inherit;
}

.emotion-8:hover > div:last-child {
  border-color: #f55353;
}

.emotion-8:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #b80d0d;
}

.emotion-8:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #b80d0d;
}

.emotion-8 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-8 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-8 :not([role="img"]) ~ [role="img"] {
  color: #de1b1b;
}

.emotion-8 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #de1b1b;
  margin-left: 0.5em;
}

.emotion-1 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 0;
}

.emotion-1::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-1::-ms-clear {
  display: none;
}

.emotion-1:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #b80d0d;
}

.emotion-2 {
  fill: currentcolor;
  font-size: 16px;
  height: 1.5em;
  width: 1.5em;
}

.emotion-7 {
  background-color: #ffffff;
  border-color: #de1b1b;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-29 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-29 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-29 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-29 :not([role="img"]) ~ [role="img"] {
  color: #2a854e;
}

.emotion-29 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #2a854e;
  margin-left: 0.5em;
}

.emotion-28 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-28 *,
.emotion-28 *::before,
.emotion-28 *::after {
  box-sizing: inherit;
}

.emotion-28:hover > div:last-child {
  border-color: #3ba164;
}

.emotion-28:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #20693d;
}

.emotion-28:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #20693d;
}

.emotion-28 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-28 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-28 :not([role="img"]) ~ [role="img"] {
  color: #2a854e;
}

.emotion-28 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #2a854e;
  margin-left: 0.5em;
}

.emotion-21 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 0;
}

.emotion-21::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-21::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-21:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-21::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-21::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-21:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-21::-ms-clear {
  display: none;
}

.emotion-21:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #20693d;
}

.emotion-27 {
  background-color: #ffffff;
  border-color: #2a854e;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

.emotion-49 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-49 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-49 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-49 :not([role="img"]) ~ [role="img"] {
  color: #ad5f00;
}

.emotion-49 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #ad5f00;
  margin-left: 0.5em;
}

.emotion-48 {
  box-sizing: border-box;
  color: #333840;
  font-family: "Open Sans",-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
  font-size: 16px;
  line-height: 1.25;
  outline: 0;
  -moz-osx-font-smoothing: auto;
  -webkit-font-smoothing: antialiased;
  position: relative;
  z-index: 1;
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
}

.emotion-48 *,
.emotion-48 *::before,
.emotion-48 *::after {
  box-sizing: inherit;
}

.emotion-48:hover > div:last-child {
  border-color: #cf7911;
}

.emotion-48:focus > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #8a4d03;
}

.emotion-48:active > div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #8a4d03;
}

.emotion-48 [role="img"] {
  display: block;
  color: #3272d9;
  -webkit-flex: 0 0 auto;
  -ms-flex: 0 0 auto;
  flex: 0 0 auto;
}

.emotion-48 [role="img"]:first-child {
  color: #3272d9;
  margin: 0 0.5em;
}

.emotion-48 :not([role="img"]) ~ [role="img"] {
  color: #ad5f00;
}

.emotion-48 :not([role="img"]) + [role="img"]:not(:last-of-type) {
  color: #ad5f00;
  margin-left: 0.5em;
}

.emotion-41 {
  -webkit-align-items: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-flex: 1 1 auto;
  -ms-flex: 1 1 auto;
  flex: 1 1 auto;
  height: 2.857142857142857em;
  min-width: 0;
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-size: 0.875em;
  font-style: italic;
  outline: 0;
  padding-left: 1.1428571428571428em;
  padding-right: 0;
}

.emotion-41::-webkit-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-41::-moz-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-41:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-41::placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-41::-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-41:-ms-input-placeholder {
  color: #8e99ab;
  -webkit-text-fill-color: #8e99ab;
  font-style: italic;
}

.emotion-41::-ms-clear {
  display: none;
}

.emotion-41:focus ~ div:last-child {
  border-color: #c8d1e0;
  box-shadow: 0 0 0 1px #ffffff,0 0 0 2px #8a4d03;
}

.emotion-47 {
  background-color: #ffffff;
  border-color: #ad5f00;
  border-radius: 0.1875em;
  border-style: solid;
  border-width: 1px;
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  z-index: -1;
}

<Styled(div)>
  <div
    className="emotion-60"
  >
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      itemKey="value"
      placeholder="Select..."
      placement="bottom-start"
      size="large"
      variant="danger"
    >
      <Styled(WithTheme(Themed(Dropdown)))
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        id="select-37"
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Select..."
        placement="bottom-start"
        size="large"
        variant="danger"
      >
        <WithTheme(Themed(Dropdown))
          className="emotion-15"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          id="select-37"
          isOpen={false}
          itemKey="value"
          menu={[Function]}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placeholder="Select..."
          placement="bottom-start"
          size="large"
          variant="danger"
        >
          <Themed(Dropdown)
            className="emotion-15"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            id="select-37"
            isOpen={false}
            itemKey="value"
            menu={[Function]}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placeholder="Select..."
            placement="bottom-start"
            size="large"
            variant="danger"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="emotion-15"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  id="select-37"
                  isOpen={false}
                  itemKey="value"
                  menu={[Function]}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="Select..."
                  placement="bottom-start"
                  size="large"
                  variant="danger"
                >
                  <Popover
                    className="emotion-15"
                    content={[Function]}
                    focusTriggerOnClose={true}
                    hasArrow={true}
                    id="select-37"
                    isOpen={false}
                    itemKey="value"
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Select..."
                    placement="bottom-start"
                    size="large"
                    triggerRef={[Function]}
                    variant="danger"
                  >
                    <Manager>
                      <Styled(span)
                        className="emotion-15"
                        content={[Function]}
                        focusTriggerOnClose={true}
                        hasArrow={true}
                        id="select-37"
                        isOpen={false}
                        itemKey="value"
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Select..."
                        placement="bottom-start"
                        size="large"
                        triggerRef={[Function]}
                        variant="danger"
                      >
                        <span
                          className="emotion-14"
                          content={[Function]}
                          id="select-37"
                          onClose={[Function]}
                          onOpen={[Function]}
                          placeholder="Select..."
                          size="large"
                        >
                          <PopoverTrigger
                            aria-describedby="select-37-content"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-owns="select-37-content"
                            isOpen={false}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            placeholder="Select..."
                            role="button"
                            size="large"
                            tabIndex={0}
                            triggerRef={[Function]}
                            variant="danger"
                          >
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <Styled(span)>
                                  <span
                                    className="emotion-13"
                                  >
                                    <SelectTrigger
                                      aria-describedby="select-37-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-37-content"
                                      isOpen={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      placeholder="Select..."
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                      triggerRef={[Function]}
                                      variant="danger"
                                    >
                                      <Styled(WithTheme(Themed(FauxControl)))
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-37-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-37-content"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                        variant="danger"
                                      >
                                        <WithTheme(Themed(FauxControl))
                                          afterItems={
                                            Array [
                                              <withProps(Styled(IconArrowDropdownDown)) />,
                                              <input
                                                onClick={[Function]}
                                                type="hidden"
                                                value=""
                                              />,
                                            ]
                                          }
                                          aria-describedby="select-37-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-37-content"
                                          className="emotion-9"
                                          control={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "__emotion_base": "div",
                                              "__emotion_forwardProp": undefined,
                                              "__emotion_real": [Circular],
                                              "__emotion_styles": Array [
                                                [Function],
                                              ],
                                              "defaultProps": undefined,
                                              "displayName": "Styled(div)",
                                              "render": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          controlProps={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          fauxControlRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                          variant="danger"
                                        >
                                          <Themed(FauxControl)
                                            afterItems={
                                              Array [
                                                <withProps(Styled(IconArrowDropdownDown)) />,
                                                <input
                                                  onClick={[Function]}
                                                  type="hidden"
                                                  value=""
                                                />,
                                              ]
                                            }
                                            aria-describedby="select-37-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-37-content"
                                            className="emotion-9"
                                            control={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "__emotion_base": "div",
                                                "__emotion_forwardProp": undefined,
                                                "__emotion_real": [Circular],
                                                "__emotion_styles": Array [
                                                  [Function],
                                                ],
                                                "defaultProps": undefined,
                                                "displayName": "Styled(div)",
                                                "render": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            controlProps={
                                              Object {
                                                "hasPlaceholder": true,
                                                "variant": undefined,
                                              }
                                            }
                                            fauxControlRef={[Function]}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            size="large"
                                            tabIndex={0}
                                            variant="danger"
                                          >
                                            <ThemeProvider>
                                              <ThemeProvider>
                                                <FauxControl
                                                  afterItems={
                                                    Array [
                                                      <withProps(Styled(IconArrowDropdownDown)) />,
                                                      <input
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />,
                                                    ]
                                                  }
                                                  aria-describedby="select-37-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-37-content"
                                                  className="emotion-9"
                                                  control={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "__emotion_base": "div",
                                                      "__emotion_forwardProp": undefined,
                                                      "__emotion_real": [Circular],
                                                      "__emotion_styles": Array [
                                                        [Function],
                                                      ],
                                                      "defaultProps": undefined,
                                                      "displayName": "Styled(div)",
                                                      "render": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  controlProps={
                                                    Object {
                                                      "hasPlaceholder": true,
                                                      "variant": undefined,
                                                    }
                                                  }
                                                  fauxControlRef={[Function]}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  size="large"
                                                  tabIndex={0}
                                                  variant="danger"
                                                >
                                                  <Styled(div)
                                                    aria-describedby="select-37-content"
                                                    aria-expanded={false}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-37-content"
                                                    className="emotion-9"
                                                    control={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "__emotion_base": "div",
                                                        "__emotion_forwardProp": undefined,
                                                        "__emotion_real": [Circular],
                                                        "__emotion_styles": Array [
                                                          [Function],
                                                        ],
                                                        "defaultProps": undefined,
                                                        "displayName": "Styled(div)",
                                                        "render": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                    variant="danger"
                                                  >
                                                    <div
                                                      aria-describedby="select-37-content"
                                                      aria-expanded={false}
                                                      aria-haspopup="listbox"
                                                      aria-owns="select-37-content"
                                                      className="emotion-8"
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      <Styled(div)
                                                        controlPropsIn={
                                                          Object {
                                                            "hasPlaceholder": true,
                                                            "variant": undefined,
                                                          }
                                                        }
                                                        hasPlaceholder={true}
                                                        key="control"
                                                        size="large"
                                                        variant="danger"
                                                      >
                                                        <div
                                                          className="emotion-1"
                                                          size="large"
                                                        >
                                                          <Styled(span)>
                                                            <span
                                                              className="emotion-0"
                                                            >
                                                              Select...
                                                            </span>
                                                          </Styled(span)>
                                                        </div>
                                                      </Styled(div)>
                                                      <IconDanger
                                                        key="iconEnd"
                                                        size="1.5em"
                                                      >
                                                        <Icon
                                                          rtl={false}
                                                          size="1.5em"
                                                        >
                                                          <Styled(svg)
                                                            aria-hidden={true}
                                                            focusable="false"
                                                            role="img"
                                                            rtl={false}
                                                            size="1.5em"
                                                            viewBox="0 0 24 24"
                                                          >
                                                            <svg
                                                              aria-hidden={true}
                                                              className="emotion-2"
                                                              focusable="false"
                                                              role="img"
                                                              size="1.5em"
                                                              viewBox="0 0 24 24"
                                                            >
                                                              <g>
                                                                <path
                                                                  d="M3.94 19.49h16.118a1 1 0 0 0 .866-1.498l-8.06-13.99a.996.996 0 0 0-1.732-.001L3.074 17.993a.998.998 0 0 0 .867 1.499zM12 17a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm1-3.503h-2v-5h2v5z"
                                                                />
                                                              </g>
                                                            </svg>
                                                          </Styled(svg)>
                                                        </Icon>
                                                      </IconDanger>
                                                      <withProps(Styled(IconArrowDropdownDown))
                                                        key="arrow"
                                                      >
                                                        <Styled(IconArrowDropdownDown)
                                                          size="1.5em"
                                                        >
                                                          <IconArrowDropdownDown
                                                            className="emotion-4"
                                                            size="1.5em"
                                                          >
                                                            <Icon
                                                              className="emotion-4"
                                                              rtl={false}
                                                              size="1.5em"
                                                            >
                                                              <Styled(svg)
                                                                aria-hidden={true}
                                                                className="emotion-4"
                                                                focusable="false"
                                                                role="img"
                                                                rtl={false}
                                                                size="1.5em"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="emotion-3"
                                                                  focusable="false"
                                                                  role="img"
                                                                  size="1.5em"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <g>
                                                                    <path
                                                                      d="M12 17.5l-8-8h16z"
                                                                    />
                                                                  </g>
                                                                </svg>
                                                              </Styled(svg)>
                                                            </Icon>
                                                          </IconArrowDropdownDown>
                                                        </Styled(IconArrowDropdownDown)>
                                                      </withProps(Styled(IconArrowDropdownDown))>
                                                      <input
                                                        key="input"
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />
                                                      <Styled(div)
                                                        variant="danger"
                                                      >
                                                        <div
                                                          className="emotion-7"
                                                        />
                                                      </Styled(div)>
                                                    </div>
                                                  </Styled(div)>
                                                </FauxControl>
                                              </ThemeProvider>
                                            </ThemeProvider>
                                          </Themed(FauxControl)>
                                        </WithTheme(Themed(FauxControl))>
                                      </Styled(WithTheme(Themed(FauxControl)))>
                                    </SelectTrigger>
                                  </span>
                                </Styled(span)>
                              </InnerReference>
                            </Reference>
                          </PopoverTrigger>
                        </span>
                      </Styled(span)>
                    </Manager>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </WithTheme(Themed(Dropdown))>
      </Styled(WithTheme(Themed(Dropdown)))>
    </Select>
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      itemKey="value"
      placeholder="Select..."
      placement="bottom-start"
      size="large"
      variant="success"
    >
      <Styled(WithTheme(Themed(Dropdown)))
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        id="select-40"
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Select..."
        placement="bottom-start"
        size="large"
        variant="success"
      >
        <WithTheme(Themed(Dropdown))
          className="emotion-15"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          id="select-40"
          isOpen={false}
          itemKey="value"
          menu={[Function]}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placeholder="Select..."
          placement="bottom-start"
          size="large"
          variant="success"
        >
          <Themed(Dropdown)
            className="emotion-15"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            id="select-40"
            isOpen={false}
            itemKey="value"
            menu={[Function]}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placeholder="Select..."
            placement="bottom-start"
            size="large"
            variant="success"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="emotion-15"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  id="select-40"
                  isOpen={false}
                  itemKey="value"
                  menu={[Function]}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="Select..."
                  placement="bottom-start"
                  size="large"
                  variant="success"
                >
                  <Popover
                    className="emotion-15"
                    content={[Function]}
                    focusTriggerOnClose={true}
                    hasArrow={true}
                    id="select-40"
                    isOpen={false}
                    itemKey="value"
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Select..."
                    placement="bottom-start"
                    size="large"
                    triggerRef={[Function]}
                    variant="success"
                  >
                    <Manager>
                      <Styled(span)
                        className="emotion-15"
                        content={[Function]}
                        focusTriggerOnClose={true}
                        hasArrow={true}
                        id="select-40"
                        isOpen={false}
                        itemKey="value"
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Select..."
                        placement="bottom-start"
                        size="large"
                        triggerRef={[Function]}
                        variant="success"
                      >
                        <span
                          className="emotion-14"
                          content={[Function]}
                          id="select-40"
                          onClose={[Function]}
                          onOpen={[Function]}
                          placeholder="Select..."
                          size="large"
                        >
                          <PopoverTrigger
                            aria-describedby="select-40-content"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-owns="select-40-content"
                            isOpen={false}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            placeholder="Select..."
                            role="button"
                            size="large"
                            tabIndex={0}
                            triggerRef={[Function]}
                            variant="success"
                          >
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <Styled(span)>
                                  <span
                                    className="emotion-13"
                                  >
                                    <SelectTrigger
                                      aria-describedby="select-40-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-40-content"
                                      isOpen={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      placeholder="Select..."
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                      triggerRef={[Function]}
                                      variant="success"
                                    >
                                      <Styled(WithTheme(Themed(FauxControl)))
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-40-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-40-content"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                        variant="success"
                                      >
                                        <WithTheme(Themed(FauxControl))
                                          afterItems={
                                            Array [
                                              <withProps(Styled(IconArrowDropdownDown)) />,
                                              <input
                                                onClick={[Function]}
                                                type="hidden"
                                                value=""
                                              />,
                                            ]
                                          }
                                          aria-describedby="select-40-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-40-content"
                                          className="emotion-29"
                                          control={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "__emotion_base": "div",
                                              "__emotion_forwardProp": undefined,
                                              "__emotion_real": [Circular],
                                              "__emotion_styles": Array [
                                                [Function],
                                              ],
                                              "defaultProps": undefined,
                                              "displayName": "Styled(div)",
                                              "render": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          controlProps={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          fauxControlRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                          variant="success"
                                        >
                                          <Themed(FauxControl)
                                            afterItems={
                                              Array [
                                                <withProps(Styled(IconArrowDropdownDown)) />,
                                                <input
                                                  onClick={[Function]}
                                                  type="hidden"
                                                  value=""
                                                />,
                                              ]
                                            }
                                            aria-describedby="select-40-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-40-content"
                                            className="emotion-29"
                                            control={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "__emotion_base": "div",
                                                "__emotion_forwardProp": undefined,
                                                "__emotion_real": [Circular],
                                                "__emotion_styles": Array [
                                                  [Function],
                                                ],
                                                "defaultProps": undefined,
                                                "displayName": "Styled(div)",
                                                "render": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            controlProps={
                                              Object {
                                                "hasPlaceholder": true,
                                                "variant": undefined,
                                              }
                                            }
                                            fauxControlRef={[Function]}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            size="large"
                                            tabIndex={0}
                                            variant="success"
                                          >
                                            <ThemeProvider>
                                              <ThemeProvider>
                                                <FauxControl
                                                  afterItems={
                                                    Array [
                                                      <withProps(Styled(IconArrowDropdownDown)) />,
                                                      <input
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />,
                                                    ]
                                                  }
                                                  aria-describedby="select-40-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-40-content"
                                                  className="emotion-29"
                                                  control={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "__emotion_base": "div",
                                                      "__emotion_forwardProp": undefined,
                                                      "__emotion_real": [Circular],
                                                      "__emotion_styles": Array [
                                                        [Function],
                                                      ],
                                                      "defaultProps": undefined,
                                                      "displayName": "Styled(div)",
                                                      "render": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  controlProps={
                                                    Object {
                                                      "hasPlaceholder": true,
                                                      "variant": undefined,
                                                    }
                                                  }
                                                  fauxControlRef={[Function]}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  size="large"
                                                  tabIndex={0}
                                                  variant="success"
                                                >
                                                  <Styled(div)
                                                    aria-describedby="select-40-content"
                                                    aria-expanded={false}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-40-content"
                                                    className="emotion-29"
                                                    control={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "__emotion_base": "div",
                                                        "__emotion_forwardProp": undefined,
                                                        "__emotion_real": [Circular],
                                                        "__emotion_styles": Array [
                                                          [Function],
                                                        ],
                                                        "defaultProps": undefined,
                                                        "displayName": "Styled(div)",
                                                        "render": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                    variant="success"
                                                  >
                                                    <div
                                                      aria-describedby="select-40-content"
                                                      aria-expanded={false}
                                                      aria-haspopup="listbox"
                                                      aria-owns="select-40-content"
                                                      className="emotion-28"
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      <Styled(div)
                                                        controlPropsIn={
                                                          Object {
                                                            "hasPlaceholder": true,
                                                            "variant": undefined,
                                                          }
                                                        }
                                                        hasPlaceholder={true}
                                                        key="control"
                                                        size="large"
                                                        variant="success"
                                                      >
                                                        <div
                                                          className="emotion-21"
                                                          size="large"
                                                        >
                                                          <Styled(span)>
                                                            <span
                                                              className="emotion-0"
                                                            >
                                                              Select...
                                                            </span>
                                                          </Styled(span)>
                                                        </div>
                                                      </Styled(div)>
                                                      <IconSuccess
                                                        key="iconEnd"
                                                        size="1.5em"
                                                      >
                                                        <Icon
                                                          rtl={false}
                                                          size="1.5em"
                                                        >
                                                          <Styled(svg)
                                                            aria-hidden={true}
                                                            focusable="false"
                                                            role="img"
                                                            rtl={false}
                                                            size="1.5em"
                                                            viewBox="0 0 24 24"
                                                          >
                                                            <svg
                                                              aria-hidden={true}
                                                              className="emotion-2"
                                                              focusable="false"
                                                              role="img"
                                                              size="1.5em"
                                                              viewBox="0 0 24 24"
                                                            >
                                                              <g>
                                                                <path
                                                                  d="M12 3c4.968 0 9 4.032 9 9s-4.032 9-9 9-9-4.032-9-9 4.032-9 9-9zm-4.247 8.445L6.5 12.698l3.838 3.838 7.198-7.198-1.253-1.254-5.945 5.945-2.585-2.585z"
                                                                />
                                                              </g>
                                                            </svg>
                                                          </Styled(svg)>
                                                        </Icon>
                                                      </IconSuccess>
                                                      <withProps(Styled(IconArrowDropdownDown))
                                                        key="arrow"
                                                      >
                                                        <Styled(IconArrowDropdownDown)
                                                          size="1.5em"
                                                        >
                                                          <IconArrowDropdownDown
                                                            className="emotion-4"
                                                            size="1.5em"
                                                          >
                                                            <Icon
                                                              className="emotion-4"
                                                              rtl={false}
                                                              size="1.5em"
                                                            >
                                                              <Styled(svg)
                                                                aria-hidden={true}
                                                                className="emotion-4"
                                                                focusable="false"
                                                                role="img"
                                                                rtl={false}
                                                                size="1.5em"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="emotion-3"
                                                                  focusable="false"
                                                                  role="img"
                                                                  size="1.5em"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <g>
                                                                    <path
                                                                      d="M12 17.5l-8-8h16z"
                                                                    />
                                                                  </g>
                                                                </svg>
                                                              </Styled(svg)>
                                                            </Icon>
                                                          </IconArrowDropdownDown>
                                                        </Styled(IconArrowDropdownDown)>
                                                      </withProps(Styled(IconArrowDropdownDown))>
                                                      <input
                                                        key="input"
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />
                                                      <Styled(div)
                                                        variant="success"
                                                      >
                                                        <div
                                                          className="emotion-27"
                                                        />
                                                      </Styled(div)>
                                                    </div>
                                                  </Styled(div)>
                                                </FauxControl>
                                              </ThemeProvider>
                                            </ThemeProvider>
                                          </Themed(FauxControl)>
                                        </WithTheme(Themed(FauxControl))>
                                      </Styled(WithTheme(Themed(FauxControl)))>
                                    </SelectTrigger>
                                  </span>
                                </Styled(span)>
                              </InnerReference>
                            </Reference>
                          </PopoverTrigger>
                        </span>
                      </Styled(span)>
                    </Manager>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </WithTheme(Themed(Dropdown))>
      </Styled(WithTheme(Themed(Dropdown)))>
    </Select>
    <Select
      data={
        Array [
          Object {
            "text": "Alpha",
            "value": "alpha",
          },
          Object {
            "text": "Beta",
            "value": "beta",
          },
          Object {
            "text": "Gamma",
            "value": "gamma",
          },
        ]
      }
      itemKey="value"
      placeholder="Select..."
      placement="bottom-start"
      size="large"
      variant="warning"
    >
      <Styled(WithTheme(Themed(Dropdown)))
        data={
          Array [
            Object {
              "text": "Alpha",
              "value": "alpha",
            },
            Object {
              "text": "Beta",
              "value": "beta",
            },
            Object {
              "text": "Gamma",
              "value": "gamma",
            },
          ]
        }
        id="select-43"
        isOpen={false}
        itemKey="value"
        menu={[Function]}
        modifiers={
          Object {
            "contentWidth": Object {
              "enabled": true,
              "fn": [Function],
            },
          }
        }
        onClose={[Function]}
        onOpen={[Function]}
        placeholder="Select..."
        placement="bottom-start"
        size="large"
        variant="warning"
      >
        <WithTheme(Themed(Dropdown))
          className="emotion-15"
          data={
            Array [
              Object {
                "text": "Alpha",
                "value": "alpha",
              },
              Object {
                "text": "Beta",
                "value": "beta",
              },
              Object {
                "text": "Gamma",
                "value": "gamma",
              },
            ]
          }
          id="select-43"
          isOpen={false}
          itemKey="value"
          menu={[Function]}
          modifiers={
            Object {
              "contentWidth": Object {
                "enabled": true,
                "fn": [Function],
              },
            }
          }
          onClose={[Function]}
          onOpen={[Function]}
          placeholder="Select..."
          placement="bottom-start"
          size="large"
          variant="warning"
        >
          <Themed(Dropdown)
            className="emotion-15"
            data={
              Array [
                Object {
                  "text": "Alpha",
                  "value": "alpha",
                },
                Object {
                  "text": "Beta",
                  "value": "beta",
                },
                Object {
                  "text": "Gamma",
                  "value": "gamma",
                },
              ]
            }
            id="select-43"
            isOpen={false}
            itemKey="value"
            menu={[Function]}
            modifiers={
              Object {
                "contentWidth": Object {
                  "enabled": true,
                  "fn": [Function],
                },
              }
            }
            onClose={[Function]}
            onOpen={[Function]}
            placeholder="Select..."
            placement="bottom-start"
            size="large"
            variant="warning"
          >
            <ThemeProvider>
              <ThemeProvider>
                <Dropdown
                  className="emotion-15"
                  data={
                    Array [
                      Object {
                        "text": "Alpha",
                        "value": "alpha",
                      },
                      Object {
                        "text": "Beta",
                        "value": "beta",
                      },
                      Object {
                        "text": "Gamma",
                        "value": "gamma",
                      },
                    ]
                  }
                  id="select-43"
                  isOpen={false}
                  itemKey="value"
                  menu={[Function]}
                  modifiers={
                    Object {
                      "contentWidth": Object {
                        "enabled": true,
                        "fn": [Function],
                      },
                    }
                  }
                  onClose={[Function]}
                  onOpen={[Function]}
                  placeholder="Select..."
                  placement="bottom-start"
                  size="large"
                  variant="warning"
                >
                  <Popover
                    className="emotion-15"
                    content={[Function]}
                    focusTriggerOnClose={true}
                    hasArrow={true}
                    id="select-43"
                    isOpen={false}
                    itemKey="value"
                    modifiers={
                      Object {
                        "contentWidth": Object {
                          "enabled": true,
                          "fn": [Function],
                        },
                      }
                    }
                    onClose={[Function]}
                    onOpen={[Function]}
                    placeholder="Select..."
                    placement="bottom-start"
                    size="large"
                    triggerRef={[Function]}
                    variant="warning"
                  >
                    <Manager>
                      <Styled(span)
                        className="emotion-15"
                        content={[Function]}
                        focusTriggerOnClose={true}
                        hasArrow={true}
                        id="select-43"
                        isOpen={false}
                        itemKey="value"
                        onClose={[Function]}
                        onOpen={[Function]}
                        placeholder="Select..."
                        placement="bottom-start"
                        size="large"
                        triggerRef={[Function]}
                        variant="warning"
                      >
                        <span
                          className="emotion-14"
                          content={[Function]}
                          id="select-43"
                          onClose={[Function]}
                          onOpen={[Function]}
                          placeholder="Select..."
                          size="large"
                        >
                          <PopoverTrigger
                            aria-describedby="select-43-content"
                            aria-expanded={false}
                            aria-haspopup="listbox"
                            aria-owns="select-43-content"
                            isOpen={false}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            placeholder="Select..."
                            role="button"
                            size="large"
                            tabIndex={0}
                            triggerRef={[Function]}
                            variant="warning"
                          >
                            <Reference>
                              <InnerReference
                                getReferenceRef={[Function]}
                              >
                                <Styled(span)>
                                  <span
                                    className="emotion-13"
                                  >
                                    <SelectTrigger
                                      aria-describedby="select-43-content"
                                      aria-expanded={false}
                                      aria-haspopup="listbox"
                                      aria-owns="select-43-content"
                                      isOpen={false}
                                      onBlur={[Function]}
                                      onClick={[Function]}
                                      onKeyDown={[Function]}
                                      onKeyUp={[Function]}
                                      placeholder="Select..."
                                      role="button"
                                      size="large"
                                      tabIndex={0}
                                      triggerRef={[Function]}
                                      variant="warning"
                                    >
                                      <Styled(WithTheme(Themed(FauxControl)))
                                        afterItems={
                                          Array [
                                            <withProps(Styled(IconArrowDropdownDown)) />,
                                            <input
                                              onClick={[Function]}
                                              type="hidden"
                                              value=""
                                            />,
                                          ]
                                        }
                                        aria-describedby="select-43-content"
                                        aria-expanded={false}
                                        aria-haspopup="listbox"
                                        aria-owns="select-43-content"
                                        control={
                                          Object {
                                            "$$typeof": Symbol(react.forward_ref),
                                            "__emotion_base": "div",
                                            "__emotion_forwardProp": undefined,
                                            "__emotion_real": [Circular],
                                            "__emotion_styles": Array [
                                              [Function],
                                            ],
                                            "defaultProps": undefined,
                                            "displayName": "Styled(div)",
                                            "render": [Function],
                                            "withComponent": [Function],
                                          }
                                        }
                                        controlProps={
                                          Object {
                                            "hasPlaceholder": true,
                                            "variant": undefined,
                                          }
                                        }
                                        fauxControlRef={[Function]}
                                        onBlur={[Function]}
                                        onClick={[Function]}
                                        onKeyDown={[Function]}
                                        onKeyUp={[Function]}
                                        role="button"
                                        size="large"
                                        tabIndex={0}
                                        variant="warning"
                                      >
                                        <WithTheme(Themed(FauxControl))
                                          afterItems={
                                            Array [
                                              <withProps(Styled(IconArrowDropdownDown)) />,
                                              <input
                                                onClick={[Function]}
                                                type="hidden"
                                                value=""
                                              />,
                                            ]
                                          }
                                          aria-describedby="select-43-content"
                                          aria-expanded={false}
                                          aria-haspopup="listbox"
                                          aria-owns="select-43-content"
                                          className="emotion-49"
                                          control={
                                            Object {
                                              "$$typeof": Symbol(react.forward_ref),
                                              "__emotion_base": "div",
                                              "__emotion_forwardProp": undefined,
                                              "__emotion_real": [Circular],
                                              "__emotion_styles": Array [
                                                [Function],
                                              ],
                                              "defaultProps": undefined,
                                              "displayName": "Styled(div)",
                                              "render": [Function],
                                              "withComponent": [Function],
                                            }
                                          }
                                          controlProps={
                                            Object {
                                              "hasPlaceholder": true,
                                              "variant": undefined,
                                            }
                                          }
                                          fauxControlRef={[Function]}
                                          onBlur={[Function]}
                                          onClick={[Function]}
                                          onKeyDown={[Function]}
                                          onKeyUp={[Function]}
                                          role="button"
                                          size="large"
                                          tabIndex={0}
                                          variant="warning"
                                        >
                                          <Themed(FauxControl)
                                            afterItems={
                                              Array [
                                                <withProps(Styled(IconArrowDropdownDown)) />,
                                                <input
                                                  onClick={[Function]}
                                                  type="hidden"
                                                  value=""
                                                />,
                                              ]
                                            }
                                            aria-describedby="select-43-content"
                                            aria-expanded={false}
                                            aria-haspopup="listbox"
                                            aria-owns="select-43-content"
                                            className="emotion-49"
                                            control={
                                              Object {
                                                "$$typeof": Symbol(react.forward_ref),
                                                "__emotion_base": "div",
                                                "__emotion_forwardProp": undefined,
                                                "__emotion_real": [Circular],
                                                "__emotion_styles": Array [
                                                  [Function],
                                                ],
                                                "defaultProps": undefined,
                                                "displayName": "Styled(div)",
                                                "render": [Function],
                                                "withComponent": [Function],
                                              }
                                            }
                                            controlProps={
                                              Object {
                                                "hasPlaceholder": true,
                                                "variant": undefined,
                                              }
                                            }
                                            fauxControlRef={[Function]}
                                            onBlur={[Function]}
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            onKeyUp={[Function]}
                                            role="button"
                                            size="large"
                                            tabIndex={0}
                                            variant="warning"
                                          >
                                            <ThemeProvider>
                                              <ThemeProvider>
                                                <FauxControl
                                                  afterItems={
                                                    Array [
                                                      <withProps(Styled(IconArrowDropdownDown)) />,
                                                      <input
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />,
                                                    ]
                                                  }
                                                  aria-describedby="select-43-content"
                                                  aria-expanded={false}
                                                  aria-haspopup="listbox"
                                                  aria-owns="select-43-content"
                                                  className="emotion-49"
                                                  control={
                                                    Object {
                                                      "$$typeof": Symbol(react.forward_ref),
                                                      "__emotion_base": "div",
                                                      "__emotion_forwardProp": undefined,
                                                      "__emotion_real": [Circular],
                                                      "__emotion_styles": Array [
                                                        [Function],
                                                      ],
                                                      "defaultProps": undefined,
                                                      "displayName": "Styled(div)",
                                                      "render": [Function],
                                                      "withComponent": [Function],
                                                    }
                                                  }
                                                  controlProps={
                                                    Object {
                                                      "hasPlaceholder": true,
                                                      "variant": undefined,
                                                    }
                                                  }
                                                  fauxControlRef={[Function]}
                                                  onBlur={[Function]}
                                                  onClick={[Function]}
                                                  onKeyDown={[Function]}
                                                  onKeyUp={[Function]}
                                                  role="button"
                                                  size="large"
                                                  tabIndex={0}
                                                  variant="warning"
                                                >
                                                  <Styled(div)
                                                    aria-describedby="select-43-content"
                                                    aria-expanded={false}
                                                    aria-haspopup="listbox"
                                                    aria-owns="select-43-content"
                                                    className="emotion-49"
                                                    control={
                                                      Object {
                                                        "$$typeof": Symbol(react.forward_ref),
                                                        "__emotion_base": "div",
                                                        "__emotion_forwardProp": undefined,
                                                        "__emotion_real": [Circular],
                                                        "__emotion_styles": Array [
                                                          [Function],
                                                        ],
                                                        "defaultProps": undefined,
                                                        "displayName": "Styled(div)",
                                                        "render": [Function],
                                                        "withComponent": [Function],
                                                      }
                                                    }
                                                    onBlur={[Function]}
                                                    onClick={[Function]}
                                                    onKeyDown={[Function]}
                                                    onKeyUp={[Function]}
                                                    role="button"
                                                    tabIndex={0}
                                                    variant="warning"
                                                  >
                                                    <div
                                                      aria-describedby="select-43-content"
                                                      aria-expanded={false}
                                                      aria-haspopup="listbox"
                                                      aria-owns="select-43-content"
                                                      className="emotion-48"
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      role="button"
                                                      tabIndex={0}
                                                    >
                                                      <Styled(div)
                                                        controlPropsIn={
                                                          Object {
                                                            "hasPlaceholder": true,
                                                            "variant": undefined,
                                                          }
                                                        }
                                                        hasPlaceholder={true}
                                                        key="control"
                                                        size="large"
                                                        variant="warning"
                                                      >
                                                        <div
                                                          className="emotion-41"
                                                          size="large"
                                                        >
                                                          <Styled(span)>
                                                            <span
                                                              className="emotion-0"
                                                            >
                                                              Select...
                                                            </span>
                                                          </Styled(span)>
                                                        </div>
                                                      </Styled(div)>
                                                      <IconWarning
                                                        key="iconEnd"
                                                        size="1.5em"
                                                      >
                                                        <Icon
                                                          rtl={false}
                                                          size="1.5em"
                                                        >
                                                          <Styled(svg)
                                                            aria-hidden={true}
                                                            focusable="false"
                                                            role="img"
                                                            rtl={false}
                                                            size="1.5em"
                                                            viewBox="0 0 24 24"
                                                          >
                                                            <svg
                                                              aria-hidden={true}
                                                              className="emotion-2"
                                                              focusable="false"
                                                              role="img"
                                                              size="1.5em"
                                                              viewBox="0 0 24 24"
                                                            >
                                                              <g>
                                                                <path
                                                                  d="M13.414 2.718l7.868 7.868c.78.78.78 2.047 0 2.828l-7.868 7.868c-.78.78-2.047.78-2.828 0l-7.868-7.868a2.001 2.001 0 0 1 0-2.828l7.868-7.868c.78-.78 2.047-.78 2.828 0zM12 17a1 1 0 1 0 0-2 1 1 0 0 0 0 2zm1-3.958V8h-2v5.042h2z"
                                                                />
                                                              </g>
                                                            </svg>
                                                          </Styled(svg)>
                                                        </Icon>
                                                      </IconWarning>
                                                      <withProps(Styled(IconArrowDropdownDown))
                                                        key="arrow"
                                                      >
                                                        <Styled(IconArrowDropdownDown)
                                                          size="1.5em"
                                                        >
                                                          <IconArrowDropdownDown
                                                            className="emotion-4"
                                                            size="1.5em"
                                                          >
                                                            <Icon
                                                              className="emotion-4"
                                                              rtl={false}
                                                              size="1.5em"
                                                            >
                                                              <Styled(svg)
                                                                aria-hidden={true}
                                                                className="emotion-4"
                                                                focusable="false"
                                                                role="img"
                                                                rtl={false}
                                                                size="1.5em"
                                                                viewBox="0 0 24 24"
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="emotion-3"
                                                                  focusable="false"
                                                                  role="img"
                                                                  size="1.5em"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <g>
                                                                    <path
                                                                      d="M12 17.5l-8-8h16z"
                                                                    />
                                                                  </g>
                                                                </svg>
                                                              </Styled(svg)>
                                                            </Icon>
                                                          </IconArrowDropdownDown>
                                                        </Styled(IconArrowDropdownDown)>
                                                      </withProps(Styled(IconArrowDropdownDown))>
                                                      <input
                                                        key="input"
                                                        onClick={[Function]}
                                                        type="hidden"
                                                        value=""
                                                      />
                                                      <Styled(div)
                                                        variant="warning"
                                                      >
                                                        <div
                                                          className="emotion-47"
                                                        />
                                                      </Styled(div)>
                                                    </div>
                                                  </Styled(div)>
                                                </FauxControl>
                                              </ThemeProvider>
                                            </ThemeProvider>
                                          </Themed(FauxControl)>
                                        </WithTheme(Themed(FauxControl))>
                                      </Styled(WithTheme(Themed(FauxControl)))>
                                    </SelectTrigger>
                                  </span>
                                </Styled(span)>
                              </InnerReference>
                            </Reference>
                          </PopoverTrigger>
                        </span>
                      </Styled(span)>
                    </Manager>
                  </Popover>
                </Dropdown>
              </ThemeProvider>
            </ThemeProvider>
          </Themed(Dropdown)>
        </WithTheme(Themed(Dropdown))>
      </Styled(WithTheme(Themed(Dropdown)))>
    </Select>
  </div>
</Styled(div)>
`;

exports[`Select mounted in DOM render props item calls item prop with expected arguments 1`] = `
Array [
  Object {
    "helpers": Object {
      "close": [Function],
      "focusTrigger": [Function],
      "open": [Function],
    },
    "props": Object {
      "aria-disabled": undefined,
      "aria-selected": false,
      "children": "A item",
      "disabled": undefined,
      "element": "div",
      "id": "select-87-item-0",
      "index": 0,
      "isHighlighted": false,
      "item": Object {
        "onClick": [MockFunction],
        "text": "A item",
        "value": "A",
      },
      "onClick": [Function],
      "onKeyDown": [Function],
      "role": "option",
      "tabIndex": null,
      "text": "A item",
      "value": "A",
    },
    "state": Object {
      "highlightedIndex": undefined,
      "isOpen": true,
      "selectedItem": undefined,
    },
  },
]
`;

exports[`Select mounted in DOM render props menu calls menu prop with expected arguments 1`] = `
Array [
  Object {
    "helpers": Object {
      "close": [Function],
      "focusTrigger": [Function],
      "open": [Function],
    },
    "props": Object {
      "data": Array [
        Object {
          "onClick": [MockFunction],
          "text": "A item",
          "value": "A",
        },
        Object {
          "onClick": [MockFunction],
          "text": "B item",
          "value": "B",
        },
        Object {
          "onClick": [MockFunction],
          "text": "C item",
          "value": "C",
        },
      ],
      "highlightedIndex": undefined,
      "id": "select-84-menu",
      "item": [Function],
      "itemKey": "value",
      "role": "listbox",
    },
    "state": Object {
      "highlightedIndex": undefined,
      "isOpen": true,
      "selectedItem": undefined,
    },
  },
]
`;

exports[`Select mounted in DOM render props trigger calls trigger prop with expected arguments 1`] = `
Array [
  Object {
    "helpers": Object {
      "close": [Function],
      "focusTrigger": [Function],
      "open": [Function],
    },
    "props": Object {
      "aria-describedby": "select-83-content",
      "aria-disabled": undefined,
      "aria-expanded": false,
      "aria-haspopup": "listbox",
      "aria-invalid": undefined,
      "aria-owns": "select-83-content",
      "aria-readonly": undefined,
      "aria-required": undefined,
      "children": undefined,
      "cursor": undefined,
      "disabled": undefined,
      "isOpen": false,
      "item": undefined,
      "name": undefined,
      "onBlur": [Function],
      "onClick": [Function],
      "onKeyDown": [Function],
      "onKeyUp": [Function],
      "placeholder": "Select...",
      "readOnly": undefined,
      "ref": [Function],
      "role": "button",
      "size": "large",
      "tabIndex": 0,
      "variant": undefined,
    },
    "state": Object {
      "highlightedIndex": undefined,
      "isOpen": false,
      "selectedItem": undefined,
    },
  },
]
`;
